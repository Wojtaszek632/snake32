
snake32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08007dc8  08007dc8  00017dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008068  08008068  00021a1c  2**0
                  CONTENTS
  4 .ARM          00000008  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008070  08008070  00021a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008070  08008070  00018070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001a1c  20000000  08008078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a1d8  20001a1c  08009a94  00021a1c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bbf4  08009a94  0002bbf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021a1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f6a  00000000  00000000  00021a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003199  00000000  00000000  000379b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0003ab50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  0003bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a3ac  00000000  00000000  0003cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c69  00000000  00000000  00066f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100d9f  00000000  00000000  0007abbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017b95c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005204  00000000  00000000  0017b9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00180bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00180bd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001a1c 	.word	0x20001a1c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dac 	.word	0x08007dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001a20 	.word	0x20001a20
 80001cc:	08007dac 	.word	0x08007dac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f52:	4b37      	ldr	r3, [pc, #220]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f54:	4a37      	ldr	r2, [pc, #220]	; (8001034 <MX_ADC1_Init+0x104>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f58:	4b35      	ldr	r3, [pc, #212]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5e:	4b34      	ldr	r3, [pc, #208]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f6a:	4b31      	ldr	r3, [pc, #196]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f70:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f72:	2204      	movs	r2, #4
 8000f74:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f76:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <MX_ADC1_Init+0x100>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MX_ADC1_Init+0x100>)
 8000fa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_ADC1_Init+0x100>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb4:	481e      	ldr	r0, [pc, #120]	; (8001030 <MX_ADC1_Init+0x100>)
 8000fb6:	f001 faef 	bl	8002598 <HAL_ADC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fc0:	f000 fbc2 	bl	8001748 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_ADC1_Init+0x100>)
 8000fd0:	f002 fb02 	bl	80035d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000fda:	f000 fbb5 	bl	8001748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_ADC1_Init+0x108>)
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fea:	237f      	movs	r3, #127	; 0x7f
 8000fec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_ADC1_Init+0x100>)
 8000ffc:	f001 fcf4 	bl	80029e8 <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001006:	f000 fb9f 	bl	8001748 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_ADC1_Init+0x10c>)
 800100c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800100e:	230c      	movs	r3, #12
 8001010:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <MX_ADC1_Init+0x100>)
 8001018:	f001 fce6 	bl	80029e8 <HAL_ADC_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001022:	f000 fb91 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000ba4c 	.word	0x2000ba4c
 8001034:	50040000 	.word	0x50040000
 8001038:	04300002 	.word	0x04300002
 800103c:	08600004 	.word	0x08600004

08001040 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0ac      	sub	sp, #176	; 0xb0
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2288      	movs	r2, #136	; 0x88
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f005 fad5 	bl	8006610 <memset>
  if(adcHandle->Instance==ADC1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a3c      	ldr	r2, [pc, #240]	; (800115c <HAL_ADC_MspInit+0x11c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d171      	bne.n	8001154 <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001070:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001074:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001076:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800107a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001086:	2310      	movs	r3, #16
 8001088:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800108a:	2307      	movs	r3, #7
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001096:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fd89 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010ac:	f000 fb4c 	bl	8001748 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_ADC_MspInit+0x120>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a2a      	ldr	r2, [pc, #168]	; (8001160 <HAL_ADC_MspInit+0x120>)
 80010b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <HAL_ADC_MspInit+0x120>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <HAL_ADC_MspInit+0x120>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	4a24      	ldr	r2, [pc, #144]	; (8001160 <HAL_ADC_MspInit+0x120>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_ADC_MspInit+0x120>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e0:	2303      	movs	r3, #3
 80010e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010e6:	230b      	movs	r3, #11
 80010e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f6:	4619      	mov	r1, r3
 80010f8:	481a      	ldr	r0, [pc, #104]	; (8001164 <HAL_ADC_MspInit+0x124>)
 80010fa:	f002 fd4b 	bl	8003b94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_ADC_MspInit+0x128>)
 8001100:	4a1a      	ldr	r2, [pc, #104]	; (800116c <HAL_ADC_MspInit+0x12c>)
 8001102:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_ADC_MspInit+0x128>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_ADC_MspInit+0x128>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_ADC_MspInit+0x128>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_ADC_MspInit+0x128>)
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_ADC_MspInit+0x128>)
 800111e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001122:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_ADC_MspInit+0x128>)
 8001126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_ADC_MspInit+0x128>)
 800112e:	2220      	movs	r2, #32
 8001130:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_ADC_MspInit+0x128>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <HAL_ADC_MspInit+0x128>)
 800113a:	f002 fbe3 	bl	8003904 <HAL_DMA_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8001144:	f000 fb00 	bl	8001748 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_ADC_MspInit+0x128>)
 800114c:	64da      	str	r2, [r3, #76]	; 0x4c
 800114e:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_ADC_MspInit+0x128>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001154:	bf00      	nop
 8001156:	37b0      	adds	r7, #176	; 0xb0
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	50040000 	.word	0x50040000
 8001160:	40021000 	.word	0x40021000
 8001164:	48000800 	.word	0x48000800
 8001168:	2000bab0 	.word	0x2000bab0
 800116c:	40020008 	.word	0x40020008

08001170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_DMA_Init+0x2c>)
 8001178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <MX_DMA_Init+0x2c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6493      	str	r3, [r2, #72]	; 0x48
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_DMA_Init+0x2c>)
 8001184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_GPIO_Init+0x90>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <MX_GPIO_Init+0x90>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_GPIO_Init+0x90>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_GPIO_Init+0x90>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <MX_GPIO_Init+0x90>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_GPIO_Init+0x90>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_GPIO_Init+0x90>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <MX_GPIO_Init+0x90>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_GPIO_Init+0x90>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f641 0104 	movw	r1, #6148	; 0x1804
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <MX_GPIO_Init+0x94>)
 8001206:	f002 fe6f 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 800120a:	f641 0304 	movw	r3, #6148	; 0x1804
 800120e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4619      	mov	r1, r3
 8001222:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_GPIO_Init+0x94>)
 8001224:	f002 fcb6 	bl	8003b94 <HAL_GPIO_Init>

}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400

08001238 <lcd_cmd>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

static void lcd_cmd(uint8_t cmd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <lcd_cmd+0x44>)
 800124a:	f002 fe4d 	bl	8003ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <lcd_cmd+0x44>)
 8001256:	f002 fe47 	bl	8003ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800125a:	1df9      	adds	r1, r7, #7
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	2201      	movs	r2, #1
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <lcd_cmd+0x48>)
 8001264:	f004 fa07 	bl	8005676 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <lcd_cmd+0x44>)
 8001270:	f002 fe3a 	bl	8003ee8 <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	48000400 	.word	0x48000400
 8001280:	2000baf8 	.word	0x2000baf8

08001284 <lcd_data>:

static void lcd_data(uint8_t data)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <lcd_data+0x44>)
 8001296:	f002 fe27 	bl	8003ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a0:	4809      	ldr	r0, [pc, #36]	; (80012c8 <lcd_data+0x44>)
 80012a2:	f002 fe21 	bl	8003ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80012a6:	1df9      	adds	r1, r7, #7
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ac:	2201      	movs	r2, #1
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <lcd_data+0x48>)
 80012b0:	f004 f9e1 	bl	8005676 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ba:	4803      	ldr	r0, [pc, #12]	; (80012c8 <lcd_data+0x44>)
 80012bc:	f002 fe14 	bl	8003ee8 <HAL_GPIO_WritePin>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	48000400 	.word	0x48000400
 80012cc:	2000baf8 	.word	0x2000baf8

080012d0 <lcd_send>:




static void lcd_send(uint16_t value)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <lcd_send+0x20>
		lcd_cmd(value);
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ffa5 	bl	8001238 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80012ee:	e004      	b.n	80012fa <lcd_send+0x2a>
		lcd_data(value);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ffc5 	bl	8001284 <lcd_data>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <lcd_init>:




void lcd_init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2104      	movs	r1, #4
 800130e:	4817      	ldr	r0, [pc, #92]	; (800136c <lcd_init+0x68>)
 8001310:	f002 fdea 	bl	8003ee8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f000 ff1f 	bl	8002158 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2104      	movs	r1, #4
 800131e:	4813      	ldr	r0, [pc, #76]	; (800136c <lcd_init+0x68>)
 8001320:	f002 fde2 	bl	8003ee8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001324:	2064      	movs	r0, #100	; 0x64
 8001326:	f000 ff17 	bl	8002158 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	e009      	b.n	8001344 <lcd_init+0x40>
    lcd_send(init_table[i]);
 8001330:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <lcd_init+0x6c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ffc9 	bl	80012d0 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b4b      	cmp	r3, #75	; 0x4b
 8001348:	d9f2      	bls.n	8001330 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 800134a:	20c8      	movs	r0, #200	; 0xc8
 800134c:	f000 ff04 	bl	8002158 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8001350:	2011      	movs	r0, #17
 8001352:	f7ff ff71 	bl	8001238 <lcd_cmd>
  HAL_Delay(120);
 8001356:	2078      	movs	r0, #120	; 0x78
 8001358:	f000 fefe 	bl	8002158 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 800135c:	2029      	movs	r0, #41	; 0x29
 800135e:	f7ff ff6b 	bl	8001238 <lcd_cmd>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	48000400 	.word	0x48000400
 8001370:	08007dc8 	.word	0x08007dc8

08001374 <lcd_data16>:



static void lcd_data16(uint16_t value)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	b29b      	uxth	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff7c 	bl	8001284 <lcd_data>
	lcd_data(value);
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff77 	bl	8001284 <lcd_data>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <lcd_set_window>:

#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_set_window(int x, int y, int width, int height)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80013ac:	202a      	movs	r0, #42	; 0x2a
 80013ae:	f7ff ff43 	bl	8001238 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	3301      	adds	r3, #1
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ffda 	bl	8001374 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ffd1 	bl	8001374 <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 80013d2:	202b      	movs	r0, #43	; 0x2b
 80013d4:	f7ff ff30 	bl	8001238 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3302      	adds	r3, #2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ffc7 	bl	8001374 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ffbc 	bl	8001374 <lcd_data16>
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <lcd_put_pixel>:


static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

void lcd_put_pixel(int x, int y, uint16_t color)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	4613      	mov	r3, r2
 8001410:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	015b      	lsls	r3, r3, #5
 800141c:	461a      	mov	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	4905      	ldr	r1, [pc, #20]	; (8001438 <lcd_put_pixel+0x34>)
 8001424:	88fa      	ldrh	r2, [r7, #6]
 8001426:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20001a38 	.word	0x20001a38

0800143c <lcd_copy>:

void lcd_copy(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	22a0      	movs	r2, #160	; 0xa0
 8001444:	2100      	movs	r1, #0
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ffa9 	bl	800139e <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 800144c:	202c      	movs	r0, #44	; 0x2c
 800144e:	f7ff fef3 	bl	8001238 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <lcd_copy+0x50>)
 800145a:	f002 fd45 	bl	8003ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001464:	4809      	ldr	r0, [pc, #36]	; (800148c <lcd_copy+0x50>)
 8001466:	f002 fd3f 	bl	8003ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001472:	4907      	ldr	r1, [pc, #28]	; (8001490 <lcd_copy+0x54>)
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <lcd_copy+0x58>)
 8001476:	f004 f8fe 	bl	8005676 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <lcd_copy+0x50>)
 8001482:	f002 fd31 	bl	8003ee8 <HAL_GPIO_WritePin>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	48000400 	.word	0x48000400
 8001490:	20001a38 	.word	0x20001a38
 8001494:	2000baf8 	.word	0x2000baf8

08001498 <flush_bufor>:

void flush_bufor(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
	for (int y = 0; y < LCD_HEIGHT; y++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e018      	b.n	80014d6 <flush_bufor+0x3e>
		    for (int x = 0; x < LCD_WIDTH; x++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	e00f      	b.n	80014ca <flush_bufor+0x32>
 80014aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ae:	607b      	str	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	ba5b      	rev16	r3, r3
 80014b4:	603b      	str	r3, [r7, #0]
  return result;
 80014b6:	683b      	ldr	r3, [r7, #0]
		      lcd_put_pixel(x, y, __REV16(0xFFFF));
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	68f9      	ldr	r1, [r7, #12]
 80014be:	68b8      	ldr	r0, [r7, #8]
 80014c0:	f7ff ffa0 	bl	8001404 <lcd_put_pixel>
		    for (int x = 0; x < LCD_WIDTH; x++) {
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b9f      	cmp	r3, #159	; 0x9f
 80014ce:	ddec      	ble.n	80014aa <flush_bufor+0x12>
	for (int y = 0; y < LCD_HEIGHT; y++) {
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b7f      	cmp	r3, #127	; 0x7f
 80014da:	dde3      	ble.n	80014a4 <flush_bufor+0xc>
		    }
		  }

}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b0a      	cmp	r3, #10
 80014f4:	d102      	bne.n	80014fc <__io_putchar+0x14>
    __io_putchar('\r');
 80014f6:	200d      	movs	r0, #13
 80014f8:	f7ff fff6 	bl	80014e8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014fc:	1d39      	adds	r1, r7, #4
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	2201      	movs	r2, #1
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <__io_putchar+0x2c>)
 8001506:	f004 fbd3 	bl	8005cb0 <HAL_UART_Transmit>

  return 1;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000bb5c 	.word	0x2000bb5c

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151e:	f000 fda6 	bl	800206e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001522:	f000 f8bf 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001526:	f7ff fe3b 	bl	80011a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800152a:	f7ff fe21 	bl	8001170 <MX_DMA_Init>
  MX_ADC1_Init();
 800152e:	f7ff fcff 	bl	8000f30 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001532:	f000 fce7 	bl	8001f04 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001536:	f000 faff 	bl	8001b38 <MX_SPI2_Init>

  volatile static uint16_t value[2];



  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800153a:	217f      	movs	r1, #127	; 0x7f
 800153c:	4850      	ldr	r0, [pc, #320]	; (8001680 <main+0x168>)
 800153e:	f001 ffeb 	bl	8003518 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);
 8001542:	2202      	movs	r2, #2
 8001544:	494f      	ldr	r1, [pc, #316]	; (8001684 <main+0x16c>)
 8001546:	484e      	ldr	r0, [pc, #312]	; (8001680 <main+0x168>)
 8001548:	f001 f97c 	bl	8002844 <HAL_ADC_Start_DMA>



  enum UserInput user_input = RIGHT;
 800154c:	2303      	movs	r3, #3
 800154e:	71bb      	strb	r3, [r7, #6]
  enum UserInput prev_user_input = RIGHT;
 8001550:	2303      	movs	r3, #3
 8001552:	71fb      	strb	r3, [r7, #7]





  srand(time(NULL));
 8001554:	2000      	movs	r0, #0
 8001556:	f005 f8d1 	bl	80066fc <time>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f005 f85d 	bl	8006620 <srand>
  lcd_init();
 8001566:	f7ff fecd 	bl	8001304 <lcd_init>

  while (1)
  {

	  get_user_input(&value, &user_input);
 800156a:	1dbb      	adds	r3, r7, #6
 800156c:	4619      	mov	r1, r3
 800156e:	4845      	ldr	r0, [pc, #276]	; (8001684 <main+0x16c>)
 8001570:	f000 f91c 	bl	80017ac <get_user_input>
	  flush_bufor();
 8001574:	f7ff ff90 	bl	8001498 <flush_bufor>
	  insert_snake();
 8001578:	f000 f9e8 	bl	800194c <insert_snake>
	  insert_apple();
 800157c:	f000 fa2a 	bl	80019d4 <insert_apple>





	 if(user_input==RIGHT && prev_user_input!=LEFT) {dx=5;  dy=0;  prev_user_input=user_input;}
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	2b03      	cmp	r3, #3
 8001584:	d10a      	bne.n	800159c <main+0x84>
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d007      	beq.n	800159c <main+0x84>
 800158c:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <main+0x170>)
 800158e:	2205      	movs	r2, #5
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <main+0x174>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	71fb      	strb	r3, [r7, #7]
	 if(user_input==UP && prev_user_input!=DOWN)    {dx=0;  dy=-5; prev_user_input=user_input;}
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10b      	bne.n	80015ba <main+0xa2>
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d008      	beq.n	80015ba <main+0xa2>
 80015a8:	4b37      	ldr	r3, [pc, #220]	; (8001688 <main+0x170>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <main+0x174>)
 80015b0:	f06f 0204 	mvn.w	r2, #4
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	71fb      	strb	r3, [r7, #7]
	 if(user_input==LEFT && prev_user_input!=RIGHT) {dx=-5; dy=0;  prev_user_input=user_input;}
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d10b      	bne.n	80015d8 <main+0xc0>
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d008      	beq.n	80015d8 <main+0xc0>
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <main+0x170>)
 80015c8:	f06f 0204 	mvn.w	r2, #4
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	4b2f      	ldr	r3, [pc, #188]	; (800168c <main+0x174>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	71fb      	strb	r3, [r7, #7]
	 if(user_input==DOWN && prev_user_input!=UP)    {dx=0;  dy=5;  prev_user_input=user_input;}
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d10a      	bne.n	80015f4 <main+0xdc>
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <main+0xdc>
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <main+0x170>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <main+0x174>)
 80015ec:	2205      	movs	r2, #5
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	71fb      	strb	r3, [r7, #7]


	snake[0].x += dx;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <main+0x178>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <main+0x170>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a24      	ldr	r2, [pc, #144]	; (8001690 <main+0x178>)
 8001600:	6013      	str	r3, [r2, #0]
	check_for_colison_x();
 8001602:	f000 fa19 	bl	8001a38 <check_for_colison_x>

	 snake[0].y += dy;
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <main+0x178>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <main+0x174>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <main+0x178>)
 8001612:	6053      	str	r3, [r2, #4]
	 check_for_colison_y();
 8001614:	f000 fa28 	bl	8001a68 <check_for_colison_y>




	 if( GetDist(&snake[0],&apple) <=5 )
 8001618:	491e      	ldr	r1, [pc, #120]	; (8001694 <main+0x17c>)
 800161a:	481d      	ldr	r0, [pc, #116]	; (8001690 <main+0x178>)
 800161c:	f000 f899 	bl	8001752 <GetDist>
 8001620:	4603      	mov	r3, r0
 8001622:	2b05      	cmp	r3, #5
 8001624:	dc24      	bgt.n	8001670 <main+0x158>
	 	 {
		 snake_len++;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <main+0x180>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <main+0x180>)
 800162e:	6013      	str	r3, [r2, #0]

		 apple.x= rand()%(LCD_WIDTH-10)+5;
 8001630:	f005 f824 	bl	800667c <rand>
 8001634:	4602      	mov	r2, r0
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <main+0x184>)
 8001638:	fb83 1302 	smull	r1, r3, r3, r2
 800163c:	1119      	asrs	r1, r3, #4
 800163e:	17d3      	asrs	r3, r2, #31
 8001640:	1acb      	subs	r3, r1, r3
 8001642:	2196      	movs	r1, #150	; 0x96
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	3305      	adds	r3, #5
 800164c:	4a11      	ldr	r2, [pc, #68]	; (8001694 <main+0x17c>)
 800164e:	6013      	str	r3, [r2, #0]
		 apple.y= rand()%(LCD_HEIGHT-10)+5;
 8001650:	f005 f814 	bl	800667c <rand>
 8001654:	4602      	mov	r2, r0
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <main+0x188>)
 8001658:	fb83 1302 	smull	r1, r3, r3, r2
 800165c:	1119      	asrs	r1, r3, #4
 800165e:	17d3      	asrs	r3, r2, #31
 8001660:	1acb      	subs	r3, r1, r3
 8001662:	2176      	movs	r1, #118	; 0x76
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	3305      	adds	r3, #5
 800166c:	4a09      	ldr	r2, [pc, #36]	; (8001694 <main+0x17c>)
 800166e:	6053      	str	r3, [r2, #4]
	 	 }

	 check_for_end();
 8001670:	f000 fa12 	bl	8001a98 <check_for_end>
	 snake_follow();
 8001674:	f000 fa36 	bl	8001ae4 <snake_follow>
	 lcd_copy();
 8001678:	f7ff fee0 	bl	800143c <lcd_copy>
	  get_user_input(&value, &user_input);
 800167c:	e775      	b.n	800156a <main+0x52>
 800167e:	bf00      	nop
 8001680:	2000ba4c 	.word	0x2000ba4c
 8001684:	2000ba38 	.word	0x2000ba38
 8001688:	20000000 	.word	0x20000000
 800168c:	2000ba3c 	.word	0x2000ba3c
 8001690:	20000008 	.word	0x20000008
 8001694:	200019a0 	.word	0x200019a0
 8001698:	20000004 	.word	0x20000004
 800169c:	1b4e81b5 	.word	0x1b4e81b5
 80016a0:	22b63cbf 	.word	0x22b63cbf

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b096      	sub	sp, #88	; 0x58
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2244      	movs	r2, #68	; 0x44
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f004 ffac 	bl	8006610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016ca:	f002 fc33 	bl	8003f34 <HAL_PWREx_ControlVoltageScaling>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016d4:	f000 f838 	bl	8001748 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016d8:	2310      	movs	r3, #16
 80016da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016dc:	2301      	movs	r3, #1
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016e4:	2360      	movs	r3, #96	; 0x60
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	2302      	movs	r3, #2
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016ec:	2301      	movs	r3, #1
 80016ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016f4:	2328      	movs	r3, #40	; 0x28
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016f8:	2307      	movs	r3, #7
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001700:	2302      	movs	r3, #2
 8001702:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fc69 	bl	8003fe0 <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001714:	f000 f818 	bl	8001748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001718:	230f      	movs	r3, #15
 800171a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171c:	2303      	movs	r3, #3
 800171e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800172c:	463b      	mov	r3, r7
 800172e:	2104      	movs	r1, #4
 8001730:	4618      	mov	r0, r3
 8001732:	f003 f83b 	bl	80047ac <HAL_RCC_ClockConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800173c:	f000 f804 	bl	8001748 <Error_Handler>
  }
}
 8001740:	bf00      	nop
 8001742:	3758      	adds	r7, #88	; 0x58
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	e7fe      	b.n	8001750 <Error_Handler+0x8>

08001752 <GetDist>:




 int GetDist(position *pos1, position *pos2)
 {
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
	 int disx=pos1->x-pos2->x;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	60fb      	str	r3, [r7, #12]
	 int disy=pos1->y-pos2->y;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	60bb      	str	r3, [r7, #8]
	 return sqrt(disx*disx+disy*disy);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	fb03 f203 	mul.w	r2, r3, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	fb03 f303 	mul.w	r3, r3, r3
 8001780:	4413      	add	r3, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fec6 	bl	8000514 <__aeabi_i2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	ec43 2b10 	vmov	d0, r2, r3
 8001790:	f005 ffa4 	bl	80076dc <sqrt>
 8001794:	ec53 2b10 	vmov	r2, r3, d0
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff f9d4 	bl	8000b48 <__aeabi_d2iz>
 80017a0:	4603      	mov	r3, r0

 }
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <get_user_input>:

 void get_user_input(uint16_t value[2],enum UserInput *user_input){
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]

 	 float x_maped = (value[1] / 2048.0f)-1.0f ;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3302      	adds	r3, #2
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c4:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001938 <get_user_input+0x18c>
 80017c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017d4:	edc7 7a05 	vstr	s15, [r7, #20]
 	 float y_maped = ((value[0]/2048.0f)-1.0f);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e4:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001938 <get_user_input+0x18c>
 80017e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017f4:	edc7 7a04 	vstr	s15, [r7, #16]

 	  float radius = sqrt(x_maped*x_maped+y_maped*y_maped);
 80017f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80017fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001800:	edd7 7a04 	vldr	s15, [r7, #16]
 8001804:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180c:	ee17 0a90 	vmov	r0, s15
 8001810:	f7fe fe92 	bl	8000538 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	ec43 2b10 	vmov	d0, r2, r3
 800181c:	f005 ff5e 	bl	80076dc <sqrt>
 8001820:	ec53 2b10 	vmov	r2, r3, d0
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f9b6 	bl	8000b98 <__aeabi_d2f>
 800182c:	4603      	mov	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
 	  float theta = atan2(y_maped,x_maped);
 8001830:	6938      	ldr	r0, [r7, #16]
 8001832:	f7fe fe81 	bl	8000538 <__aeabi_f2d>
 8001836:	4604      	mov	r4, r0
 8001838:	460d      	mov	r5, r1
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7fe fe7c 	bl	8000538 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	ec43 2b11 	vmov	d1, r2, r3
 8001848:	ec45 4b10 	vmov	d0, r4, r5
 800184c:	f005 ff44 	bl	80076d8 <atan2>
 8001850:	ec53 2b10 	vmov	r2, r3, d0
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f99e 	bl	8000b98 <__aeabi_d2f>
 800185c:	4603      	mov	r3, r0
 800185e:	60bb      	str	r3, [r7, #8]

 	  if(radius<= 0.8f)
 8001860:	edd7 7a03 	vldr	s15, [r7, #12]
 8001864:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800193c <get_user_input+0x190>
 8001868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	d803      	bhi.n	800187a <get_user_input+0xce>
 	  	{
 	  		*user_input=CENTER;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2204      	movs	r2, #4
 8001876:	701a      	strb	r2, [r3, #0]
 	  		else if(theta > 2.3f || theta < -2.3f) *user_input=LEFT;
 	  		else if(theta >= -2.3f && theta < -0.8f) *user_input=DOWN;

 	  	}

   }
 8001878:	e059      	b.n	800192e <get_user_input+0x182>
 	  		if(theta >= -0.8f && theta <= 0.8f) *user_input=RIGHT;
 800187a:	edd7 7a02 	vldr	s15, [r7, #8]
 800187e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001940 <get_user_input+0x194>
 8001882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	db0c      	blt.n	80018a6 <get_user_input+0xfa>
 800188c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001890:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800193c <get_user_input+0x190>
 8001894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d803      	bhi.n	80018a6 <get_user_input+0xfa>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2203      	movs	r2, #3
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	e043      	b.n	800192e <get_user_input+0x182>
 	  		else if(theta > 0.8f && theta <= 2.3f) *user_input=UP;
 80018a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018aa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800193c <get_user_input+0x190>
 80018ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	dd0c      	ble.n	80018d2 <get_user_input+0x126>
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001944 <get_user_input+0x198>
 80018c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	d803      	bhi.n	80018d2 <get_user_input+0x126>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e02d      	b.n	800192e <get_user_input+0x182>
 	  		else if(theta > 2.3f || theta < -2.3f) *user_input=LEFT;
 80018d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001944 <get_user_input+0x198>
 80018da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	dc08      	bgt.n	80018f6 <get_user_input+0x14a>
 80018e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001948 <get_user_input+0x19c>
 80018ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f4:	d503      	bpl.n	80018fe <get_user_input+0x152>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2202      	movs	r2, #2
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e017      	b.n	800192e <get_user_input+0x182>
 	  		else if(theta >= -2.3f && theta < -0.8f) *user_input=DOWN;
 80018fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001902:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001948 <get_user_input+0x19c>
 8001906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	da00      	bge.n	8001912 <get_user_input+0x166>
   }
 8001910:	e00d      	b.n	800192e <get_user_input+0x182>
 	  		else if(theta >= -2.3f && theta < -0.8f) *user_input=DOWN;
 8001912:	edd7 7a02 	vldr	s15, [r7, #8]
 8001916:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001940 <get_user_input+0x194>
 800191a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	d400      	bmi.n	8001926 <get_user_input+0x17a>
   }
 8001924:	e003      	b.n	800192e <get_user_input+0x182>
 	  		else if(theta >= -2.3f && theta < -0.8f) *user_input=DOWN;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
   }
 800192c:	e7ff      	b.n	800192e <get_user_input+0x182>
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bdb0      	pop	{r4, r5, r7, pc}
 8001936:	bf00      	nop
 8001938:	45000000 	.word	0x45000000
 800193c:	3f4ccccd 	.word	0x3f4ccccd
 8001940:	bf4ccccd 	.word	0xbf4ccccd
 8001944:	40133333 	.word	0x40133333
 8001948:	c0133333 	.word	0xc0133333

0800194c <insert_snake>:

 void insert_snake(void)
 {
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
	 for(int body_frag=0; body_frag < snake_len; body_frag++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e02e      	b.n	80019b6 <insert_snake+0x6a>
	 	{
	 		for(int x_offset=-2; x_offset<3; x_offset++)
 8001958:	f06f 0301 	mvn.w	r3, #1
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	e024      	b.n	80019aa <insert_snake+0x5e>
	 		{
	 			for(int y_offset=-2;y_offset<3;y_offset++)
 8001960:	f06f 0301 	mvn.w	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e01a      	b.n	800199e <insert_snake+0x52>
	 			{
	 				lcd_put_pixel(snake[body_frag].x+x_offset, snake[body_frag].y+y_offset, __REV16(0x1f00));
 8001968:	4a18      	ldr	r2, [pc, #96]	; (80019cc <insert_snake+0x80>)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	18d0      	adds	r0, r2, r3
 8001974:	4a15      	ldr	r2, [pc, #84]	; (80019cc <insert_snake+0x80>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	18d1      	adds	r1, r2, r3
 8001982:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001986:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	ba5b      	rev16	r3, r3
 800198c:	607b      	str	r3, [r7, #4]
  return result;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	b29b      	uxth	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	f7ff fd36 	bl	8001404 <lcd_put_pixel>
	 			for(int y_offset=-2;y_offset<3;y_offset++)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3301      	adds	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	dde1      	ble.n	8001968 <insert_snake+0x1c>
	 		for(int x_offset=-2; x_offset<3; x_offset++)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	3301      	adds	r3, #1
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	ddd7      	ble.n	8001960 <insert_snake+0x14>
	 for(int body_frag=0; body_frag < snake_len; body_frag++)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3301      	adds	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <insert_snake+0x84>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbcb      	blt.n	8001958 <insert_snake+0xc>
	 			}
	 		}
	 	}
 }
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000004 	.word	0x20000004

080019d4 <insert_apple>:

 void insert_apple(void){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
	 for(int x_offset=-2;x_offset<3;x_offset++)
 80019da:	f06f 0301 	mvn.w	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e01f      	b.n	8001a22 <insert_apple+0x4e>
	 {
		 for(int y_offset=-2;y_offset<3;y_offset++)
 80019e2:	f06f 0301 	mvn.w	r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	e015      	b.n	8001a16 <insert_apple+0x42>
		 {
			 lcd_put_pixel(apple.x+x_offset,apple.y+y_offset, __REV16(0xe007));
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <insert_apple+0x60>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	18d0      	adds	r0, r2, r3
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <insert_apple+0x60>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	18d1      	adds	r1, r2, r3
 80019fa:	f24e 0307 	movw	r3, #57351	; 0xe007
 80019fe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	ba5b      	rev16	r3, r3
 8001a04:	603b      	str	r3, [r7, #0]
  return result;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f7ff fcfa 	bl	8001404 <lcd_put_pixel>
		 for(int y_offset=-2;y_offset<3;y_offset++)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	3301      	adds	r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	dde6      	ble.n	80019ea <insert_apple+0x16>
	 for(int x_offset=-2;x_offset<3;x_offset++)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	dddc      	ble.n	80019e2 <insert_apple+0xe>
		 }
	 }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200019a0 	.word	0x200019a0

08001a38 <check_for_colison_x>:

 void check_for_colison_x(void)
 {
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	 if( snake[0].x >= LCD_WIDTH-3)  snake[0].x=3;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <check_for_colison_x+0x2c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b9c      	cmp	r3, #156	; 0x9c
 8001a42:	dd02      	ble.n	8001a4a <check_for_colison_x+0x12>
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <check_for_colison_x+0x2c>)
 8001a46:	2203      	movs	r2, #3
 8001a48:	601a      	str	r2, [r3, #0]
	 if( snake[0].x <= 2)            snake[0].x=LCD_WIDTH-2;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <check_for_colison_x+0x2c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	dc02      	bgt.n	8001a58 <check_for_colison_x+0x20>
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <check_for_colison_x+0x2c>)
 8001a54:	229e      	movs	r2, #158	; 0x9e
 8001a56:	601a      	str	r2, [r3, #0]

 }
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <check_for_colison_y>:

 void check_for_colison_y(void)
 {
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
	 if( snake[0].y >= LCD_HEIGHT-3)  snake[0].y=3;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <check_for_colison_y+0x2c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b7c      	cmp	r3, #124	; 0x7c
 8001a72:	dd02      	ble.n	8001a7a <check_for_colison_y+0x12>
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <check_for_colison_y+0x2c>)
 8001a76:	2203      	movs	r2, #3
 8001a78:	605a      	str	r2, [r3, #4]
	 if( snake[0].y <= 2)  			  snake[0].y=LCD_HEIGHT-2;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <check_for_colison_y+0x2c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	dc02      	bgt.n	8001a88 <check_for_colison_y+0x20>
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <check_for_colison_y+0x2c>)
 8001a84:	227e      	movs	r2, #126	; 0x7e
 8001a86:	605a      	str	r2, [r3, #4]
 }
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008

08001a98 <check_for_end>:

 void check_for_end(void)
 {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
	for(int body_frag=1; body_frag<snake_len; body_frag++)
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	e010      	b.n	8001ac6 <check_for_end+0x2e>
	{
		if( GetDist(&snake[0] , &snake[body_frag]) < 5 )  snake_len=1;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <check_for_end+0x44>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	480b      	ldr	r0, [pc, #44]	; (8001adc <check_for_end+0x44>)
 8001ab0:	f7ff fe4f 	bl	8001752 <GetDist>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	dc02      	bgt.n	8001ac0 <check_for_end+0x28>
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <check_for_end+0x48>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
	for(int body_frag=1; body_frag<snake_len; body_frag++)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <check_for_end+0x48>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbe9      	blt.n	8001aa4 <check_for_end+0xc>
	 }
 }
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <snake_follow>:

 void snake_follow(void)
 {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
	for(int body_frag=(sizeof(snake)/sizeof(position))-1; body_frag>0; body_frag--)
 8001aea:	f240 3332 	movw	r3, #818	; 0x332
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	e016      	b.n	8001b20 <snake_follow+0x3c>
	 {
		snake[body_frag].x=snake[body_frag-1].x;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <snake_follow+0x50>)
 8001af8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001afc:	490d      	ldr	r1, [pc, #52]	; (8001b34 <snake_follow+0x50>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		snake[body_frag].y=snake[body_frag-1].y;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <snake_follow+0x50>)
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	4908      	ldr	r1, [pc, #32]	; (8001b34 <snake_follow+0x50>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	605a      	str	r2, [r3, #4]
	for(int body_frag=(sizeof(snake)/sizeof(position))-1; body_frag>0; body_frag--)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	dce5      	bgt.n	8001af2 <snake_follow+0xe>
	 }

 }
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	20000008 	.word	0x20000008

08001b38 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <MX_SPI2_Init+0x78>)
 8001b40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b50:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b70:	2210      	movs	r2, #16
 8001b72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b94:	2208      	movs	r2, #8
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_SPI2_Init+0x74>)
 8001b9a:	f003 fcc9 	bl	8005530 <HAL_SPI_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001ba4:	f7ff fdd0 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000baf8 	.word	0x2000baf8
 8001bb0:	40003800 	.word	0x40003800

08001bb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <HAL_SPI_MspInit+0xb4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d144      	bne.n	8001c60 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_SPI_MspInit+0xb8>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c1e:	2308      	movs	r3, #8
 8001c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c2e:	2305      	movs	r3, #5
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <HAL_SPI_MspInit+0xbc>)
 8001c3a:	f001 ffab 	bl	8003b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c50:	2305      	movs	r3, #5
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <HAL_SPI_MspInit+0xc0>)
 8001c5c:	f001 ff9a 	bl	8003b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c60:	bf00      	nop
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40003800 	.word	0x40003800
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	48000800 	.word	0x48000800
 8001c74:	48000400 	.word	0x48000400

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_MspInit+0x44>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <HAL_MspInit+0x44>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_MspInit+0x44>)
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_MspInit+0x44>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_MspInit+0x44>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_MspInit+0x44>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler+0x4>

08001cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0c:	f000 fa04 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
	return 1;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_kill>:

int _kill(int pid, int sig)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d2e:	f004 fc45 	bl	80065bc <__errno>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2216      	movs	r2, #22
 8001d36:	601a      	str	r2, [r3, #0]
	return -1;
 8001d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_exit>:

void _exit (int status)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ffe7 	bl	8001d24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d56:	e7fe      	b.n	8001d56 <_exit+0x12>

08001d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e00a      	b.n	8001d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d6a:	f3af 8000 	nop.w
 8001d6e:	4601      	mov	r1, r0
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	60ba      	str	r2, [r7, #8]
 8001d76:	b2ca      	uxtb	r2, r1
 8001d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dbf0      	blt.n	8001d6a <_read+0x12>
	}

return len;
 8001d88:	687b      	ldr	r3, [r7, #4]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e009      	b.n	8001db8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	60ba      	str	r2, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fb9b 	bl	80014e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dbf1      	blt.n	8001da4 <_write+0x12>
	}
	return len;
 8001dc0:	687b      	ldr	r3, [r7, #4]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_close>:

int _close(int file)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df2:	605a      	str	r2, [r3, #4]
	return 0;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <_isatty>:

int _isatty(int file)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
	return 1;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
	return 0;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <_sbrk+0x5c>)
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <_sbrk+0x60>)
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <_sbrk+0x64>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <_sbrk+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d207      	bcs.n	8001e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e64:	f004 fbaa 	bl	80065bc <__errno>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e009      	b.n	8001e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <_sbrk+0x64>)
 8001e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e86:	68fb      	ldr	r3, [r7, #12]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20018000 	.word	0x20018000
 8001e94:	00000400 	.word	0x00000400
 8001e98:	2000ba40 	.word	0x2000ba40
 8001e9c:	2000bbf8 	.word	0x2000bbf8

08001ea0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <SystemInit+0x5c>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	4a14      	ldr	r2, [pc, #80]	; (8001efc <SystemInit+0x5c>)
 8001eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <SystemInit+0x60>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <SystemInit+0x60>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <SystemInit+0x60>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <SystemInit+0x60>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <SystemInit+0x60>)
 8001ecc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ed0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <SystemInit+0x60>)
 8001ed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001edc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <SystemInit+0x60>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <SystemInit+0x60>)
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SystemInit+0x60>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	40021000 	.word	0x40021000

08001f04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f0a:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <MX_USART2_UART_Init+0x5c>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_USART2_UART_Init+0x58>)
 8001f48:	f003 fe64 	bl	8005c14 <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f52:	f7ff fbf9 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000bb5c 	.word	0x2000bb5c
 8001f60:	40004400 	.word	0x40004400

08001f64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0ac      	sub	sp, #176	; 0xb0
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2288      	movs	r2, #136	; 0x88
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 fb43 	bl	8006610 <memset>
  if(uartHandle->Instance==USART2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a21      	ldr	r2, [pc, #132]	; (8002014 <HAL_UART_MspInit+0xb0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d13b      	bne.n	800200c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fe09 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fac:	f7ff fbcc 	bl	8001748 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_UART_MspInit+0xb4>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	4a18      	ldr	r2, [pc, #96]	; (8002018 <HAL_UART_MspInit+0xb4>)
 8001fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fba:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_UART_MspInit+0xb4>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_UART_MspInit+0xb4>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	4a12      	ldr	r2, [pc, #72]	; (8002018 <HAL_UART_MspInit+0xb4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_UART_MspInit+0xb4>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ff8:	2307      	movs	r3, #7
 8001ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002002:	4619      	mov	r1, r3
 8002004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002008:	f001 fdc4 	bl	8003b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800200c:	bf00      	nop
 800200e:	37b0      	adds	r7, #176	; 0xb0
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40004400 	.word	0x40004400
 8002018:	40021000 	.word	0x40021000

0800201c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002054 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002020:	f7ff ff3e 	bl	8001ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002024:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002026:	e003      	b.n	8002030 <LoopCopyDataInit>

08002028 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800202a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800202c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800202e:	3104      	adds	r1, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002030:	480a      	ldr	r0, [pc, #40]	; (800205c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002034:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002036:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002038:	d3f6      	bcc.n	8002028 <CopyDataInit>
	ldr	r2, =_sbss
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <LoopForever+0x12>)
	b	LoopFillZerobss
 800203c:	e002      	b.n	8002044 <LoopFillZerobss>

0800203e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800203e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002040:	f842 3b04 	str.w	r3, [r2], #4

08002044 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <LoopForever+0x16>)
	cmp	r2, r3
 8002046:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002048:	d3f9      	bcc.n	800203e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204a:	f004 fabd 	bl	80065c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800204e:	f7ff fa63 	bl	8001518 <main>

08002052 <LoopForever>:

LoopForever:
    b LoopForever
 8002052:	e7fe      	b.n	8002052 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002054:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002058:	08008078 	.word	0x08008078
	ldr	r0, =_sdata
 800205c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002060:	20001a1c 	.word	0x20001a1c
	ldr	r2, =_sbss
 8002064:	20001a1c 	.word	0x20001a1c
	ldr	r3, = _ebss
 8002068:	2000bbf4 	.word	0x2000bbf4

0800206c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC1_2_IRQHandler>

0800206e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002078:	2003      	movs	r0, #3
 800207a:	f001 fc0f 	bl	800389c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800207e:	200f      	movs	r0, #15
 8002080:	f000 f80e 	bl	80020a0 <HAL_InitTick>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	71fb      	strb	r3, [r7, #7]
 800208e:	e001      	b.n	8002094 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002090:	f7ff fdf2 	bl	8001c78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002094:	79fb      	ldrb	r3, [r7, #7]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_InitTick+0x6c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d023      	beq.n	80020fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_InitTick+0x70>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_InitTick+0x6c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 fc0d 	bl	80038ea <HAL_SYSTICK_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10f      	bne.n	80020f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d809      	bhi.n	80020f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f001 fbe5 	bl	80038b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_InitTick+0x74>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e007      	b.n	8002100 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e004      	b.n	8002100 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e001      	b.n	8002100 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200019b0 	.word	0x200019b0
 8002110:	200019a8 	.word	0x200019a8
 8002114:	200019ac 	.word	0x200019ac

08002118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_IncTick+0x24>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	200019b0 	.word	0x200019b0
 800213c:	2000bbe0 	.word	0x2000bbe0

08002140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_GetTick+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	2000bbe0 	.word	0x2000bbe0

08002158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff ffee 	bl	8002140 <HAL_GetTick>
 8002164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d005      	beq.n	800217e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_Delay+0x44>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217e:	bf00      	nop
 8002180:	f7ff ffde 	bl	8002140 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8f7      	bhi.n	8002180 <HAL_Delay+0x28>
  {
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200019b0 	.word	0x200019b0

080021a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	609a      	str	r2, [r3, #8]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3360      	adds	r3, #96	; 0x60
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <LL_ADC_SetOffset+0x44>)
 800222a:	4013      	ands	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	4313      	orrs	r3, r2
 8002238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	03fff000 	.word	0x03fff000

08002250 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3360      	adds	r3, #96	; 0x60
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3360      	adds	r3, #96	; 0x60
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3330      	adds	r3, #48	; 0x30
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	4413      	add	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	211f      	movs	r1, #31
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	f003 011f 	and.w	r1, r3, #31
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	431a      	orrs	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3314      	adds	r3, #20
 8002340:	461a      	mov	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	0e5b      	lsrs	r3, r3, #25
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	0d1b      	lsrs	r3, r3, #20
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2107      	movs	r1, #7
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	401a      	ands	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	0d1b      	lsrs	r3, r3, #20
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	43db      	mvns	r3, r3
 80023a2:	401a      	ands	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0318 	and.w	r3, r3, #24
 80023aa:	4908      	ldr	r1, [pc, #32]	; (80023cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80023ac:	40d9      	lsrs	r1, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	400b      	ands	r3, r1
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	431a      	orrs	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	0007ffff 	.word	0x0007ffff

080023d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 031f 	and.w	r3, r3, #31
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6093      	str	r3, [r2, #8]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002424:	d101      	bne.n	800242a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800244c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002474:	d101      	bne.n	800247a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c4:	f043 0202 	orr.w	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <LL_ADC_IsEnabled+0x18>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <LL_ADC_IsEnabled+0x1a>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b02      	cmp	r3, #2
 8002510:	d101      	bne.n	8002516 <LL_ADC_IsDisableOngoing+0x18>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_ADC_IsDisableOngoing+0x1a>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002538:	f043 0204 	orr.w	r2, r3, #4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b04      	cmp	r3, #4
 800255e:	d101      	bne.n	8002564 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b08      	cmp	r3, #8
 8002584:	d101      	bne.n	800258a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e136      	b.n	8002820 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fe fd3d 	bl	8001040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff19 	bl	8002410 <LL_ADC_IsDeepPowerDownEnabled>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff feff 	bl	80023ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff34 	bl	8002460 <LL_ADC_IsInternalRegulatorEnabled>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d115      	bne.n	800262a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff18 	bl	8002438 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002608:	4b87      	ldr	r3, [pc, #540]	; (8002828 <HAL_ADC_Init+0x290>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	4a87      	ldr	r2, [pc, #540]	; (800282c <HAL_ADC_Init+0x294>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	3301      	adds	r3, #1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800261c:	e002      	b.n	8002624 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3b01      	subs	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff16 	bl	8002460 <LL_ADC_IsInternalRegulatorEnabled>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10d      	bne.n	8002656 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f043 0210 	orr.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f043 0201 	orr.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff76 	bl	800254c <LL_ADC_REG_IsConversionOngoing>
 8002660:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 80cf 	bne.w	800280e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 80cb 	bne.w	800280e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002680:	f043 0202 	orr.w	r2, r3, #2
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff23 	bl	80024d8 <LL_ADC_IsEnabled>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d115      	bne.n	80026c4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002698:	4865      	ldr	r0, [pc, #404]	; (8002830 <HAL_ADC_Init+0x298>)
 800269a:	f7ff ff1d 	bl	80024d8 <LL_ADC_IsEnabled>
 800269e:	4604      	mov	r4, r0
 80026a0:	4864      	ldr	r0, [pc, #400]	; (8002834 <HAL_ADC_Init+0x29c>)
 80026a2:	f7ff ff19 	bl	80024d8 <LL_ADC_IsEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	431c      	orrs	r4, r3
 80026aa:	4863      	ldr	r0, [pc, #396]	; (8002838 <HAL_ADC_Init+0x2a0>)
 80026ac:	f7ff ff14 	bl	80024d8 <LL_ADC_IsEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4323      	orrs	r3, r4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	485f      	ldr	r0, [pc, #380]	; (800283c <HAL_ADC_Init+0x2a4>)
 80026c0:	f7ff fd6e 	bl	80021a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7e5b      	ldrb	r3, [r3, #25]
 80026c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d106      	bne.n	8002700 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	3b01      	subs	r3, #1
 80026f8:	045b      	lsls	r3, r3, #17
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_ADC_Init+0x2a8>)
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	69b9      	ldr	r1, [r7, #24]
 800272c:	430b      	orrs	r3, r1
 800272e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff09 	bl	800254c <LL_ADC_REG_IsConversionOngoing>
 800273a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff16 	bl	8002572 <LL_ADC_INJ_IsConversionOngoing>
 8002746:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d13d      	bne.n	80027ca <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d13a      	bne.n	80027ca <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002758:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002760:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	69b9      	ldr	r1, [r7, #24]
 800277a:	430b      	orrs	r3, r1
 800277c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002784:	2b01      	cmp	r3, #1
 8002786:	d118      	bne.n	80027ba <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800279e:	4311      	orrs	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027aa:	430a      	orrs	r2, r1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	e007      	b.n	80027ca <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10c      	bne.n	80027ec <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	f023 010f 	bic.w	r1, r3, #15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
 80027ea:	e007      	b.n	80027fc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 020f 	bic.w	r2, r2, #15
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	f023 0303 	bic.w	r3, r3, #3
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
 800280c:	e007      	b.n	800281e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800281e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3724      	adds	r7, #36	; 0x24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	200019a8 	.word	0x200019a8
 800282c:	053e2d63 	.word	0x053e2d63
 8002830:	50040000 	.word	0x50040000
 8002834:	50040100 	.word	0x50040100
 8002838:	50040200 	.word	0x50040200
 800283c:	50040300 	.word	0x50040300
 8002840:	fff0c007 	.word	0xfff0c007

08002844 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002850:	4850      	ldr	r0, [pc, #320]	; (8002994 <HAL_ADC_Start_DMA+0x150>)
 8002852:	f7ff fdbd 	bl	80023d0 <LL_ADC_GetMultimode>
 8002856:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fe75 	bl	800254c <LL_ADC_REG_IsConversionOngoing>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f040 808e 	bne.w	8002986 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_ADC_Start_DMA+0x34>
 8002874:	2302      	movs	r3, #2
 8002876:	e089      	b.n	800298c <HAL_ADC_Start_DMA+0x148>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b05      	cmp	r3, #5
 800288a:	d002      	beq.n	8002892 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b09      	cmp	r3, #9
 8002890:	d172      	bne.n	8002978 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fc98 	bl	80031c8 <ADC_Enable>
 8002898:	4603      	mov	r3, r0
 800289a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d165      	bne.n	800296e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a37      	ldr	r2, [pc, #220]	; (8002998 <HAL_ADC_Start_DMA+0x154>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d002      	beq.n	80028c6 <HAL_ADC_Start_DMA+0x82>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	e000      	b.n	80028c8 <HAL_ADC_Start_DMA+0x84>
 80028c6:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_ADC_Start_DMA+0x158>)
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d002      	beq.n	80028d6 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d105      	bne.n	80028e2 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	f023 0206 	bic.w	r2, r3, #6
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	659a      	str	r2, [r3, #88]	; 0x58
 80028fa:	e002      	b.n	8002902 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	4a26      	ldr	r2, [pc, #152]	; (80029a0 <HAL_ADC_Start_DMA+0x15c>)
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <HAL_ADC_Start_DMA+0x160>)
 8002910:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	4a24      	ldr	r2, [pc, #144]	; (80029a8 <HAL_ADC_Start_DMA+0x164>)
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	221c      	movs	r2, #28
 8002920:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0210 	orr.w	r2, r2, #16
 8002938:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3340      	adds	r3, #64	; 0x40
 8002954:	4619      	mov	r1, r3
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f001 f88b 	bl	8003a74 <HAL_DMA_Start_IT>
 800295e:	4603      	mov	r3, r0
 8002960:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fddc 	bl	8002524 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800296c:	e00d      	b.n	800298a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002976:	e008      	b.n	800298a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002984:	e001      	b.n	800298a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800298a:	7dfb      	ldrb	r3, [r7, #23]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	50040300 	.word	0x50040300
 8002998:	50040100 	.word	0x50040100
 800299c:	50040000 	.word	0x50040000
 80029a0:	0800334b 	.word	0x0800334b
 80029a4:	08003423 	.word	0x08003423
 80029a8:	0800343f 	.word	0x0800343f

080029ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b0b6      	sub	sp, #216	; 0xd8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x22>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e3c7      	b.n	800319a <HAL_ADC_ConfigChannel+0x7b2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fd98 	bl	800254c <LL_ADC_REG_IsConversionOngoing>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 83a8 	bne.w	8003174 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d824      	bhi.n	8002a76 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	3b02      	subs	r3, #2
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d81b      	bhi.n	8002a6e <HAL_ADC_ConfigChannel+0x86>
 8002a36:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <HAL_ADC_ConfigChannel+0x54>)
 8002a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3c:	08002a4d 	.word	0x08002a4d
 8002a40:	08002a55 	.word	0x08002a55
 8002a44:	08002a5d 	.word	0x08002a5d
 8002a48:	08002a65 	.word	0x08002a65
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	220c      	movs	r2, #12
 8002a50:	605a      	str	r2, [r3, #4]
          break;
 8002a52:	e011      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2212      	movs	r2, #18
 8002a58:	605a      	str	r2, [r3, #4]
          break;
 8002a5a:	e00d      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2218      	movs	r2, #24
 8002a60:	605a      	str	r2, [r3, #4]
          break;
 8002a62:	e009      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a6a:	605a      	str	r2, [r3, #4]
          break;
 8002a6c:	e004      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2206      	movs	r2, #6
 8002a72:	605a      	str	r2, [r3, #4]
          break;
 8002a74:	e000      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a76:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f7ff fc27 	bl	80022d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fd5c 	bl	800254c <LL_ADC_REG_IsConversionOngoing>
 8002a94:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fd68 	bl	8002572 <LL_ADC_INJ_IsConversionOngoing>
 8002aa2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aa6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 81a6 	bne.w	8002dfc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ab0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 81a1 	bne.w	8002dfc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f7ff fc32 	bl	8002330 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	08db      	lsrs	r3, r3, #3
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d00a      	beq.n	8002b04 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6919      	ldr	r1, [r3, #16]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002afe:	f7ff fb83 	bl	8002208 <LL_ADC_SetOffset>
 8002b02:	e17b      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fba0 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x148>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fb95 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	f003 021f 	and.w	r2, r3, #31
 8002b2e:	e01e      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x186>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fb8a 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e004      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x19e>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	e018      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x1d0>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e004      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002bae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d106      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fb59 	bl	800227c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fb3d 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x20e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fb32 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002bec:	4603      	mov	r3, r0
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	e01e      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x24c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fb27 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e004      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002c28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x264>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	e018      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x296>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002c70:	2320      	movs	r3, #32
 8002c72:	e004      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d106      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff faf6 	bl	800227c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2102      	movs	r1, #2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fada 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10a      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x2d4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2102      	movs	r1, #2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff facf 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	f003 021f 	and.w	r2, r3, #31
 8002cba:	e01e      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x312>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2102      	movs	r1, #2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fac4 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002cea:	2320      	movs	r3, #32
 8002cec:	e004      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d105      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x32a>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0e9b      	lsrs	r3, r3, #26
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	e016      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x358>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002d32:	2320      	movs	r3, #32
 8002d34:	e004      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d106      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fa95 	bl	800227c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2103      	movs	r1, #3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fa79 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x396>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2103      	movs	r1, #3
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fa6e 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	0e9b      	lsrs	r3, r3, #26
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	e017      	b.n	8002dae <HAL_ADC_ConfigChannel+0x3c6>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2103      	movs	r1, #3
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fa63 	bl	8002250 <LL_ADC_GetOffsetChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d98:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002da0:	2320      	movs	r3, #32
 8002da2:	e003      	b.n	8002dac <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x3de>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	e011      	b.n	8002dea <HAL_ADC_ConfigChannel+0x402>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002dde:	2320      	movs	r3, #32
 8002de0:	e003      	b.n	8002dea <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d106      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	2103      	movs	r1, #3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fa40 	bl	800227c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fb69 	bl	80024d8 <LL_ADC_IsEnabled>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 813f 	bne.w	800308c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f7ff fab4 	bl	8002388 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4a8e      	ldr	r2, [pc, #568]	; (8003060 <HAL_ADC_ConfigChannel+0x678>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	f040 8130 	bne.w	800308c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x46c>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	3301      	adds	r3, #1
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	bf94      	ite	ls
 8002e4c:	2301      	movls	r3, #1
 8002e4e:	2300      	movhi	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e019      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x4a0>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e64:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e003      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2b09      	cmp	r3, #9
 8002e80:	bf94      	ite	ls
 8002e82:	2301      	movls	r3, #1
 8002e84:	2300      	movhi	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d079      	beq.n	8002f80 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d107      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x4c0>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	069b      	lsls	r3, r3, #26
 8002ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea6:	e015      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x4ec>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	e003      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	069b      	lsls	r3, r3, #26
 8002ed0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x50c>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	e017      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x53c>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e003      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	ea42 0103 	orr.w	r1, r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x562>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	051b      	lsls	r3, r3, #20
 8002f48:	e018      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x594>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e003      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f003 021f 	and.w	r2, r3, #31
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	e080      	b.n	8003082 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x5b4>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	3301      	adds	r3, #1
 8002f94:	069b      	lsls	r3, r3, #26
 8002f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f9a:	e015      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x5e0>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	e003      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	069b      	lsls	r3, r3, #26
 8002fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x600>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	e017      	b.n	8003018 <HAL_ADC_ConfigChannel+0x630>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	61fb      	str	r3, [r7, #28]
  return result;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003000:	2320      	movs	r3, #32
 8003002:	e003      	b.n	800300c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3301      	adds	r3, #1
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2101      	movs	r1, #1
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	ea42 0103 	orr.w	r1, r2, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10d      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x65c>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	3301      	adds	r3, #1
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	3b1e      	subs	r3, #30
 800303c:	051b      	lsls	r3, r3, #20
 800303e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003042:	e01d      	b.n	8003080 <HAL_ADC_ConfigChannel+0x698>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	613b      	str	r3, [r7, #16]
  return result;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d103      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e005      	b.n	800306c <HAL_ADC_ConfigChannel+0x684>
 8003060:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f003 021f 	and.w	r2, r3, #31
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	3b1e      	subs	r3, #30
 800307a:	051b      	lsls	r3, r3, #20
 800307c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003080:	430b      	orrs	r3, r1
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	6892      	ldr	r2, [r2, #8]
 8003086:	4619      	mov	r1, r3
 8003088:	f7ff f952 	bl	8002330 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b44      	ldr	r3, [pc, #272]	; (80031a4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d07a      	beq.n	800318e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003098:	4843      	ldr	r0, [pc, #268]	; (80031a8 <HAL_ADC_ConfigChannel+0x7c0>)
 800309a:	f7ff f8a7 	bl	80021ec <LL_ADC_GetCommonPathInternalCh>
 800309e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a41      	ldr	r2, [pc, #260]	; (80031ac <HAL_ADC_ConfigChannel+0x7c4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d12c      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d126      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a3c      	ldr	r2, [pc, #240]	; (80031b0 <HAL_ADC_ConfigChannel+0x7c8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x6e4>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a3b      	ldr	r2, [pc, #236]	; (80031b4 <HAL_ADC_ConfigChannel+0x7cc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d15d      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030d4:	4619      	mov	r1, r3
 80030d6:	4834      	ldr	r0, [pc, #208]	; (80031a8 <HAL_ADC_ConfigChannel+0x7c0>)
 80030d8:	f7ff f875 	bl	80021c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030dc:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_ADC_ConfigChannel+0x7d0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	4a36      	ldr	r2, [pc, #216]	; (80031bc <HAL_ADC_ConfigChannel+0x7d4>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030f6:	e002      	b.n	80030fe <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003104:	e040      	b.n	8003188 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2d      	ldr	r2, [pc, #180]	; (80031c0 <HAL_ADC_ConfigChannel+0x7d8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d118      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x75a>
 8003110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d112      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x748>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <HAL_ADC_ConfigChannel+0x7cc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d12d      	bne.n	800318c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003138:	4619      	mov	r1, r3
 800313a:	481b      	ldr	r0, [pc, #108]	; (80031a8 <HAL_ADC_ConfigChannel+0x7c0>)
 800313c:	f7ff f843 	bl	80021c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003140:	e024      	b.n	800318c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d120      	bne.n	800318e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800314c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11a      	bne.n	800318e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <HAL_ADC_ConfigChannel+0x7c8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d115      	bne.n	800318e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003162:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800316a:	4619      	mov	r1, r3
 800316c:	480e      	ldr	r0, [pc, #56]	; (80031a8 <HAL_ADC_ConfigChannel+0x7c0>)
 800316e:	f7ff f82a 	bl	80021c6 <LL_ADC_SetCommonPathInternalCh>
 8003172:	e00c      	b.n	800318e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003186:	e002      	b.n	800318e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003188:	bf00      	nop
 800318a:	e000      	b.n	800318e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800318c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003196:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800319a:	4618      	mov	r0, r3
 800319c:	37d8      	adds	r7, #216	; 0xd8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	80080000 	.word	0x80080000
 80031a8:	50040300 	.word	0x50040300
 80031ac:	c7520000 	.word	0xc7520000
 80031b0:	50040000 	.word	0x50040000
 80031b4:	50040200 	.word	0x50040200
 80031b8:	200019a8 	.word	0x200019a8
 80031bc:	053e2d63 	.word	0x053e2d63
 80031c0:	cb840000 	.word	0xcb840000
 80031c4:	80000001 	.word	0x80000001

080031c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff f97f 	bl	80024d8 <LL_ADC_IsEnabled>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d14d      	bne.n	800327c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	4b28      	ldr	r3, [pc, #160]	; (8003288 <ADC_Enable+0xc0>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f2:	f043 0210 	orr.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e039      	b.n	800327e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f93a 	bl	8002488 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003214:	f7fe ff94 	bl	8002140 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800321a:	e028      	b.n	800326e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff f959 	bl	80024d8 <LL_ADC_IsEnabled>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff f929 	bl	8002488 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003236:	f7fe ff83 	bl	8002140 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d914      	bls.n	800326e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d00d      	beq.n	800326e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e007      	b.n	800327e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d1cf      	bne.n	800321c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	8000003f 	.word	0x8000003f

0800328c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff f930 	bl	80024fe <LL_ADC_IsDisableOngoing>
 800329e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff f917 	bl	80024d8 <LL_ADC_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d047      	beq.n	8003340 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d144      	bne.n	8003340 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030d 	and.w	r3, r3, #13
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10c      	bne.n	80032de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff f8f1 	bl	80024b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2203      	movs	r2, #3
 80032d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032d6:	f7fe ff33 	bl	8002140 <HAL_GetTick>
 80032da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032dc:	e029      	b.n	8003332 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f043 0210 	orr.w	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e023      	b.n	8003342 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032fa:	f7fe ff21 	bl	8002140 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d914      	bls.n	8003332 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	f043 0210 	orr.w	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e007      	b.n	8003342 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1dc      	bne.n	80032fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003360:	2b00      	cmp	r3, #0
 8003362:	d14b      	bne.n	80033fc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d021      	beq.n	80033c2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe ff95 	bl	80022b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d032      	beq.n	80033f4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12b      	bne.n	80033f4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11f      	bne.n	80033f4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	f043 0201 	orr.w	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	655a      	str	r2, [r3, #84]	; 0x54
 80033c0:	e018      	b.n	80033f4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff fad9 	bl	80029ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033fa:	e00e      	b.n	800341a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff fae3 	bl	80029d4 <HAL_ADC_ErrorCallback>
}
 800340e:	e004      	b.n	800341a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fac5 	bl	80029c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003450:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff fab5 	bl	80029d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <LL_ADC_IsEnabled>:
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <LL_ADC_IsEnabled+0x18>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <LL_ADC_IsEnabled+0x1a>
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_ADC_StartCalibration>:
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80034aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	609a      	str	r2, [r3, #8]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <LL_ADC_IsCalibrationOnGoing>:
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034de:	d101      	bne.n	80034e4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d101      	bne.n	800350a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_ADCEx_Calibration_Start+0x1c>
 8003530:	2302      	movs	r3, #2
 8003532:	e04d      	b.n	80035d0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff fea5 	bl	800328c <ADC_Disable>
 8003542:	4603      	mov	r3, r0
 8003544:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d136      	bne.n	80035ba <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003554:	f023 0302 	bic.w	r3, r3, #2
 8003558:	f043 0202 	orr.w	r2, r3, #2
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6839      	ldr	r1, [r7, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ff96 	bl	8003498 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800356c:	e014      	b.n	8003598 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	3301      	adds	r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800357a:	d30d      	bcc.n	8003598 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f023 0312 	bic.w	r3, r3, #18
 8003584:	f043 0210 	orr.w	r2, r3, #16
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e01b      	b.n	80035d0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff94 	bl	80034ca <LL_ADC_IsCalibrationOnGoing>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e2      	bne.n	800356e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	f023 0303 	bic.w	r3, r3, #3
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
 80035b8:	e005      	b.n	80035c6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b09f      	sub	sp, #124	; 0x7c
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e093      	b.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80035fe:	2300      	movs	r3, #0
 8003600:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003602:	2300      	movs	r3, #0
 8003604:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a47      	ldr	r2, [pc, #284]	; (8003728 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d102      	bne.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003610:	4b46      	ldr	r3, [pc, #280]	; (800372c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	e001      	b.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e072      	b.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff ff59 	bl	80034f2 <LL_ADC_REG_IsConversionOngoing>
 8003640:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff53 	bl	80034f2 <LL_ADC_REG_IsConversionOngoing>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d154      	bne.n	80036fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003654:	2b00      	cmp	r3, #0
 8003656:	d151      	bne.n	80036fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003658:	4b35      	ldr	r3, [pc, #212]	; (8003730 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800365a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d02c      	beq.n	80036be <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003676:	035b      	lsls	r3, r3, #13
 8003678:	430b      	orrs	r3, r1
 800367a:	431a      	orrs	r2, r3
 800367c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003680:	4829      	ldr	r0, [pc, #164]	; (8003728 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003682:	f7ff fef6 	bl	8003472 <LL_ADC_IsEnabled>
 8003686:	4604      	mov	r4, r0
 8003688:	4828      	ldr	r0, [pc, #160]	; (800372c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800368a:	f7ff fef2 	bl	8003472 <LL_ADC_IsEnabled>
 800368e:	4603      	mov	r3, r0
 8003690:	431c      	orrs	r4, r3
 8003692:	4828      	ldr	r0, [pc, #160]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003694:	f7ff feed 	bl	8003472 <LL_ADC_IsEnabled>
 8003698:	4603      	mov	r3, r0
 800369a:	4323      	orrs	r3, r4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d137      	bne.n	8003710 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036a8:	f023 030f 	bic.w	r3, r3, #15
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	6811      	ldr	r1, [r2, #0]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	431a      	orrs	r2, r3
 80036b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036bc:	e028      	b.n	8003710 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036ca:	4817      	ldr	r0, [pc, #92]	; (8003728 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80036cc:	f7ff fed1 	bl	8003472 <LL_ADC_IsEnabled>
 80036d0:	4604      	mov	r4, r0
 80036d2:	4816      	ldr	r0, [pc, #88]	; (800372c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80036d4:	f7ff fecd 	bl	8003472 <LL_ADC_IsEnabled>
 80036d8:	4603      	mov	r3, r0
 80036da:	431c      	orrs	r4, r3
 80036dc:	4815      	ldr	r0, [pc, #84]	; (8003734 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80036de:	f7ff fec8 	bl	8003472 <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4323      	orrs	r3, r4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d112      	bne.n	8003710 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036f2:	f023 030f 	bic.w	r3, r3, #15
 80036f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036fa:	e009      	b.n	8003710 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800370e:	e000      	b.n	8003712 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003710:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800371a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800371e:	4618      	mov	r0, r3
 8003720:	377c      	adds	r7, #124	; 0x7c
 8003722:	46bd      	mov	sp, r7
 8003724:	bd90      	pop	{r4, r7, pc}
 8003726:	bf00      	nop
 8003728:	50040000 	.word	0x50040000
 800372c:	50040100 	.word	0x50040100
 8003730:	50040300 	.word	0x50040300
 8003734:	50040200 	.word	0x50040200

08003738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <__NVIC_SetPriorityGrouping+0x44>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003754:	4013      	ands	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800376a:	4a04      	ldr	r2, [pc, #16]	; (800377c <__NVIC_SetPriorityGrouping+0x44>)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	60d3      	str	r3, [r2, #12]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003784:	4b04      	ldr	r3, [pc, #16]	; (8003798 <__NVIC_GetPriorityGrouping+0x18>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	0a1b      	lsrs	r3, r3, #8
 800378a:	f003 0307 	and.w	r3, r3, #7
}
 800378e:	4618      	mov	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	db0a      	blt.n	80037c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	490c      	ldr	r1, [pc, #48]	; (80037e8 <__NVIC_SetPriority+0x4c>)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	0112      	lsls	r2, r2, #4
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	440b      	add	r3, r1
 80037c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c4:	e00a      	b.n	80037dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4908      	ldr	r1, [pc, #32]	; (80037ec <__NVIC_SetPriority+0x50>)
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	3b04      	subs	r3, #4
 80037d4:	0112      	lsls	r2, r2, #4
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	440b      	add	r3, r1
 80037da:	761a      	strb	r2, [r3, #24]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000e100 	.word	0xe000e100
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f1c3 0307 	rsb	r3, r3, #7
 800380a:	2b04      	cmp	r3, #4
 800380c:	bf28      	it	cs
 800380e:	2304      	movcs	r3, #4
 8003810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3304      	adds	r3, #4
 8003816:	2b06      	cmp	r3, #6
 8003818:	d902      	bls.n	8003820 <NVIC_EncodePriority+0x30>
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3b03      	subs	r3, #3
 800381e:	e000      	b.n	8003822 <NVIC_EncodePriority+0x32>
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003824:	f04f 32ff 	mov.w	r2, #4294967295
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	401a      	ands	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003838:	f04f 31ff 	mov.w	r1, #4294967295
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	43d9      	mvns	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	4313      	orrs	r3, r2
         );
}
 800384a:	4618      	mov	r0, r3
 800384c:	3724      	adds	r7, #36	; 0x24
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003868:	d301      	bcc.n	800386e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800386a:	2301      	movs	r3, #1
 800386c:	e00f      	b.n	800388e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <SysTick_Config+0x40>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3b01      	subs	r3, #1
 8003874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003876:	210f      	movs	r1, #15
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	f7ff ff8e 	bl	800379c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <SysTick_Config+0x40>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <SysTick_Config+0x40>)
 8003888:	2207      	movs	r2, #7
 800388a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	e000e010 	.word	0xe000e010

0800389c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff47 	bl	8003738 <__NVIC_SetPriorityGrouping>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038c4:	f7ff ff5c 	bl	8003780 <__NVIC_GetPriorityGrouping>
 80038c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	6978      	ldr	r0, [r7, #20]
 80038d0:	f7ff ff8e 	bl	80037f0 <NVIC_EncodePriority>
 80038d4:	4602      	mov	r2, r0
 80038d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff5d 	bl	800379c <__NVIC_SetPriority>
}
 80038e2:	bf00      	nop
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ffb0 	bl	8003858 <SysTick_Config>
 80038f8:	4603      	mov	r3, r0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e098      	b.n	8003a48 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	4b4d      	ldr	r3, [pc, #308]	; (8003a54 <HAL_DMA_Init+0x150>)
 800391e:	429a      	cmp	r2, r3
 8003920:	d80f      	bhi.n	8003942 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <HAL_DMA_Init+0x154>)
 800392a:	4413      	add	r3, r2
 800392c:	4a4b      	ldr	r2, [pc, #300]	; (8003a5c <HAL_DMA_Init+0x158>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	009a      	lsls	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a48      	ldr	r2, [pc, #288]	; (8003a60 <HAL_DMA_Init+0x15c>)
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
 8003940:	e00e      	b.n	8003960 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	4b46      	ldr	r3, [pc, #280]	; (8003a64 <HAL_DMA_Init+0x160>)
 800394a:	4413      	add	r3, r2
 800394c:	4a43      	ldr	r2, [pc, #268]	; (8003a5c <HAL_DMA_Init+0x158>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	009a      	lsls	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a42      	ldr	r2, [pc, #264]	; (8003a68 <HAL_DMA_Init+0x164>)
 800395e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ba:	d039      	beq.n	8003a30 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <HAL_DMA_Init+0x15c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d11a      	bne.n	80039fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_DMA_Init+0x168>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f003 031c 	and.w	r3, r3, #28
 80039d2:	210f      	movs	r1, #15
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	4924      	ldr	r1, [pc, #144]	; (8003a6c <HAL_DMA_Init+0x168>)
 80039dc:	4013      	ands	r3, r2
 80039de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80039e0:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_DMA_Init+0x168>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	f003 031c 	and.w	r3, r3, #28
 80039f0:	fa01 f303 	lsl.w	r3, r1, r3
 80039f4:	491d      	ldr	r1, [pc, #116]	; (8003a6c <HAL_DMA_Init+0x168>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
 80039fa:	e019      	b.n	8003a30 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039fc:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <HAL_DMA_Init+0x16c>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	f003 031c 	and.w	r3, r3, #28
 8003a08:	210f      	movs	r1, #15
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	4917      	ldr	r1, [pc, #92]	; (8003a70 <HAL_DMA_Init+0x16c>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <HAL_DMA_Init+0x16c>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6859      	ldr	r1, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f003 031c 	and.w	r3, r3, #28
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	4911      	ldr	r1, [pc, #68]	; (8003a70 <HAL_DMA_Init+0x16c>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40020407 	.word	0x40020407
 8003a58:	bffdfff8 	.word	0xbffdfff8
 8003a5c:	cccccccd 	.word	0xcccccccd
 8003a60:	40020000 	.word	0x40020000
 8003a64:	bffdfbf8 	.word	0xbffdfbf8
 8003a68:	40020400 	.word	0x40020400
 8003a6c:	400200a8 	.word	0x400200a8
 8003a70:	400204a8 	.word	0x400204a8

08003a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_DMA_Start_IT+0x20>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e04b      	b.n	8003b2c <HAL_DMA_Start_IT+0xb8>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d13a      	bne.n	8003b1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f831 	bl	8003b34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 020e 	orr.w	r2, r2, #14
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e00f      	b.n	8003b0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0204 	bic.w	r2, r2, #4
 8003afa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 020a 	orr.w	r2, r2, #10
 8003b0a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e005      	b.n	8003b2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
 8003b28:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f003 021c 	and.w	r2, r3, #28
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f202 	lsl.w	r2, r1, r2
 8003b54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d108      	bne.n	8003b78 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b76:	e007      	b.n	8003b88 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	60da      	str	r2, [r3, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba2:	e17f      	b.n	8003ea4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8171 	beq.w	8003e9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d00b      	beq.n	8003bdc <HAL_GPIO_Init+0x48>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d007      	beq.n	8003bdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bd0:	2b11      	cmp	r3, #17
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b12      	cmp	r3, #18
 8003bda:	d130      	bne.n	8003c3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c12:	2201      	movs	r2, #1
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0201 	and.w	r2, r3, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d118      	bne.n	8003c7c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c50:	2201      	movs	r2, #1
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	08db      	lsrs	r3, r3, #3
 8003c66:	f003 0201 	and.w	r2, r3, #1
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x128>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b12      	cmp	r3, #18
 8003cba:	d123      	bne.n	8003d04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	08da      	lsrs	r2, r3, #3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3208      	adds	r2, #8
 8003cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	220f      	movs	r2, #15
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	08da      	lsrs	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3208      	adds	r2, #8
 8003cfe:	6939      	ldr	r1, [r7, #16]
 8003d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	2203      	movs	r2, #3
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 0203 	and.w	r2, r3, #3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80ac 	beq.w	8003e9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d46:	4b5f      	ldr	r3, [pc, #380]	; (8003ec4 <HAL_GPIO_Init+0x330>)
 8003d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4a:	4a5e      	ldr	r2, [pc, #376]	; (8003ec4 <HAL_GPIO_Init+0x330>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6613      	str	r3, [r2, #96]	; 0x60
 8003d52:	4b5c      	ldr	r3, [pc, #368]	; (8003ec4 <HAL_GPIO_Init+0x330>)
 8003d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d5e:	4a5a      	ldr	r2, [pc, #360]	; (8003ec8 <HAL_GPIO_Init+0x334>)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	3302      	adds	r3, #2
 8003d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	220f      	movs	r2, #15
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d88:	d025      	beq.n	8003dd6 <HAL_GPIO_Init+0x242>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4f      	ldr	r2, [pc, #316]	; (8003ecc <HAL_GPIO_Init+0x338>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01f      	beq.n	8003dd2 <HAL_GPIO_Init+0x23e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4e      	ldr	r2, [pc, #312]	; (8003ed0 <HAL_GPIO_Init+0x33c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d019      	beq.n	8003dce <HAL_GPIO_Init+0x23a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4d      	ldr	r2, [pc, #308]	; (8003ed4 <HAL_GPIO_Init+0x340>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_GPIO_Init+0x236>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4c      	ldr	r2, [pc, #304]	; (8003ed8 <HAL_GPIO_Init+0x344>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00d      	beq.n	8003dc6 <HAL_GPIO_Init+0x232>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4b      	ldr	r2, [pc, #300]	; (8003edc <HAL_GPIO_Init+0x348>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <HAL_GPIO_Init+0x22e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4a      	ldr	r2, [pc, #296]	; (8003ee0 <HAL_GPIO_Init+0x34c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_GPIO_Init+0x22a>
 8003dba:	2306      	movs	r3, #6
 8003dbc:	e00c      	b.n	8003dd8 <HAL_GPIO_Init+0x244>
 8003dbe:	2307      	movs	r3, #7
 8003dc0:	e00a      	b.n	8003dd8 <HAL_GPIO_Init+0x244>
 8003dc2:	2305      	movs	r3, #5
 8003dc4:	e008      	b.n	8003dd8 <HAL_GPIO_Init+0x244>
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	e006      	b.n	8003dd8 <HAL_GPIO_Init+0x244>
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e004      	b.n	8003dd8 <HAL_GPIO_Init+0x244>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e002      	b.n	8003dd8 <HAL_GPIO_Init+0x244>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <HAL_GPIO_Init+0x244>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	f002 0203 	and.w	r2, r2, #3
 8003dde:	0092      	lsls	r2, r2, #2
 8003de0:	4093      	lsls	r3, r2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003de8:	4937      	ldr	r1, [pc, #220]	; (8003ec8 <HAL_GPIO_Init+0x334>)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	089b      	lsrs	r3, r3, #2
 8003dee:	3302      	adds	r3, #2
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003df6:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <HAL_GPIO_Init+0x350>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e1a:	4a32      	ldr	r2, [pc, #200]	; (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003e20:	4b30      	ldr	r3, [pc, #192]	; (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e44:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e4a:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e74:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e98:	4a12      	ldr	r2, [pc, #72]	; (8003ee4 <HAL_GPIO_Init+0x350>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f47f ae78 	bne.w	8003ba4 <HAL_GPIO_Init+0x10>
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	48000400 	.word	0x48000400
 8003ed0:	48000800 	.word	0x48000800
 8003ed4:	48000c00 	.word	0x48000c00
 8003ed8:	48001000 	.word	0x48001000
 8003edc:	48001400 	.word	0x48001400
 8003ee0:	48001800 	.word	0x48001800
 8003ee4:	40010400 	.word	0x40010400

08003ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ef8:	787b      	ldrb	r3, [r7, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f04:	e002      	b.n	8003f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40007000 	.word	0x40007000

08003f34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f42:	d130      	bne.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f44:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f50:	d038      	beq.n	8003fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2232      	movs	r2, #50	; 0x32
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	0c9b      	lsrs	r3, r3, #18
 8003f74:	3301      	adds	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f78:	e002      	b.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8c:	d102      	bne.n	8003f94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f2      	bne.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa0:	d110      	bne.n	8003fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e00f      	b.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb2:	d007      	beq.n	8003fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fb4:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fbc:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40007000 	.word	0x40007000
 8003fd8:	200019a8 	.word	0x200019a8
 8003fdc:	431bde83 	.word	0x431bde83

08003fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e3d4      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ff2:	4ba1      	ldr	r3, [pc, #644]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ffc:	4b9e      	ldr	r3, [pc, #632]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80e4 	beq.w	80041dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_RCC_OscConfig+0x4a>
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b0c      	cmp	r3, #12
 800401e:	f040 808b 	bne.w	8004138 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b01      	cmp	r3, #1
 8004026:	f040 8087 	bne.w	8004138 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800402a:	4b93      	ldr	r3, [pc, #588]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_RCC_OscConfig+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e3ac      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1a      	ldr	r2, [r3, #32]
 8004046:	4b8c      	ldr	r3, [pc, #560]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <HAL_RCC_OscConfig+0x7c>
 8004052:	4b89      	ldr	r3, [pc, #548]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800405a:	e005      	b.n	8004068 <HAL_RCC_OscConfig+0x88>
 800405c:	4b86      	ldr	r3, [pc, #536]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004068:	4293      	cmp	r3, r2
 800406a:	d223      	bcs.n	80040b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fd41 	bl	8004af8 <RCC_SetFlashLatencyFromMSIRange>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e38d      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004080:	4b7d      	ldr	r3, [pc, #500]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a7c      	ldr	r2, [pc, #496]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004086:	f043 0308 	orr.w	r3, r3, #8
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	4b7a      	ldr	r3, [pc, #488]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4977      	ldr	r1, [pc, #476]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800409e:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	021b      	lsls	r3, r3, #8
 80040ac:	4972      	ldr	r1, [pc, #456]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
 80040b2:	e025      	b.n	8004100 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040b4:	4b70      	ldr	r3, [pc, #448]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6f      	ldr	r2, [pc, #444]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80040ba:	f043 0308 	orr.w	r3, r3, #8
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b6d      	ldr	r3, [pc, #436]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	496a      	ldr	r1, [pc, #424]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040d2:	4b69      	ldr	r3, [pc, #420]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	4965      	ldr	r1, [pc, #404]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fd01 	bl	8004af8 <RCC_SetFlashLatencyFromMSIRange>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e34d      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004100:	f000 fc36 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b5c      	ldr	r3, [pc, #368]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	091b      	lsrs	r3, r3, #4
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	495a      	ldr	r1, [pc, #360]	; (800427c <HAL_RCC_OscConfig+0x29c>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
 800411c:	4a58      	ldr	r2, [pc, #352]	; (8004280 <HAL_RCC_OscConfig+0x2a0>)
 800411e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004120:	4b58      	ldr	r3, [pc, #352]	; (8004284 <HAL_RCC_OscConfig+0x2a4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7fd ffbb 	bl	80020a0 <HAL_InitTick>
 800412a:	4603      	mov	r3, r0
 800412c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d052      	beq.n	80041da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	e331      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d032      	beq.n	80041a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004140:	4b4d      	ldr	r3, [pc, #308]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a4c      	ldr	r2, [pc, #304]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800414c:	f7fd fff8 	bl	8002140 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004154:	f7fd fff4 	bl	8002140 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e31a      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004166:	4b44      	ldr	r3, [pc, #272]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a40      	ldr	r2, [pc, #256]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004178:	f043 0308 	orr.w	r3, r3, #8
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b3e      	ldr	r3, [pc, #248]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	493b      	ldr	r1, [pc, #236]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 800418c:	4313      	orrs	r3, r2
 800418e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004190:	4b39      	ldr	r3, [pc, #228]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	4936      	ldr	r1, [pc, #216]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
 80041a4:	e01a      	b.n	80041dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041a6:	4b34      	ldr	r3, [pc, #208]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a33      	ldr	r2, [pc, #204]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041b2:	f7fd ffc5 	bl	8002140 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041ba:	f7fd ffc1 	bl	8002140 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e2e7      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041cc:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCC_OscConfig+0x1da>
 80041d8:	e000      	b.n	80041dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d074      	beq.n	80042d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d005      	beq.n	80041fa <HAL_RCC_OscConfig+0x21a>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d10e      	bne.n	8004212 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d10b      	bne.n	8004212 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fa:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d064      	beq.n	80042d0 <HAL_RCC_OscConfig+0x2f0>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d160      	bne.n	80042d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e2c4      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x24a>
 800421c:	4b16      	ldr	r3, [pc, #88]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a15      	ldr	r2, [pc, #84]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	e01d      	b.n	8004266 <HAL_RCC_OscConfig+0x286>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004232:	d10c      	bne.n	800424e <HAL_RCC_OscConfig+0x26e>
 8004234:	4b10      	ldr	r3, [pc, #64]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a0f      	ldr	r2, [pc, #60]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 800423a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a0c      	ldr	r2, [pc, #48]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	e00b      	b.n	8004266 <HAL_RCC_OscConfig+0x286>
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a09      	ldr	r2, [pc, #36]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a06      	ldr	r2, [pc, #24]	; (8004278 <HAL_RCC_OscConfig+0x298>)
 8004260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004264:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01c      	beq.n	80042a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426e:	f7fd ff67 	bl	8002140 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004274:	e011      	b.n	800429a <HAL_RCC_OscConfig+0x2ba>
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000
 800427c:	08007e60 	.word	0x08007e60
 8004280:	200019a8 	.word	0x200019a8
 8004284:	200019ac 	.word	0x200019ac
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004288:	f7fd ff5a 	bl	8002140 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e280      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429a:	4baf      	ldr	r3, [pc, #700]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x2a8>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fd ff4a 	bl	8002140 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b0:	f7fd ff46 	bl	8002140 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b64      	cmp	r3, #100	; 0x64
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e26c      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042c2:	4ba5      	ldr	r3, [pc, #660]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x2d0>
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d060      	beq.n	80043a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_OscConfig+0x310>
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b0c      	cmp	r3, #12
 80042e8:	d119      	bne.n	800431e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d116      	bne.n	800431e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f0:	4b99      	ldr	r3, [pc, #612]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x328>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e249      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b93      	ldr	r3, [pc, #588]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	4990      	ldr	r1, [pc, #576]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800431c:	e040      	b.n	80043a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d023      	beq.n	800436e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004326:	4b8c      	ldr	r3, [pc, #560]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a8b      	ldr	r2, [pc, #556]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fd ff05 	bl	8002140 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433a:	f7fd ff01 	bl	8002140 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e227      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800434c:	4b82      	ldr	r3, [pc, #520]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004358:	4b7f      	ldr	r3, [pc, #508]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	497c      	ldr	r1, [pc, #496]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
 800436c:	e018      	b.n	80043a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800436e:	4b7a      	ldr	r3, [pc, #488]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a79      	ldr	r2, [pc, #484]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 8004374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7fd fee1 	bl	8002140 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004382:	f7fd fedd 	bl	8002140 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e203      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004394:	4b70      	ldr	r3, [pc, #448]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d03c      	beq.n	8004426 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01c      	beq.n	80043ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b4:	4b68      	ldr	r3, [pc, #416]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80043b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ba:	4a67      	ldr	r2, [pc, #412]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fd febc 	bl	8002140 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fd feb8 	bl	8002140 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e1de      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043de:	4b5e      	ldr	r3, [pc, #376]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80043e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ef      	beq.n	80043cc <HAL_RCC_OscConfig+0x3ec>
 80043ec:	e01b      	b.n	8004426 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ee:	4b5a      	ldr	r3, [pc, #360]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80043f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f4:	4a58      	ldr	r2, [pc, #352]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fd fe9f 	bl	8002140 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004406:	f7fd fe9b 	bl	8002140 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e1c1      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004418:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 800441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ef      	bne.n	8004406 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 80a6 	beq.w	8004580 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004434:	2300      	movs	r3, #0
 8004436:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004438:	4b47      	ldr	r3, [pc, #284]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10d      	bne.n	8004460 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004444:	4b44      	ldr	r3, [pc, #272]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	4a43      	ldr	r2, [pc, #268]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444e:	6593      	str	r3, [r2, #88]	; 0x58
 8004450:	4b41      	ldr	r3, [pc, #260]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445c:	2301      	movs	r3, #1
 800445e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004460:	4b3e      	ldr	r3, [pc, #248]	; (800455c <HAL_RCC_OscConfig+0x57c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d118      	bne.n	800449e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800446c:	4b3b      	ldr	r3, [pc, #236]	; (800455c <HAL_RCC_OscConfig+0x57c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a3a      	ldr	r2, [pc, #232]	; (800455c <HAL_RCC_OscConfig+0x57c>)
 8004472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004476:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004478:	f7fd fe62 	bl	8002140 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004480:	f7fd fe5e 	bl	8002140 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e184      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004492:	4b32      	ldr	r3, [pc, #200]	; (800455c <HAL_RCC_OscConfig+0x57c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d108      	bne.n	80044b8 <HAL_RCC_OscConfig+0x4d8>
 80044a6:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80044a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ac:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044b6:	e024      	b.n	8004502 <HAL_RCC_OscConfig+0x522>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b05      	cmp	r3, #5
 80044be:	d110      	bne.n	80044e2 <HAL_RCC_OscConfig+0x502>
 80044c0:	4b25      	ldr	r3, [pc, #148]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	4a24      	ldr	r2, [pc, #144]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80044c8:	f043 0304 	orr.w	r3, r3, #4
 80044cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d0:	4b21      	ldr	r3, [pc, #132]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	4a20      	ldr	r2, [pc, #128]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e0:	e00f      	b.n	8004502 <HAL_RCC_OscConfig+0x522>
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f2:	4b19      	ldr	r3, [pc, #100]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	4a17      	ldr	r2, [pc, #92]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 80044fa:	f023 0304 	bic.w	r3, r3, #4
 80044fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d016      	beq.n	8004538 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fd fe19 	bl	8002140 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fd fe15 	bl	8002140 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e139      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <HAL_RCC_OscConfig+0x578>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ed      	beq.n	8004512 <HAL_RCC_OscConfig+0x532>
 8004536:	e01a      	b.n	800456e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fd fe02 	bl	8002140 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800453e:	e00f      	b.n	8004560 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fd fdfe 	bl	8002140 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d906      	bls.n	8004560 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e122      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004560:	4b90      	ldr	r3, [pc, #576]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e8      	bne.n	8004540 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800456e:	7ffb      	ldrb	r3, [r7, #31]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d105      	bne.n	8004580 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004574:	4b8b      	ldr	r3, [pc, #556]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	4a8a      	ldr	r2, [pc, #552]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 800457a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8108 	beq.w	800479a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	2b02      	cmp	r3, #2
 8004590:	f040 80d0 	bne.w	8004734 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004594:	4b83      	ldr	r3, [pc, #524]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0203 	and.w	r2, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d130      	bne.n	800460a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	3b01      	subs	r3, #1
 80045b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d127      	bne.n	800460a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d11f      	bne.n	800460a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d4:	2a07      	cmp	r2, #7
 80045d6:	bf14      	ite	ne
 80045d8:	2201      	movne	r2, #1
 80045da:	2200      	moveq	r2, #0
 80045dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045de:	4293      	cmp	r3, r2
 80045e0:	d113      	bne.n	800460a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	3b01      	subs	r3, #1
 80045f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d109      	bne.n	800460a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	3b01      	subs	r3, #1
 8004604:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d06e      	beq.n	80046e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b0c      	cmp	r3, #12
 800460e:	d069      	beq.n	80046e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004610:	4b64      	ldr	r3, [pc, #400]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d105      	bne.n	8004628 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800461c:	4b61      	ldr	r3, [pc, #388]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0b7      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800462c:	4b5d      	ldr	r3, [pc, #372]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a5c      	ldr	r2, [pc, #368]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004636:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004638:	f7fd fd82 	bl	8002140 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fd fd7e 	bl	8002140 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0a4      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004652:	4b54      	ldr	r3, [pc, #336]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800465e:	4b51      	ldr	r3, [pc, #324]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	4b51      	ldr	r3, [pc, #324]	; (80047a8 <HAL_RCC_OscConfig+0x7c8>)
 8004664:	4013      	ands	r3, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800466e:	3a01      	subs	r2, #1
 8004670:	0112      	lsls	r2, r2, #4
 8004672:	4311      	orrs	r1, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004678:	0212      	lsls	r2, r2, #8
 800467a:	4311      	orrs	r1, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004680:	0852      	lsrs	r2, r2, #1
 8004682:	3a01      	subs	r2, #1
 8004684:	0552      	lsls	r2, r2, #21
 8004686:	4311      	orrs	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800468c:	0852      	lsrs	r2, r2, #1
 800468e:	3a01      	subs	r2, #1
 8004690:	0652      	lsls	r2, r2, #25
 8004692:	4311      	orrs	r1, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004698:	0912      	lsrs	r2, r2, #4
 800469a:	0452      	lsls	r2, r2, #17
 800469c:	430a      	orrs	r2, r1
 800469e:	4941      	ldr	r1, [pc, #260]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046a4:	4b3f      	ldr	r3, [pc, #252]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3e      	ldr	r2, [pc, #248]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 80046aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046b0:	4b3c      	ldr	r3, [pc, #240]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a3b      	ldr	r2, [pc, #236]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 80046b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046bc:	f7fd fd40 	bl	8002140 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fd fd3c 	bl	8002140 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e062      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d6:	4b33      	ldr	r3, [pc, #204]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046e2:	e05a      	b.n	800479a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e059      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e8:	4b2e      	ldr	r3, [pc, #184]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d152      	bne.n	800479a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046f4:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 80046fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004700:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a27      	ldr	r2, [pc, #156]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800470a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800470c:	f7fd fd18 	bl	8002140 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004714:	f7fd fd14 	bl	8002140 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e03a      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x734>
 8004732:	e032      	b.n	800479a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d02d      	beq.n	8004796 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004744:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004746:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004752:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004758:	f023 0303 	bic.w	r3, r3, #3
 800475c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	4a10      	ldr	r2, [pc, #64]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 8004764:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd fce7 	bl	8002140 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004776:	f7fd fce3 	bl	8002140 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e009      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCC_OscConfig+0x7c4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f0      	bne.n	8004776 <HAL_RCC_OscConfig+0x796>
 8004794:	e001      	b.n	800479a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40021000 	.word	0x40021000
 80047a8:	f99d808c 	.word	0xf99d808c

080047ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0c8      	b.n	8004952 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b66      	ldr	r3, [pc, #408]	; (800495c <HAL_RCC_ClockConfig+0x1b0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d910      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b63      	ldr	r3, [pc, #396]	; (800495c <HAL_RCC_ClockConfig+0x1b0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 0207 	bic.w	r2, r3, #7
 80047d6:	4961      	ldr	r1, [pc, #388]	; (800495c <HAL_RCC_ClockConfig+0x1b0>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b5f      	ldr	r3, [pc, #380]	; (800495c <HAL_RCC_ClockConfig+0x1b0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0b0      	b.n	8004952 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d04c      	beq.n	8004896 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d107      	bne.n	8004814 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004804:	4b56      	ldr	r3, [pc, #344]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d121      	bne.n	8004854 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e09e      	b.n	8004952 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d107      	bne.n	800482c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800481c:	4b50      	ldr	r3, [pc, #320]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d115      	bne.n	8004854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e092      	b.n	8004952 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d107      	bne.n	8004844 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004834:	4b4a      	ldr	r3, [pc, #296]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e086      	b.n	8004952 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004844:	4b46      	ldr	r3, [pc, #280]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e07e      	b.n	8004952 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004854:	4b42      	ldr	r3, [pc, #264]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f023 0203 	bic.w	r2, r3, #3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	493f      	ldr	r1, [pc, #252]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004866:	f7fd fc6b 	bl	8002140 <HAL_GetTick>
 800486a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486c:	e00a      	b.n	8004884 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486e:	f7fd fc67 	bl	8002140 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	; 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e066      	b.n	8004952 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004884:	4b36      	ldr	r3, [pc, #216]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 020c 	and.w	r2, r3, #12
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	429a      	cmp	r2, r3
 8004894:	d1eb      	bne.n	800486e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a2:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	492c      	ldr	r1, [pc, #176]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b4:	4b29      	ldr	r3, [pc, #164]	; (800495c <HAL_RCC_ClockConfig+0x1b0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d210      	bcs.n	80048e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b26      	ldr	r3, [pc, #152]	; (800495c <HAL_RCC_ClockConfig+0x1b0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 0207 	bic.w	r2, r3, #7
 80048ca:	4924      	ldr	r1, [pc, #144]	; (800495c <HAL_RCC_ClockConfig+0x1b0>)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <HAL_RCC_ClockConfig+0x1b0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e036      	b.n	8004952 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4918      	ldr	r1, [pc, #96]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4910      	ldr	r1, [pc, #64]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004922:	f000 f825 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 8004926:	4602      	mov	r2, r0
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <HAL_RCC_ClockConfig+0x1b4>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	490c      	ldr	r1, [pc, #48]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	5ccb      	ldrb	r3, [r1, r3]
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004942:	4b0a      	ldr	r3, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fd fbaa 	bl	80020a0 <HAL_InitTick>
 800494c:	4603      	mov	r3, r0
 800494e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004950:	7afb      	ldrb	r3, [r7, #11]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40022000 	.word	0x40022000
 8004960:	40021000 	.word	0x40021000
 8004964:	08007e60 	.word	0x08007e60
 8004968:	200019a8 	.word	0x200019a8
 800496c:	200019ac 	.word	0x200019ac

08004970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	; 0x24
 8004974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	2300      	movs	r3, #0
 800497c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800497e:	4b3e      	ldr	r3, [pc, #248]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004988:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x34>
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d121      	bne.n	80049e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d11e      	bne.n	80049e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049a4:	4b34      	ldr	r3, [pc, #208]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049b0:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	e005      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049c0:	4b2d      	ldr	r3, [pc, #180]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049cc:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10d      	bne.n	80049f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049e0:	e00a      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d102      	bne.n	80049ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049e8:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x110>)
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	e004      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d101      	bne.n	80049f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049f4:	4b23      	ldr	r3, [pc, #140]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x114>)
 80049f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b0c      	cmp	r3, #12
 80049fc:	d134      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049fe:	4b1e      	ldr	r3, [pc, #120]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d003      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0xac>
 8004a14:	e005      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a16:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a18:	617b      	str	r3, [r7, #20]
      break;
 8004a1a:	e005      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a1c:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a1e:	617b      	str	r3, [r7, #20]
      break;
 8004a20:	e002      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	617b      	str	r3, [r7, #20]
      break;
 8004a26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a28:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	3301      	adds	r3, #1
 8004a34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	fb02 f203 	mul.w	r2, r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	0e5b      	lsrs	r3, r3, #25
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a68:	69bb      	ldr	r3, [r7, #24]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3724      	adds	r7, #36	; 0x24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	08007e78 	.word	0x08007e78
 8004a80:	00f42400 	.word	0x00f42400
 8004a84:	007a1200 	.word	0x007a1200

08004a88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	200019a8 	.word	0x200019a8

08004aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004aa4:	f7ff fff0 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4904      	ldr	r1, [pc, #16]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	08007e70 	.word	0x08007e70

08004acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ad0:	f7ff ffda 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0adb      	lsrs	r3, r3, #11
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4904      	ldr	r1, [pc, #16]	; (8004af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000
 8004af4:	08007e70 	.word	0x08007e70

08004af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b04:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b10:	f7ff fa02 	bl	8003f18 <HAL_PWREx_GetVoltageRange>
 8004b14:	6178      	str	r0, [r7, #20]
 8004b16:	e014      	b.n	8004b42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b18:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6593      	str	r3, [r2, #88]	; 0x58
 8004b24:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b30:	f7ff f9f2 	bl	8003f18 <HAL_PWREx_GetVoltageRange>
 8004b34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b36:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	; (8004bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b48:	d10b      	bne.n	8004b62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b80      	cmp	r3, #128	; 0x80
 8004b4e:	d919      	bls.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2ba0      	cmp	r3, #160	; 0xa0
 8004b54:	d902      	bls.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b56:	2302      	movs	r3, #2
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	e013      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	e010      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d902      	bls.n	8004b6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b68:	2303      	movs	r3, #3
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	e00a      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b80      	cmp	r3, #128	; 0x80
 8004b72:	d102      	bne.n	8004b7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b74:	2302      	movs	r3, #2
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	e004      	b.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b70      	cmp	r3, #112	; 0x70
 8004b7e:	d101      	bne.n	8004b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b80:	2301      	movs	r3, #1
 8004b82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 0207 	bic.w	r2, r3, #7
 8004b8c:	4909      	ldr	r1, [pc, #36]	; (8004bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b94:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d001      	beq.n	8004ba6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40022000 	.word	0x40022000

08004bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d041      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bdc:	d02a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004be2:	d824      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004be8:	d008      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bee:	d81e      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf8:	d010      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bfa:	e018      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bfc:	4b86      	ldr	r3, [pc, #536]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a85      	ldr	r2, [pc, #532]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c08:	e015      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fabb 	bl	800518c <RCCEx_PLLSAI1_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c1a:	e00c      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3320      	adds	r3, #32
 8004c20:	2100      	movs	r1, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fba6 	bl	8005374 <RCCEx_PLLSAI2_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c2c:	e003      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	74fb      	strb	r3, [r7, #19]
      break;
 8004c32:	e000      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c36:	7cfb      	ldrb	r3, [r7, #19]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c3c:	4b76      	ldr	r3, [pc, #472]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c4a:	4973      	ldr	r1, [pc, #460]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c52:	e001      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d041      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c6c:	d02a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c72:	d824      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c78:	d008      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c7e:	d81e      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c88:	d010      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c8a:	e018      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c8c:	4b62      	ldr	r3, [pc, #392]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a61      	ldr	r2, [pc, #388]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c98:	e015      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fa73 	bl	800518c <RCCEx_PLLSAI1_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004caa:	e00c      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3320      	adds	r3, #32
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fb5e 	bl	8005374 <RCCEx_PLLSAI2_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cbc:	e003      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc6:	7cfb      	ldrb	r3, [r7, #19]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ccc:	4b52      	ldr	r3, [pc, #328]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cda:	494f      	ldr	r1, [pc, #316]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ce2:	e001      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80a0 	beq.w	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cfa:	4b47      	ldr	r3, [pc, #284]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00d      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d10:	4b41      	ldr	r3, [pc, #260]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	4a40      	ldr	r2, [pc, #256]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d1c:	4b3e      	ldr	r3, [pc, #248]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d2c:	4b3b      	ldr	r3, [pc, #236]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a3a      	ldr	r2, [pc, #232]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d38:	f7fd fa02 	bl	8002140 <HAL_GetTick>
 8004d3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d3e:	e009      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d40:	f7fd f9fe 	bl	8002140 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d902      	bls.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	74fb      	strb	r3, [r7, #19]
        break;
 8004d52:	e005      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d54:	4b31      	ldr	r3, [pc, #196]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ef      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d15c      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d66:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d019      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d84:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d90:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004da0:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	4a1c      	ldr	r2, [pc, #112]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004db0:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d016      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fd f9bd 	bl	8002140 <HAL_GetTick>
 8004dc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc8:	e00b      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f7fd f9b9 	bl	8002140 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d902      	bls.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	74fb      	strb	r3, [r7, #19]
            break;
 8004de0:	e006      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ec      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e06:	4904      	ldr	r1, [pc, #16]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e0e:	e009      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e10:	7cfb      	ldrb	r3, [r7, #19]
 8004e12:	74bb      	strb	r3, [r7, #18]
 8004e14:	e006      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e16:	bf00      	nop
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e20:	7cfb      	ldrb	r3, [r7, #19]
 8004e22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e24:	7c7b      	ldrb	r3, [r7, #17]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d105      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2a:	4b9e      	ldr	r3, [pc, #632]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	4a9d      	ldr	r2, [pc, #628]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e42:	4b98      	ldr	r3, [pc, #608]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f023 0203 	bic.w	r2, r3, #3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	4994      	ldr	r1, [pc, #592]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e64:	4b8f      	ldr	r3, [pc, #572]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f023 020c 	bic.w	r2, r3, #12
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	498c      	ldr	r1, [pc, #560]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e86:	4b87      	ldr	r3, [pc, #540]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	4983      	ldr	r1, [pc, #524]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ea8:	4b7e      	ldr	r3, [pc, #504]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	497b      	ldr	r1, [pc, #492]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eca:	4b76      	ldr	r3, [pc, #472]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed8:	4972      	ldr	r1, [pc, #456]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eec:	4b6d      	ldr	r3, [pc, #436]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efa:	496a      	ldr	r1, [pc, #424]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f0e:	4b65      	ldr	r3, [pc, #404]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1c:	4961      	ldr	r1, [pc, #388]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f30:	4b5c      	ldr	r3, [pc, #368]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3e:	4959      	ldr	r1, [pc, #356]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f52:	4b54      	ldr	r3, [pc, #336]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f60:	4950      	ldr	r1, [pc, #320]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f74:	4b4b      	ldr	r3, [pc, #300]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	4948      	ldr	r1, [pc, #288]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f96:	4b43      	ldr	r3, [pc, #268]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	493f      	ldr	r1, [pc, #252]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d028      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fb8:	4b3a      	ldr	r3, [pc, #232]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc6:	4937      	ldr	r1, [pc, #220]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd6:	d106      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd8:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a31      	ldr	r2, [pc, #196]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe2:	60d3      	str	r3, [r2, #12]
 8004fe4:	e011      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fee:	d10c      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f8c8 	bl	800518c <RCCEx_PLLSAI1_Config>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005006:	7cfb      	ldrb	r3, [r7, #19]
 8005008:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d028      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005016:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005024:	491f      	ldr	r1, [pc, #124]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005034:	d106      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005036:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005040:	60d3      	str	r3, [r2, #12]
 8005042:	e011      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800504c:	d10c      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	2101      	movs	r1, #1
 8005054:	4618      	mov	r0, r3
 8005056:	f000 f899 	bl	800518c <RCCEx_PLLSAI1_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800505e:	7cfb      	ldrb	r3, [r7, #19]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d02b      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005082:	4908      	ldr	r1, [pc, #32]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005092:	d109      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005094:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a02      	ldr	r2, [pc, #8]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800509e:	60d3      	str	r3, [r2, #12]
 80050a0:	e014      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80050a2:	bf00      	nop
 80050a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050b0:	d10c      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3304      	adds	r3, #4
 80050b6:	2101      	movs	r1, #1
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 f867 	bl	800518c <RCCEx_PLLSAI1_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80050c8:	7cfb      	ldrb	r3, [r7, #19]
 80050ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d02f      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050d8:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e6:	4928      	ldr	r1, [pc, #160]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f6:	d10d      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	2102      	movs	r1, #2
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 f844 	bl	800518c <RCCEx_PLLSAI1_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d014      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800510e:	7cfb      	ldrb	r3, [r7, #19]
 8005110:	74bb      	strb	r3, [r7, #18]
 8005112:	e011      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511c:	d10c      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3320      	adds	r3, #32
 8005122:	2102      	movs	r1, #2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f925 	bl	8005374 <RCCEx_PLLSAI2_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800512e:	7cfb      	ldrb	r3, [r7, #19]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005134:	7cfb      	ldrb	r3, [r7, #19]
 8005136:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005144:	4b10      	ldr	r3, [pc, #64]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005152:	490d      	ldr	r1, [pc, #52]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00b      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005166:	4b08      	ldr	r3, [pc, #32]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005176:	4904      	ldr	r1, [pc, #16]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800517e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40021000 	.word	0x40021000

0800518c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800519a:	4b75      	ldr	r3, [pc, #468]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d018      	beq.n	80051d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051a6:	4b72      	ldr	r3, [pc, #456]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0203 	and.w	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d10d      	bne.n	80051d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
       ||
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051be:	4b6c      	ldr	r3, [pc, #432]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	091b      	lsrs	r3, r3, #4
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
       ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d047      	beq.n	8005262 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
 80051d6:	e044      	b.n	8005262 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d018      	beq.n	8005212 <RCCEx_PLLSAI1_Config+0x86>
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d825      	bhi.n	8005230 <RCCEx_PLLSAI1_Config+0xa4>
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d002      	beq.n	80051ee <RCCEx_PLLSAI1_Config+0x62>
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d009      	beq.n	8005200 <RCCEx_PLLSAI1_Config+0x74>
 80051ec:	e020      	b.n	8005230 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051ee:	4b60      	ldr	r3, [pc, #384]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d11d      	bne.n	8005236 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051fe:	e01a      	b.n	8005236 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005200:	4b5b      	ldr	r3, [pc, #364]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005208:	2b00      	cmp	r3, #0
 800520a:	d116      	bne.n	800523a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005210:	e013      	b.n	800523a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005212:	4b57      	ldr	r3, [pc, #348]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10f      	bne.n	800523e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800521e:	4b54      	ldr	r3, [pc, #336]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800522e:	e006      	b.n	800523e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
      break;
 8005234:	e004      	b.n	8005240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005236:	bf00      	nop
 8005238:	e002      	b.n	8005240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800523e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10d      	bne.n	8005262 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005246:	4b4a      	ldr	r3, [pc, #296]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6819      	ldr	r1, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	3b01      	subs	r3, #1
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	430b      	orrs	r3, r1
 800525c:	4944      	ldr	r1, [pc, #272]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800525e:	4313      	orrs	r3, r2
 8005260:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d17d      	bne.n	8005364 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005268:	4b41      	ldr	r3, [pc, #260]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a40      	ldr	r2, [pc, #256]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800526e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005274:	f7fc ff64 	bl	8002140 <HAL_GetTick>
 8005278:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800527a:	e009      	b.n	8005290 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800527c:	f7fc ff60 	bl	8002140 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d902      	bls.n	8005290 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	73fb      	strb	r3, [r7, #15]
        break;
 800528e:	e005      	b.n	800529c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005290:	4b37      	ldr	r3, [pc, #220]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1ef      	bne.n	800527c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d160      	bne.n	8005364 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d111      	bne.n	80052cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052a8:	4b31      	ldr	r3, [pc, #196]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6892      	ldr	r2, [r2, #8]
 80052b8:	0211      	lsls	r1, r2, #8
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68d2      	ldr	r2, [r2, #12]
 80052be:	0912      	lsrs	r2, r2, #4
 80052c0:	0452      	lsls	r2, r2, #17
 80052c2:	430a      	orrs	r2, r1
 80052c4:	492a      	ldr	r1, [pc, #168]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	610b      	str	r3, [r1, #16]
 80052ca:	e027      	b.n	800531c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d112      	bne.n	80052f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052d2:	4b27      	ldr	r3, [pc, #156]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80052da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6892      	ldr	r2, [r2, #8]
 80052e2:	0211      	lsls	r1, r2, #8
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6912      	ldr	r2, [r2, #16]
 80052e8:	0852      	lsrs	r2, r2, #1
 80052ea:	3a01      	subs	r2, #1
 80052ec:	0552      	lsls	r2, r2, #21
 80052ee:	430a      	orrs	r2, r1
 80052f0:	491f      	ldr	r1, [pc, #124]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	610b      	str	r3, [r1, #16]
 80052f6:	e011      	b.n	800531c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052f8:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005300:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6892      	ldr	r2, [r2, #8]
 8005308:	0211      	lsls	r1, r2, #8
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6952      	ldr	r2, [r2, #20]
 800530e:	0852      	lsrs	r2, r2, #1
 8005310:	3a01      	subs	r2, #1
 8005312:	0652      	lsls	r2, r2, #25
 8005314:	430a      	orrs	r2, r1
 8005316:	4916      	ldr	r1, [pc, #88]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005318:	4313      	orrs	r3, r2
 800531a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800531c:	4b14      	ldr	r3, [pc, #80]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a13      	ldr	r2, [pc, #76]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005322:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005328:	f7fc ff0a 	bl	8002140 <HAL_GetTick>
 800532c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800532e:	e009      	b.n	8005344 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005330:	f7fc ff06 	bl	8002140 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d902      	bls.n	8005344 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	73fb      	strb	r3, [r7, #15]
          break;
 8005342:	e005      	b.n	8005350 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0ef      	beq.n	8005330 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	4904      	ldr	r1, [pc, #16]	; (8005370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005360:	4313      	orrs	r3, r2
 8005362:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000

08005374 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005382:	4b6a      	ldr	r3, [pc, #424]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d018      	beq.n	80053c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800538e:	4b67      	ldr	r3, [pc, #412]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0203 	and.w	r2, r3, #3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d10d      	bne.n	80053ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
       ||
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80053a6:	4b61      	ldr	r3, [pc, #388]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	091b      	lsrs	r3, r3, #4
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
       ||
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d047      	beq.n	800544a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	73fb      	strb	r3, [r7, #15]
 80053be:	e044      	b.n	800544a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d018      	beq.n	80053fa <RCCEx_PLLSAI2_Config+0x86>
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d825      	bhi.n	8005418 <RCCEx_PLLSAI2_Config+0xa4>
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d002      	beq.n	80053d6 <RCCEx_PLLSAI2_Config+0x62>
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d009      	beq.n	80053e8 <RCCEx_PLLSAI2_Config+0x74>
 80053d4:	e020      	b.n	8005418 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053d6:	4b55      	ldr	r3, [pc, #340]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d11d      	bne.n	800541e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053e6:	e01a      	b.n	800541e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053e8:	4b50      	ldr	r3, [pc, #320]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d116      	bne.n	8005422 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f8:	e013      	b.n	8005422 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053fa:	4b4c      	ldr	r3, [pc, #304]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10f      	bne.n	8005426 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005406:	4b49      	ldr	r3, [pc, #292]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005416:	e006      	b.n	8005426 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	73fb      	strb	r3, [r7, #15]
      break;
 800541c:	e004      	b.n	8005428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800541e:	bf00      	nop
 8005420:	e002      	b.n	8005428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005426:	bf00      	nop
    }

    if(status == HAL_OK)
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10d      	bne.n	800544a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800542e:	4b3f      	ldr	r3, [pc, #252]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6819      	ldr	r1, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	3b01      	subs	r3, #1
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	430b      	orrs	r3, r1
 8005444:	4939      	ldr	r1, [pc, #228]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005446:	4313      	orrs	r3, r2
 8005448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d167      	bne.n	8005520 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005450:	4b36      	ldr	r3, [pc, #216]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a35      	ldr	r2, [pc, #212]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800545c:	f7fc fe70 	bl	8002140 <HAL_GetTick>
 8005460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005462:	e009      	b.n	8005478 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005464:	f7fc fe6c 	bl	8002140 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d902      	bls.n	8005478 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	73fb      	strb	r3, [r7, #15]
        break;
 8005476:	e005      	b.n	8005484 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005478:	4b2c      	ldr	r3, [pc, #176]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1ef      	bne.n	8005464 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d14a      	bne.n	8005520 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d111      	bne.n	80054b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005490:	4b26      	ldr	r3, [pc, #152]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6892      	ldr	r2, [r2, #8]
 80054a0:	0211      	lsls	r1, r2, #8
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68d2      	ldr	r2, [r2, #12]
 80054a6:	0912      	lsrs	r2, r2, #4
 80054a8:	0452      	lsls	r2, r2, #17
 80054aa:	430a      	orrs	r2, r1
 80054ac:	491f      	ldr	r1, [pc, #124]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	614b      	str	r3, [r1, #20]
 80054b2:	e011      	b.n	80054d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6892      	ldr	r2, [r2, #8]
 80054c4:	0211      	lsls	r1, r2, #8
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6912      	ldr	r2, [r2, #16]
 80054ca:	0852      	lsrs	r2, r2, #1
 80054cc:	3a01      	subs	r2, #1
 80054ce:	0652      	lsls	r2, r2, #25
 80054d0:	430a      	orrs	r2, r1
 80054d2:	4916      	ldr	r1, [pc, #88]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054d8:	4b14      	ldr	r3, [pc, #80]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a13      	ldr	r2, [pc, #76]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e4:	f7fc fe2c 	bl	8002140 <HAL_GetTick>
 80054e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054ea:	e009      	b.n	8005500 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054ec:	f7fc fe28 	bl	8002140 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d902      	bls.n	8005500 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	73fb      	strb	r3, [r7, #15]
          break;
 80054fe:	e005      	b.n	800550c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005500:	4b0a      	ldr	r3, [pc, #40]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0ef      	beq.n	80054ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005512:	4b06      	ldr	r3, [pc, #24]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	4904      	ldr	r1, [pc, #16]	; (800552c <RCCEx_PLLSAI2_Config+0x1b8>)
 800551c:	4313      	orrs	r3, r2
 800551e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40021000 	.word	0x40021000

08005530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e095      	b.n	800566e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	d108      	bne.n	800555c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005552:	d009      	beq.n	8005568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	61da      	str	r2, [r3, #28]
 800555a:	e005      	b.n	8005568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc fb16 	bl	8001bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055a8:	d902      	bls.n	80055b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	e002      	b.n	80055b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055be:	d007      	beq.n	80055d0 <HAL_SPI_Init+0xa0>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055c8:	d002      	beq.n	80055d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	ea42 0103 	orr.w	r1, r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	0c1b      	lsrs	r3, r3, #16
 800562c:	f003 0204 	and.w	r2, r3, #4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800564c:	ea42 0103 	orr.w	r1, r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b088      	sub	sp, #32
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	603b      	str	r3, [r7, #0]
 8005682:	4613      	mov	r3, r2
 8005684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_SPI_Transmit+0x22>
 8005694:	2302      	movs	r3, #2
 8005696:	e158      	b.n	800594a <HAL_SPI_Transmit+0x2d4>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056a0:	f7fc fd4e 	bl	8002140 <HAL_GetTick>
 80056a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d002      	beq.n	80056bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
 80056b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056ba:	e13d      	b.n	8005938 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <HAL_SPI_Transmit+0x52>
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056cc:	e134      	b.n	8005938 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2203      	movs	r2, #3
 80056d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	88fa      	ldrh	r2, [r7, #6]
 80056e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	88fa      	ldrh	r2, [r7, #6]
 80056ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005718:	d10f      	bne.n	800573a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005728:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005738:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d007      	beq.n	8005758 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005756:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005760:	d94b      	bls.n	80057fa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_SPI_Transmit+0xfa>
 800576a:	8afb      	ldrh	r3, [r7, #22]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d13e      	bne.n	80057ee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	881a      	ldrh	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	1c9a      	adds	r2, r3, #2
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005794:	e02b      	b.n	80057ee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d112      	bne.n	80057ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	881a      	ldrh	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	1c9a      	adds	r2, r3, #2
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057c8:	e011      	b.n	80057ee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ca:	f7fc fcb9 	bl	8002140 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d803      	bhi.n	80057e2 <HAL_SPI_Transmit+0x16c>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d102      	bne.n	80057e8 <HAL_SPI_Transmit+0x172>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057ec:	e0a4      	b.n	8005938 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1ce      	bne.n	8005796 <HAL_SPI_Transmit+0x120>
 80057f8:	e07c      	b.n	80058f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <HAL_SPI_Transmit+0x192>
 8005802:	8afb      	ldrh	r3, [r7, #22]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d170      	bne.n	80058ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b01      	cmp	r3, #1
 8005810:	d912      	bls.n	8005838 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	881a      	ldrh	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	1c9a      	adds	r2, r3, #2
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b02      	subs	r3, #2
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005836:	e058      	b.n	80058ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	7812      	ldrb	r2, [r2, #0]
 8005844:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800585e:	e044      	b.n	80058ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d12b      	bne.n	80058c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	d912      	bls.n	800589e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	881a      	ldrh	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	1c9a      	adds	r2, r3, #2
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b02      	subs	r3, #2
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800589c:	e025      	b.n	80058ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	330c      	adds	r3, #12
 80058a8:	7812      	ldrb	r2, [r2, #0]
 80058aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058c4:	e011      	b.n	80058ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058c6:	f7fc fc3b 	bl	8002140 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d803      	bhi.n	80058de <HAL_SPI_Transmit+0x268>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d102      	bne.n	80058e4 <HAL_SPI_Transmit+0x26e>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058e8:	e026      	b.n	8005938 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1b5      	bne.n	8005860 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f945 	bl	8005b88 <SPI_EndRxTxTransaction>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005912:	2300      	movs	r3, #0
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e000      	b.n	8005938 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005936:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005948:	7ffb      	ldrb	r3, [r7, #31]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005964:	f7fc fbec 	bl	8002140 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	1a9b      	subs	r3, r3, r2
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	4413      	add	r3, r2
 8005972:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005974:	f7fc fbe4 	bl	8002140 <HAL_GetTick>
 8005978:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800597a:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	015b      	lsls	r3, r3, #5
 8005980:	0d1b      	lsrs	r3, r3, #20
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	fb02 f303 	mul.w	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800598a:	e054      	b.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005992:	d050      	beq.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005994:	f7fc fbd4 	bl	8002140 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d902      	bls.n	80059aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d13d      	bne.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059c2:	d111      	bne.n	80059e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059cc:	d004      	beq.n	80059d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d6:	d107      	bne.n	80059e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f0:	d10f      	bne.n	8005a12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e017      	b.n	8005a56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	bf0c      	ite	eq
 8005a46:	2301      	moveq	r3, #1
 8005a48:	2300      	movne	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d19b      	bne.n	800598c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3720      	adds	r7, #32
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	200019a8 	.word	0x200019a8

08005a64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a72:	f7fc fb65 	bl	8002140 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	4413      	add	r3, r2
 8005a80:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a82:	f7fc fb5d 	bl	8002140 <HAL_GetTick>
 8005a86:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a88:	4b3e      	ldr	r3, [pc, #248]	; (8005b84 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	00da      	lsls	r2, r3, #3
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	0d1b      	lsrs	r3, r3, #20
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	fb02 f303 	mul.w	r3, r2, r3
 8005a9e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005aa0:	e062      	b.n	8005b68 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005aa8:	d109      	bne.n	8005abe <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d106      	bne.n	8005abe <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005abc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac4:	d050      	beq.n	8005b68 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ac6:	f7fc fb3b 	bl	8002140 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d902      	bls.n	8005adc <SPI_WaitFifoStateUntilTimeout+0x78>
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d13d      	bne.n	8005b58 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005aea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af4:	d111      	bne.n	8005b1a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afe:	d004      	beq.n	8005b0a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b08:	d107      	bne.n	8005b1a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b22:	d10f      	bne.n	8005b44 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e010      	b.n	8005b7a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d194      	bne.n	8005aa2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	200019a8 	.word	0x200019a8

08005b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff ff5f 	bl	8005a64 <SPI_WaitFifoStateUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb0:	f043 0220 	orr.w	r2, r3, #32
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e027      	b.n	8005c0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2180      	movs	r1, #128	; 0x80
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff fec4 	bl	8005954 <SPI_WaitFlagStateUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd6:	f043 0220 	orr.w	r2, r3, #32
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e014      	b.n	8005c0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff ff38 	bl	8005a64 <SPI_WaitFifoStateUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfe:	f043 0220 	orr.w	r2, r3, #32
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e000      	b.n	8005c0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e040      	b.n	8005ca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fc f994 	bl	8001f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2224      	movs	r2, #36	; 0x24
 8005c40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0201 	bic.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f8c0 	bl	8005dd8 <UART_SetConfig>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e022      	b.n	8005ca8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fb3e 	bl	80062ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fbc5 	bl	8006430 <UART_CheckIdleState>
 8005ca6:	4603      	mov	r3, r0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	f040 8082 	bne.w	8005dce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <HAL_UART_Transmit+0x26>
 8005cd0:	88fb      	ldrh	r3, [r7, #6]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e07a      	b.n	8005dd0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_UART_Transmit+0x38>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e073      	b.n	8005dd0 <HAL_UART_Transmit+0x120>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2221      	movs	r2, #33	; 0x21
 8005cfc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cfe:	f7fc fa1f 	bl	8002140 <HAL_GetTick>
 8005d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	88fa      	ldrh	r2, [r7, #6]
 8005d08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1c:	d108      	bne.n	8005d30 <HAL_UART_Transmit+0x80>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	e003      	b.n	8005d38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005d40:	e02d      	b.n	8005d9e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2180      	movs	r1, #128	; 0x80
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 fbb8 	bl	80064c2 <UART_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e039      	b.n	8005dd0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10b      	bne.n	8005d7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	881a      	ldrh	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	3302      	adds	r3, #2
 8005d76:	61bb      	str	r3, [r7, #24]
 8005d78:	e008      	b.n	8005d8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	781a      	ldrb	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	b292      	uxth	r2, r2
 8005d84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1cb      	bne.n	8005d42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2140      	movs	r1, #64	; 0x40
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fb84 	bl	80064c2 <UART_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e005      	b.n	8005dd0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e000      	b.n	8005dd0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005dce:	2302      	movs	r3, #2
  }
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3720      	adds	r7, #32
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dd8:	b5b0      	push	{r4, r5, r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4bad      	ldr	r3, [pc, #692]	; (80060b8 <UART_SetConfig+0x2e0>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	69f9      	ldr	r1, [r7, #28]
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4aa2      	ldr	r2, [pc, #648]	; (80060bc <UART_SetConfig+0x2e4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a99      	ldr	r2, [pc, #612]	; (80060c0 <UART_SetConfig+0x2e8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d121      	bne.n	8005ea2 <UART_SetConfig+0xca>
 8005e5e:	4b99      	ldr	r3, [pc, #612]	; (80060c4 <UART_SetConfig+0x2ec>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d817      	bhi.n	8005e9c <UART_SetConfig+0xc4>
 8005e6c:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <UART_SetConfig+0x9c>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005e85 	.word	0x08005e85
 8005e78:	08005e91 	.word	0x08005e91
 8005e7c:	08005e8b 	.word	0x08005e8b
 8005e80:	08005e97 	.word	0x08005e97
 8005e84:	2301      	movs	r3, #1
 8005e86:	76fb      	strb	r3, [r7, #27]
 8005e88:	e0e7      	b.n	800605a <UART_SetConfig+0x282>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	76fb      	strb	r3, [r7, #27]
 8005e8e:	e0e4      	b.n	800605a <UART_SetConfig+0x282>
 8005e90:	2304      	movs	r3, #4
 8005e92:	76fb      	strb	r3, [r7, #27]
 8005e94:	e0e1      	b.n	800605a <UART_SetConfig+0x282>
 8005e96:	2308      	movs	r3, #8
 8005e98:	76fb      	strb	r3, [r7, #27]
 8005e9a:	e0de      	b.n	800605a <UART_SetConfig+0x282>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	76fb      	strb	r3, [r7, #27]
 8005ea0:	e0db      	b.n	800605a <UART_SetConfig+0x282>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a88      	ldr	r2, [pc, #544]	; (80060c8 <UART_SetConfig+0x2f0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d132      	bne.n	8005f12 <UART_SetConfig+0x13a>
 8005eac:	4b85      	ldr	r3, [pc, #532]	; (80060c4 <UART_SetConfig+0x2ec>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb2:	f003 030c 	and.w	r3, r3, #12
 8005eb6:	2b0c      	cmp	r3, #12
 8005eb8:	d828      	bhi.n	8005f0c <UART_SetConfig+0x134>
 8005eba:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <UART_SetConfig+0xe8>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005ef5 	.word	0x08005ef5
 8005ec4:	08005f0d 	.word	0x08005f0d
 8005ec8:	08005f0d 	.word	0x08005f0d
 8005ecc:	08005f0d 	.word	0x08005f0d
 8005ed0:	08005f01 	.word	0x08005f01
 8005ed4:	08005f0d 	.word	0x08005f0d
 8005ed8:	08005f0d 	.word	0x08005f0d
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005efb 	.word	0x08005efb
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f0d 	.word	0x08005f0d
 8005ef0:	08005f07 	.word	0x08005f07
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	76fb      	strb	r3, [r7, #27]
 8005ef8:	e0af      	b.n	800605a <UART_SetConfig+0x282>
 8005efa:	2302      	movs	r3, #2
 8005efc:	76fb      	strb	r3, [r7, #27]
 8005efe:	e0ac      	b.n	800605a <UART_SetConfig+0x282>
 8005f00:	2304      	movs	r3, #4
 8005f02:	76fb      	strb	r3, [r7, #27]
 8005f04:	e0a9      	b.n	800605a <UART_SetConfig+0x282>
 8005f06:	2308      	movs	r3, #8
 8005f08:	76fb      	strb	r3, [r7, #27]
 8005f0a:	e0a6      	b.n	800605a <UART_SetConfig+0x282>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	76fb      	strb	r3, [r7, #27]
 8005f10:	e0a3      	b.n	800605a <UART_SetConfig+0x282>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a6d      	ldr	r2, [pc, #436]	; (80060cc <UART_SetConfig+0x2f4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d120      	bne.n	8005f5e <UART_SetConfig+0x186>
 8005f1c:	4b69      	ldr	r3, [pc, #420]	; (80060c4 <UART_SetConfig+0x2ec>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f26:	2b30      	cmp	r3, #48	; 0x30
 8005f28:	d013      	beq.n	8005f52 <UART_SetConfig+0x17a>
 8005f2a:	2b30      	cmp	r3, #48	; 0x30
 8005f2c:	d814      	bhi.n	8005f58 <UART_SetConfig+0x180>
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d009      	beq.n	8005f46 <UART_SetConfig+0x16e>
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d810      	bhi.n	8005f58 <UART_SetConfig+0x180>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <UART_SetConfig+0x168>
 8005f3a:	2b10      	cmp	r3, #16
 8005f3c:	d006      	beq.n	8005f4c <UART_SetConfig+0x174>
 8005f3e:	e00b      	b.n	8005f58 <UART_SetConfig+0x180>
 8005f40:	2300      	movs	r3, #0
 8005f42:	76fb      	strb	r3, [r7, #27]
 8005f44:	e089      	b.n	800605a <UART_SetConfig+0x282>
 8005f46:	2302      	movs	r3, #2
 8005f48:	76fb      	strb	r3, [r7, #27]
 8005f4a:	e086      	b.n	800605a <UART_SetConfig+0x282>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	76fb      	strb	r3, [r7, #27]
 8005f50:	e083      	b.n	800605a <UART_SetConfig+0x282>
 8005f52:	2308      	movs	r3, #8
 8005f54:	76fb      	strb	r3, [r7, #27]
 8005f56:	e080      	b.n	800605a <UART_SetConfig+0x282>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	76fb      	strb	r3, [r7, #27]
 8005f5c:	e07d      	b.n	800605a <UART_SetConfig+0x282>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a5b      	ldr	r2, [pc, #364]	; (80060d0 <UART_SetConfig+0x2f8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d120      	bne.n	8005faa <UART_SetConfig+0x1d2>
 8005f68:	4b56      	ldr	r3, [pc, #344]	; (80060c4 <UART_SetConfig+0x2ec>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f72:	2bc0      	cmp	r3, #192	; 0xc0
 8005f74:	d013      	beq.n	8005f9e <UART_SetConfig+0x1c6>
 8005f76:	2bc0      	cmp	r3, #192	; 0xc0
 8005f78:	d814      	bhi.n	8005fa4 <UART_SetConfig+0x1cc>
 8005f7a:	2b80      	cmp	r3, #128	; 0x80
 8005f7c:	d009      	beq.n	8005f92 <UART_SetConfig+0x1ba>
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d810      	bhi.n	8005fa4 <UART_SetConfig+0x1cc>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <UART_SetConfig+0x1b4>
 8005f86:	2b40      	cmp	r3, #64	; 0x40
 8005f88:	d006      	beq.n	8005f98 <UART_SetConfig+0x1c0>
 8005f8a:	e00b      	b.n	8005fa4 <UART_SetConfig+0x1cc>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	76fb      	strb	r3, [r7, #27]
 8005f90:	e063      	b.n	800605a <UART_SetConfig+0x282>
 8005f92:	2302      	movs	r3, #2
 8005f94:	76fb      	strb	r3, [r7, #27]
 8005f96:	e060      	b.n	800605a <UART_SetConfig+0x282>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	76fb      	strb	r3, [r7, #27]
 8005f9c:	e05d      	b.n	800605a <UART_SetConfig+0x282>
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	76fb      	strb	r3, [r7, #27]
 8005fa2:	e05a      	b.n	800605a <UART_SetConfig+0x282>
 8005fa4:	2310      	movs	r3, #16
 8005fa6:	76fb      	strb	r3, [r7, #27]
 8005fa8:	e057      	b.n	800605a <UART_SetConfig+0x282>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a49      	ldr	r2, [pc, #292]	; (80060d4 <UART_SetConfig+0x2fc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d125      	bne.n	8006000 <UART_SetConfig+0x228>
 8005fb4:	4b43      	ldr	r3, [pc, #268]	; (80060c4 <UART_SetConfig+0x2ec>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fc2:	d017      	beq.n	8005ff4 <UART_SetConfig+0x21c>
 8005fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fc8:	d817      	bhi.n	8005ffa <UART_SetConfig+0x222>
 8005fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fce:	d00b      	beq.n	8005fe8 <UART_SetConfig+0x210>
 8005fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd4:	d811      	bhi.n	8005ffa <UART_SetConfig+0x222>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <UART_SetConfig+0x20a>
 8005fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fde:	d006      	beq.n	8005fee <UART_SetConfig+0x216>
 8005fe0:	e00b      	b.n	8005ffa <UART_SetConfig+0x222>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	76fb      	strb	r3, [r7, #27]
 8005fe6:	e038      	b.n	800605a <UART_SetConfig+0x282>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	76fb      	strb	r3, [r7, #27]
 8005fec:	e035      	b.n	800605a <UART_SetConfig+0x282>
 8005fee:	2304      	movs	r3, #4
 8005ff0:	76fb      	strb	r3, [r7, #27]
 8005ff2:	e032      	b.n	800605a <UART_SetConfig+0x282>
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	76fb      	strb	r3, [r7, #27]
 8005ff8:	e02f      	b.n	800605a <UART_SetConfig+0x282>
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	76fb      	strb	r3, [r7, #27]
 8005ffe:	e02c      	b.n	800605a <UART_SetConfig+0x282>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2d      	ldr	r2, [pc, #180]	; (80060bc <UART_SetConfig+0x2e4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d125      	bne.n	8006056 <UART_SetConfig+0x27e>
 800600a:	4b2e      	ldr	r3, [pc, #184]	; (80060c4 <UART_SetConfig+0x2ec>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006018:	d017      	beq.n	800604a <UART_SetConfig+0x272>
 800601a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800601e:	d817      	bhi.n	8006050 <UART_SetConfig+0x278>
 8006020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006024:	d00b      	beq.n	800603e <UART_SetConfig+0x266>
 8006026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602a:	d811      	bhi.n	8006050 <UART_SetConfig+0x278>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <UART_SetConfig+0x260>
 8006030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006034:	d006      	beq.n	8006044 <UART_SetConfig+0x26c>
 8006036:	e00b      	b.n	8006050 <UART_SetConfig+0x278>
 8006038:	2300      	movs	r3, #0
 800603a:	76fb      	strb	r3, [r7, #27]
 800603c:	e00d      	b.n	800605a <UART_SetConfig+0x282>
 800603e:	2302      	movs	r3, #2
 8006040:	76fb      	strb	r3, [r7, #27]
 8006042:	e00a      	b.n	800605a <UART_SetConfig+0x282>
 8006044:	2304      	movs	r3, #4
 8006046:	76fb      	strb	r3, [r7, #27]
 8006048:	e007      	b.n	800605a <UART_SetConfig+0x282>
 800604a:	2308      	movs	r3, #8
 800604c:	76fb      	strb	r3, [r7, #27]
 800604e:	e004      	b.n	800605a <UART_SetConfig+0x282>
 8006050:	2310      	movs	r3, #16
 8006052:	76fb      	strb	r3, [r7, #27]
 8006054:	e001      	b.n	800605a <UART_SetConfig+0x282>
 8006056:	2310      	movs	r3, #16
 8006058:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a17      	ldr	r2, [pc, #92]	; (80060bc <UART_SetConfig+0x2e4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	f040 8087 	bne.w	8006174 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006066:	7efb      	ldrb	r3, [r7, #27]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d837      	bhi.n	80060dc <UART_SetConfig+0x304>
 800606c:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <UART_SetConfig+0x29c>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	08006099 	.word	0x08006099
 8006078:	080060dd 	.word	0x080060dd
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060dd 	.word	0x080060dd
 8006084:	080060a7 	.word	0x080060a7
 8006088:	080060dd 	.word	0x080060dd
 800608c:	080060dd 	.word	0x080060dd
 8006090:	080060dd 	.word	0x080060dd
 8006094:	080060af 	.word	0x080060af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006098:	f7fe fd02 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 800609c:	6178      	str	r0, [r7, #20]
        break;
 800609e:	e022      	b.n	80060e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a0:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <UART_SetConfig+0x300>)
 80060a2:	617b      	str	r3, [r7, #20]
        break;
 80060a4:	e01f      	b.n	80060e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060a6:	f7fe fc63 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 80060aa:	6178      	str	r0, [r7, #20]
        break;
 80060ac:	e01b      	b.n	80060e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b2:	617b      	str	r3, [r7, #20]
        break;
 80060b4:	e017      	b.n	80060e6 <UART_SetConfig+0x30e>
 80060b6:	bf00      	nop
 80060b8:	efff69f3 	.word	0xefff69f3
 80060bc:	40008000 	.word	0x40008000
 80060c0:	40013800 	.word	0x40013800
 80060c4:	40021000 	.word	0x40021000
 80060c8:	40004400 	.word	0x40004400
 80060cc:	40004800 	.word	0x40004800
 80060d0:	40004c00 	.word	0x40004c00
 80060d4:	40005000 	.word	0x40005000
 80060d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	76bb      	strb	r3, [r7, #26]
        break;
 80060e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80f1 	beq.w	80062d0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	4413      	add	r3, r2
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d305      	bcc.n	800610a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	429a      	cmp	r2, r3
 8006108:	d902      	bls.n	8006110 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	76bb      	strb	r3, [r7, #26]
 800610e:	e0df      	b.n	80062d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4618      	mov	r0, r3
 8006114:	f04f 0100 	mov.w	r1, #0
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	020b      	lsls	r3, r1, #8
 8006122:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006126:	0202      	lsls	r2, r0, #8
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	6849      	ldr	r1, [r1, #4]
 800612c:	0849      	lsrs	r1, r1, #1
 800612e:	4608      	mov	r0, r1
 8006130:	f04f 0100 	mov.w	r1, #0
 8006134:	1814      	adds	r4, r2, r0
 8006136:	eb43 0501 	adc.w	r5, r3, r1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	461a      	mov	r2, r3
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	4620      	mov	r0, r4
 8006146:	4629      	mov	r1, r5
 8006148:	f7fa fd76 	bl	8000c38 <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4613      	mov	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615a:	d308      	bcc.n	800616e <UART_SetConfig+0x396>
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006162:	d204      	bcs.n	800616e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	60da      	str	r2, [r3, #12]
 800616c:	e0b0      	b.n	80062d0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	76bb      	strb	r3, [r7, #26]
 8006172:	e0ad      	b.n	80062d0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617c:	d15c      	bne.n	8006238 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800617e:	7efb      	ldrb	r3, [r7, #27]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d828      	bhi.n	80061d6 <UART_SetConfig+0x3fe>
 8006184:	a201      	add	r2, pc, #4	; (adr r2, 800618c <UART_SetConfig+0x3b4>)
 8006186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618a:	bf00      	nop
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061b9 	.word	0x080061b9
 8006194:	080061c1 	.word	0x080061c1
 8006198:	080061d7 	.word	0x080061d7
 800619c:	080061c7 	.word	0x080061c7
 80061a0:	080061d7 	.word	0x080061d7
 80061a4:	080061d7 	.word	0x080061d7
 80061a8:	080061d7 	.word	0x080061d7
 80061ac:	080061cf 	.word	0x080061cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b0:	f7fe fc76 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 80061b4:	6178      	str	r0, [r7, #20]
        break;
 80061b6:	e013      	b.n	80061e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b8:	f7fe fc88 	bl	8004acc <HAL_RCC_GetPCLK2Freq>
 80061bc:	6178      	str	r0, [r7, #20]
        break;
 80061be:	e00f      	b.n	80061e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c0:	4b49      	ldr	r3, [pc, #292]	; (80062e8 <UART_SetConfig+0x510>)
 80061c2:	617b      	str	r3, [r7, #20]
        break;
 80061c4:	e00c      	b.n	80061e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c6:	f7fe fbd3 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 80061ca:	6178      	str	r0, [r7, #20]
        break;
 80061cc:	e008      	b.n	80061e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d2:	617b      	str	r3, [r7, #20]
        break;
 80061d4:	e004      	b.n	80061e0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	76bb      	strb	r3, [r7, #26]
        break;
 80061de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d074      	beq.n	80062d0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	005a      	lsls	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	441a      	add	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b0f      	cmp	r3, #15
 8006202:	d916      	bls.n	8006232 <UART_SetConfig+0x45a>
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620a:	d212      	bcs.n	8006232 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f023 030f 	bic.w	r3, r3, #15
 8006214:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	085b      	lsrs	r3, r3, #1
 800621a:	b29b      	uxth	r3, r3
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	b29a      	uxth	r2, r3
 8006222:	89fb      	ldrh	r3, [r7, #14]
 8006224:	4313      	orrs	r3, r2
 8006226:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	89fa      	ldrh	r2, [r7, #14]
 800622e:	60da      	str	r2, [r3, #12]
 8006230:	e04e      	b.n	80062d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	76bb      	strb	r3, [r7, #26]
 8006236:	e04b      	b.n	80062d0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006238:	7efb      	ldrb	r3, [r7, #27]
 800623a:	2b08      	cmp	r3, #8
 800623c:	d827      	bhi.n	800628e <UART_SetConfig+0x4b6>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <UART_SetConfig+0x46c>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006269 	.word	0x08006269
 8006248:	08006271 	.word	0x08006271
 800624c:	08006279 	.word	0x08006279
 8006250:	0800628f 	.word	0x0800628f
 8006254:	0800627f 	.word	0x0800627f
 8006258:	0800628f 	.word	0x0800628f
 800625c:	0800628f 	.word	0x0800628f
 8006260:	0800628f 	.word	0x0800628f
 8006264:	08006287 	.word	0x08006287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006268:	f7fe fc1a 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 800626c:	6178      	str	r0, [r7, #20]
        break;
 800626e:	e013      	b.n	8006298 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006270:	f7fe fc2c 	bl	8004acc <HAL_RCC_GetPCLK2Freq>
 8006274:	6178      	str	r0, [r7, #20]
        break;
 8006276:	e00f      	b.n	8006298 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006278:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <UART_SetConfig+0x510>)
 800627a:	617b      	str	r3, [r7, #20]
        break;
 800627c:	e00c      	b.n	8006298 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800627e:	f7fe fb77 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 8006282:	6178      	str	r0, [r7, #20]
        break;
 8006284:	e008      	b.n	8006298 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800628a:	617b      	str	r3, [r7, #20]
        break;
 800628c:	e004      	b.n	8006298 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	76bb      	strb	r3, [r7, #26]
        break;
 8006296:	bf00      	nop
    }

    if (pclk != 0U)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d018      	beq.n	80062d0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	085a      	lsrs	r2, r3, #1
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	441a      	add	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b0f      	cmp	r3, #15
 80062b8:	d908      	bls.n	80062cc <UART_SetConfig+0x4f4>
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d204      	bcs.n	80062cc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	60da      	str	r2, [r3, #12]
 80062ca:	e001      	b.n	80062d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80062dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bdb0      	pop	{r4, r5, r7, pc}
 80062e6:	bf00      	nop
 80062e8:	00f42400 	.word	0x00f42400

080062ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01a      	beq.n	8006402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ea:	d10a      	bne.n	8006402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	605a      	str	r2, [r3, #4]
  }
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af02      	add	r7, sp, #8
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006440:	f7fb fe7e 	bl	8002140 <HAL_GetTick>
 8006444:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b08      	cmp	r3, #8
 8006452:	d10e      	bne.n	8006472 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f82d 	bl	80064c2 <UART_WaitOnFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e023      	b.n	80064ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b04      	cmp	r3, #4
 800647e:	d10e      	bne.n	800649e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f817 	bl	80064c2 <UART_WaitOnFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e00d      	b.n	80064ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	603b      	str	r3, [r7, #0]
 80064ce:	4613      	mov	r3, r2
 80064d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d2:	e05e      	b.n	8006592 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d05a      	beq.n	8006592 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064dc:	f7fb fe30 	bl	8002140 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d11b      	bne.n	800652a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006500:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e043      	b.n	80065b2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d02c      	beq.n	8006592 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006546:	d124      	bne.n	8006592 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006550:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006560:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0201 	bic.w	r2, r2, #1
 8006570:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e00f      	b.n	80065b2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4013      	ands	r3, r2
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	429a      	cmp	r2, r3
 80065a0:	bf0c      	ite	eq
 80065a2:	2301      	moveq	r3, #1
 80065a4:	2300      	movne	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d091      	beq.n	80064d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <__errno>:
 80065bc:	4b01      	ldr	r3, [pc, #4]	; (80065c4 <__errno+0x8>)
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	200019b4 	.word	0x200019b4

080065c8 <__libc_init_array>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	4d0d      	ldr	r5, [pc, #52]	; (8006600 <__libc_init_array+0x38>)
 80065cc:	4c0d      	ldr	r4, [pc, #52]	; (8006604 <__libc_init_array+0x3c>)
 80065ce:	1b64      	subs	r4, r4, r5
 80065d0:	10a4      	asrs	r4, r4, #2
 80065d2:	2600      	movs	r6, #0
 80065d4:	42a6      	cmp	r6, r4
 80065d6:	d109      	bne.n	80065ec <__libc_init_array+0x24>
 80065d8:	4d0b      	ldr	r5, [pc, #44]	; (8006608 <__libc_init_array+0x40>)
 80065da:	4c0c      	ldr	r4, [pc, #48]	; (800660c <__libc_init_array+0x44>)
 80065dc:	f001 fbe6 	bl	8007dac <_init>
 80065e0:	1b64      	subs	r4, r4, r5
 80065e2:	10a4      	asrs	r4, r4, #2
 80065e4:	2600      	movs	r6, #0
 80065e6:	42a6      	cmp	r6, r4
 80065e8:	d105      	bne.n	80065f6 <__libc_init_array+0x2e>
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f0:	4798      	blx	r3
 80065f2:	3601      	adds	r6, #1
 80065f4:	e7ee      	b.n	80065d4 <__libc_init_array+0xc>
 80065f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fa:	4798      	blx	r3
 80065fc:	3601      	adds	r6, #1
 80065fe:	e7f2      	b.n	80065e6 <__libc_init_array+0x1e>
 8006600:	08008070 	.word	0x08008070
 8006604:	08008070 	.word	0x08008070
 8006608:	08008070 	.word	0x08008070
 800660c:	08008074 	.word	0x08008074

08006610 <memset>:
 8006610:	4402      	add	r2, r0
 8006612:	4603      	mov	r3, r0
 8006614:	4293      	cmp	r3, r2
 8006616:	d100      	bne.n	800661a <memset+0xa>
 8006618:	4770      	bx	lr
 800661a:	f803 1b01 	strb.w	r1, [r3], #1
 800661e:	e7f9      	b.n	8006614 <memset+0x4>

08006620 <srand>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4b10      	ldr	r3, [pc, #64]	; (8006664 <srand+0x44>)
 8006624:	681d      	ldr	r5, [r3, #0]
 8006626:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006628:	4604      	mov	r4, r0
 800662a:	b9b3      	cbnz	r3, 800665a <srand+0x3a>
 800662c:	2018      	movs	r0, #24
 800662e:	f000 f8c1 	bl	80067b4 <malloc>
 8006632:	4602      	mov	r2, r0
 8006634:	63a8      	str	r0, [r5, #56]	; 0x38
 8006636:	b920      	cbnz	r0, 8006642 <srand+0x22>
 8006638:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <srand+0x48>)
 800663a:	480c      	ldr	r0, [pc, #48]	; (800666c <srand+0x4c>)
 800663c:	2142      	movs	r1, #66	; 0x42
 800663e:	f000 f877 	bl	8006730 <__assert_func>
 8006642:	490b      	ldr	r1, [pc, #44]	; (8006670 <srand+0x50>)
 8006644:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <srand+0x54>)
 8006646:	e9c0 1300 	strd	r1, r3, [r0]
 800664a:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <srand+0x58>)
 800664c:	6083      	str	r3, [r0, #8]
 800664e:	230b      	movs	r3, #11
 8006650:	8183      	strh	r3, [r0, #12]
 8006652:	2100      	movs	r1, #0
 8006654:	2001      	movs	r0, #1
 8006656:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800665a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800665c:	2200      	movs	r2, #0
 800665e:	611c      	str	r4, [r3, #16]
 8006660:	615a      	str	r2, [r3, #20]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	200019b4 	.word	0x200019b4
 8006668:	08007eac 	.word	0x08007eac
 800666c:	08007ec3 	.word	0x08007ec3
 8006670:	abcd330e 	.word	0xabcd330e
 8006674:	e66d1234 	.word	0xe66d1234
 8006678:	0005deec 	.word	0x0005deec

0800667c <rand>:
 800667c:	4b17      	ldr	r3, [pc, #92]	; (80066dc <rand+0x60>)
 800667e:	b510      	push	{r4, lr}
 8006680:	681c      	ldr	r4, [r3, #0]
 8006682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006684:	b9b3      	cbnz	r3, 80066b4 <rand+0x38>
 8006686:	2018      	movs	r0, #24
 8006688:	f000 f894 	bl	80067b4 <malloc>
 800668c:	63a0      	str	r0, [r4, #56]	; 0x38
 800668e:	b928      	cbnz	r0, 800669c <rand+0x20>
 8006690:	4602      	mov	r2, r0
 8006692:	4b13      	ldr	r3, [pc, #76]	; (80066e0 <rand+0x64>)
 8006694:	4813      	ldr	r0, [pc, #76]	; (80066e4 <rand+0x68>)
 8006696:	214e      	movs	r1, #78	; 0x4e
 8006698:	f000 f84a 	bl	8006730 <__assert_func>
 800669c:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <rand+0x6c>)
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <rand+0x70>)
 80066a0:	e9c0 2300 	strd	r2, r3, [r0]
 80066a4:	4b12      	ldr	r3, [pc, #72]	; (80066f0 <rand+0x74>)
 80066a6:	6083      	str	r3, [r0, #8]
 80066a8:	230b      	movs	r3, #11
 80066aa:	8183      	strh	r3, [r0, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	2300      	movs	r3, #0
 80066b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80066b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80066b6:	480f      	ldr	r0, [pc, #60]	; (80066f4 <rand+0x78>)
 80066b8:	690a      	ldr	r2, [r1, #16]
 80066ba:	694b      	ldr	r3, [r1, #20]
 80066bc:	4c0e      	ldr	r4, [pc, #56]	; (80066f8 <rand+0x7c>)
 80066be:	4350      	muls	r0, r2
 80066c0:	fb04 0003 	mla	r0, r4, r3, r0
 80066c4:	fba2 3404 	umull	r3, r4, r2, r4
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	4404      	add	r4, r0
 80066cc:	f144 0000 	adc.w	r0, r4, #0
 80066d0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80066d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80066d8:	bd10      	pop	{r4, pc}
 80066da:	bf00      	nop
 80066dc:	200019b4 	.word	0x200019b4
 80066e0:	08007eac 	.word	0x08007eac
 80066e4:	08007ec3 	.word	0x08007ec3
 80066e8:	abcd330e 	.word	0xabcd330e
 80066ec:	e66d1234 	.word	0xe66d1234
 80066f0:	0005deec 	.word	0x0005deec
 80066f4:	5851f42d 	.word	0x5851f42d
 80066f8:	4c957f2d 	.word	0x4c957f2d

080066fc <time>:
 80066fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <time+0x30>)
 8006700:	2200      	movs	r2, #0
 8006702:	4669      	mov	r1, sp
 8006704:	4604      	mov	r4, r0
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	f000 f842 	bl	8006790 <_gettimeofday_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	bfbe      	ittt	lt
 8006710:	f04f 32ff 	movlt.w	r2, #4294967295
 8006714:	f04f 33ff 	movlt.w	r3, #4294967295
 8006718:	e9cd 2300 	strdlt	r2, r3, [sp]
 800671c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006720:	b10c      	cbz	r4, 8006726 <time+0x2a>
 8006722:	e9c4 0100 	strd	r0, r1, [r4]
 8006726:	b004      	add	sp, #16
 8006728:	bd10      	pop	{r4, pc}
 800672a:	bf00      	nop
 800672c:	200019b4 	.word	0x200019b4

08006730 <__assert_func>:
 8006730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006732:	4614      	mov	r4, r2
 8006734:	461a      	mov	r2, r3
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <__assert_func+0x2c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4605      	mov	r5, r0
 800673c:	68d8      	ldr	r0, [r3, #12]
 800673e:	b14c      	cbz	r4, 8006754 <__assert_func+0x24>
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <__assert_func+0x30>)
 8006742:	9100      	str	r1, [sp, #0]
 8006744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006748:	4906      	ldr	r1, [pc, #24]	; (8006764 <__assert_func+0x34>)
 800674a:	462b      	mov	r3, r5
 800674c:	f000 f80e 	bl	800676c <fiprintf>
 8006750:	f000 fca0 	bl	8007094 <abort>
 8006754:	4b04      	ldr	r3, [pc, #16]	; (8006768 <__assert_func+0x38>)
 8006756:	461c      	mov	r4, r3
 8006758:	e7f3      	b.n	8006742 <__assert_func+0x12>
 800675a:	bf00      	nop
 800675c:	200019b4 	.word	0x200019b4
 8006760:	08007f22 	.word	0x08007f22
 8006764:	08007f2f 	.word	0x08007f2f
 8006768:	08007f5d 	.word	0x08007f5d

0800676c <fiprintf>:
 800676c:	b40e      	push	{r1, r2, r3}
 800676e:	b503      	push	{r0, r1, lr}
 8006770:	4601      	mov	r1, r0
 8006772:	ab03      	add	r3, sp, #12
 8006774:	4805      	ldr	r0, [pc, #20]	; (800678c <fiprintf+0x20>)
 8006776:	f853 2b04 	ldr.w	r2, [r3], #4
 800677a:	6800      	ldr	r0, [r0, #0]
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	f000 f8f5 	bl	800696c <_vfiprintf_r>
 8006782:	b002      	add	sp, #8
 8006784:	f85d eb04 	ldr.w	lr, [sp], #4
 8006788:	b003      	add	sp, #12
 800678a:	4770      	bx	lr
 800678c:	200019b4 	.word	0x200019b4

08006790 <_gettimeofday_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4d07      	ldr	r5, [pc, #28]	; (80067b0 <_gettimeofday_r+0x20>)
 8006794:	2300      	movs	r3, #0
 8006796:	4604      	mov	r4, r0
 8006798:	4608      	mov	r0, r1
 800679a:	4611      	mov	r1, r2
 800679c:	602b      	str	r3, [r5, #0]
 800679e:	f001 fafd 	bl	8007d9c <_gettimeofday>
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	d102      	bne.n	80067ac <_gettimeofday_r+0x1c>
 80067a6:	682b      	ldr	r3, [r5, #0]
 80067a8:	b103      	cbz	r3, 80067ac <_gettimeofday_r+0x1c>
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	bd38      	pop	{r3, r4, r5, pc}
 80067ae:	bf00      	nop
 80067b0:	2000bbe4 	.word	0x2000bbe4

080067b4 <malloc>:
 80067b4:	4b02      	ldr	r3, [pc, #8]	; (80067c0 <malloc+0xc>)
 80067b6:	4601      	mov	r1, r0
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	f000 b853 	b.w	8006864 <_malloc_r>
 80067be:	bf00      	nop
 80067c0:	200019b4 	.word	0x200019b4

080067c4 <_free_r>:
 80067c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067c6:	2900      	cmp	r1, #0
 80067c8:	d048      	beq.n	800685c <_free_r+0x98>
 80067ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ce:	9001      	str	r0, [sp, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f1a1 0404 	sub.w	r4, r1, #4
 80067d6:	bfb8      	it	lt
 80067d8:	18e4      	addlt	r4, r4, r3
 80067da:	f000 fe81 	bl	80074e0 <__malloc_lock>
 80067de:	4a20      	ldr	r2, [pc, #128]	; (8006860 <_free_r+0x9c>)
 80067e0:	9801      	ldr	r0, [sp, #4]
 80067e2:	6813      	ldr	r3, [r2, #0]
 80067e4:	4615      	mov	r5, r2
 80067e6:	b933      	cbnz	r3, 80067f6 <_free_r+0x32>
 80067e8:	6063      	str	r3, [r4, #4]
 80067ea:	6014      	str	r4, [r2, #0]
 80067ec:	b003      	add	sp, #12
 80067ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067f2:	f000 be7b 	b.w	80074ec <__malloc_unlock>
 80067f6:	42a3      	cmp	r3, r4
 80067f8:	d90b      	bls.n	8006812 <_free_r+0x4e>
 80067fa:	6821      	ldr	r1, [r4, #0]
 80067fc:	1862      	adds	r2, r4, r1
 80067fe:	4293      	cmp	r3, r2
 8006800:	bf04      	itt	eq
 8006802:	681a      	ldreq	r2, [r3, #0]
 8006804:	685b      	ldreq	r3, [r3, #4]
 8006806:	6063      	str	r3, [r4, #4]
 8006808:	bf04      	itt	eq
 800680a:	1852      	addeq	r2, r2, r1
 800680c:	6022      	streq	r2, [r4, #0]
 800680e:	602c      	str	r4, [r5, #0]
 8006810:	e7ec      	b.n	80067ec <_free_r+0x28>
 8006812:	461a      	mov	r2, r3
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	b10b      	cbz	r3, 800681c <_free_r+0x58>
 8006818:	42a3      	cmp	r3, r4
 800681a:	d9fa      	bls.n	8006812 <_free_r+0x4e>
 800681c:	6811      	ldr	r1, [r2, #0]
 800681e:	1855      	adds	r5, r2, r1
 8006820:	42a5      	cmp	r5, r4
 8006822:	d10b      	bne.n	800683c <_free_r+0x78>
 8006824:	6824      	ldr	r4, [r4, #0]
 8006826:	4421      	add	r1, r4
 8006828:	1854      	adds	r4, r2, r1
 800682a:	42a3      	cmp	r3, r4
 800682c:	6011      	str	r1, [r2, #0]
 800682e:	d1dd      	bne.n	80067ec <_free_r+0x28>
 8006830:	681c      	ldr	r4, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	6053      	str	r3, [r2, #4]
 8006836:	4421      	add	r1, r4
 8006838:	6011      	str	r1, [r2, #0]
 800683a:	e7d7      	b.n	80067ec <_free_r+0x28>
 800683c:	d902      	bls.n	8006844 <_free_r+0x80>
 800683e:	230c      	movs	r3, #12
 8006840:	6003      	str	r3, [r0, #0]
 8006842:	e7d3      	b.n	80067ec <_free_r+0x28>
 8006844:	6825      	ldr	r5, [r4, #0]
 8006846:	1961      	adds	r1, r4, r5
 8006848:	428b      	cmp	r3, r1
 800684a:	bf04      	itt	eq
 800684c:	6819      	ldreq	r1, [r3, #0]
 800684e:	685b      	ldreq	r3, [r3, #4]
 8006850:	6063      	str	r3, [r4, #4]
 8006852:	bf04      	itt	eq
 8006854:	1949      	addeq	r1, r1, r5
 8006856:	6021      	streq	r1, [r4, #0]
 8006858:	6054      	str	r4, [r2, #4]
 800685a:	e7c7      	b.n	80067ec <_free_r+0x28>
 800685c:	b003      	add	sp, #12
 800685e:	bd30      	pop	{r4, r5, pc}
 8006860:	2000ba44 	.word	0x2000ba44

08006864 <_malloc_r>:
 8006864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006866:	1ccd      	adds	r5, r1, #3
 8006868:	f025 0503 	bic.w	r5, r5, #3
 800686c:	3508      	adds	r5, #8
 800686e:	2d0c      	cmp	r5, #12
 8006870:	bf38      	it	cc
 8006872:	250c      	movcc	r5, #12
 8006874:	2d00      	cmp	r5, #0
 8006876:	4606      	mov	r6, r0
 8006878:	db01      	blt.n	800687e <_malloc_r+0x1a>
 800687a:	42a9      	cmp	r1, r5
 800687c:	d903      	bls.n	8006886 <_malloc_r+0x22>
 800687e:	230c      	movs	r3, #12
 8006880:	6033      	str	r3, [r6, #0]
 8006882:	2000      	movs	r0, #0
 8006884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006886:	f000 fe2b 	bl	80074e0 <__malloc_lock>
 800688a:	4921      	ldr	r1, [pc, #132]	; (8006910 <_malloc_r+0xac>)
 800688c:	680a      	ldr	r2, [r1, #0]
 800688e:	4614      	mov	r4, r2
 8006890:	b99c      	cbnz	r4, 80068ba <_malloc_r+0x56>
 8006892:	4f20      	ldr	r7, [pc, #128]	; (8006914 <_malloc_r+0xb0>)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	b923      	cbnz	r3, 80068a2 <_malloc_r+0x3e>
 8006898:	4621      	mov	r1, r4
 800689a:	4630      	mov	r0, r6
 800689c:	f000 fb2a 	bl	8006ef4 <_sbrk_r>
 80068a0:	6038      	str	r0, [r7, #0]
 80068a2:	4629      	mov	r1, r5
 80068a4:	4630      	mov	r0, r6
 80068a6:	f000 fb25 	bl	8006ef4 <_sbrk_r>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d123      	bne.n	80068f6 <_malloc_r+0x92>
 80068ae:	230c      	movs	r3, #12
 80068b0:	6033      	str	r3, [r6, #0]
 80068b2:	4630      	mov	r0, r6
 80068b4:	f000 fe1a 	bl	80074ec <__malloc_unlock>
 80068b8:	e7e3      	b.n	8006882 <_malloc_r+0x1e>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	1b5b      	subs	r3, r3, r5
 80068be:	d417      	bmi.n	80068f0 <_malloc_r+0x8c>
 80068c0:	2b0b      	cmp	r3, #11
 80068c2:	d903      	bls.n	80068cc <_malloc_r+0x68>
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	441c      	add	r4, r3
 80068c8:	6025      	str	r5, [r4, #0]
 80068ca:	e004      	b.n	80068d6 <_malloc_r+0x72>
 80068cc:	6863      	ldr	r3, [r4, #4]
 80068ce:	42a2      	cmp	r2, r4
 80068d0:	bf0c      	ite	eq
 80068d2:	600b      	streq	r3, [r1, #0]
 80068d4:	6053      	strne	r3, [r2, #4]
 80068d6:	4630      	mov	r0, r6
 80068d8:	f000 fe08 	bl	80074ec <__malloc_unlock>
 80068dc:	f104 000b 	add.w	r0, r4, #11
 80068e0:	1d23      	adds	r3, r4, #4
 80068e2:	f020 0007 	bic.w	r0, r0, #7
 80068e6:	1ac2      	subs	r2, r0, r3
 80068e8:	d0cc      	beq.n	8006884 <_malloc_r+0x20>
 80068ea:	1a1b      	subs	r3, r3, r0
 80068ec:	50a3      	str	r3, [r4, r2]
 80068ee:	e7c9      	b.n	8006884 <_malloc_r+0x20>
 80068f0:	4622      	mov	r2, r4
 80068f2:	6864      	ldr	r4, [r4, #4]
 80068f4:	e7cc      	b.n	8006890 <_malloc_r+0x2c>
 80068f6:	1cc4      	adds	r4, r0, #3
 80068f8:	f024 0403 	bic.w	r4, r4, #3
 80068fc:	42a0      	cmp	r0, r4
 80068fe:	d0e3      	beq.n	80068c8 <_malloc_r+0x64>
 8006900:	1a21      	subs	r1, r4, r0
 8006902:	4630      	mov	r0, r6
 8006904:	f000 faf6 	bl	8006ef4 <_sbrk_r>
 8006908:	3001      	adds	r0, #1
 800690a:	d1dd      	bne.n	80068c8 <_malloc_r+0x64>
 800690c:	e7cf      	b.n	80068ae <_malloc_r+0x4a>
 800690e:	bf00      	nop
 8006910:	2000ba44 	.word	0x2000ba44
 8006914:	2000ba48 	.word	0x2000ba48

08006918 <__sfputc_r>:
 8006918:	6893      	ldr	r3, [r2, #8]
 800691a:	3b01      	subs	r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	b410      	push	{r4}
 8006920:	6093      	str	r3, [r2, #8]
 8006922:	da08      	bge.n	8006936 <__sfputc_r+0x1e>
 8006924:	6994      	ldr	r4, [r2, #24]
 8006926:	42a3      	cmp	r3, r4
 8006928:	db01      	blt.n	800692e <__sfputc_r+0x16>
 800692a:	290a      	cmp	r1, #10
 800692c:	d103      	bne.n	8006936 <__sfputc_r+0x1e>
 800692e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006932:	f000 baef 	b.w	8006f14 <__swbuf_r>
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	1c58      	adds	r0, r3, #1
 800693a:	6010      	str	r0, [r2, #0]
 800693c:	7019      	strb	r1, [r3, #0]
 800693e:	4608      	mov	r0, r1
 8006940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006944:	4770      	bx	lr

08006946 <__sfputs_r>:
 8006946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006948:	4606      	mov	r6, r0
 800694a:	460f      	mov	r7, r1
 800694c:	4614      	mov	r4, r2
 800694e:	18d5      	adds	r5, r2, r3
 8006950:	42ac      	cmp	r4, r5
 8006952:	d101      	bne.n	8006958 <__sfputs_r+0x12>
 8006954:	2000      	movs	r0, #0
 8006956:	e007      	b.n	8006968 <__sfputs_r+0x22>
 8006958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695c:	463a      	mov	r2, r7
 800695e:	4630      	mov	r0, r6
 8006960:	f7ff ffda 	bl	8006918 <__sfputc_r>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d1f3      	bne.n	8006950 <__sfputs_r+0xa>
 8006968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800696c <_vfiprintf_r>:
 800696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006970:	460d      	mov	r5, r1
 8006972:	b09d      	sub	sp, #116	; 0x74
 8006974:	4614      	mov	r4, r2
 8006976:	4698      	mov	r8, r3
 8006978:	4606      	mov	r6, r0
 800697a:	b118      	cbz	r0, 8006984 <_vfiprintf_r+0x18>
 800697c:	6983      	ldr	r3, [r0, #24]
 800697e:	b90b      	cbnz	r3, 8006984 <_vfiprintf_r+0x18>
 8006980:	f000 fcaa 	bl	80072d8 <__sinit>
 8006984:	4b89      	ldr	r3, [pc, #548]	; (8006bac <_vfiprintf_r+0x240>)
 8006986:	429d      	cmp	r5, r3
 8006988:	d11b      	bne.n	80069c2 <_vfiprintf_r+0x56>
 800698a:	6875      	ldr	r5, [r6, #4]
 800698c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800698e:	07d9      	lsls	r1, r3, #31
 8006990:	d405      	bmi.n	800699e <_vfiprintf_r+0x32>
 8006992:	89ab      	ldrh	r3, [r5, #12]
 8006994:	059a      	lsls	r2, r3, #22
 8006996:	d402      	bmi.n	800699e <_vfiprintf_r+0x32>
 8006998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800699a:	f000 fd3b 	bl	8007414 <__retarget_lock_acquire_recursive>
 800699e:	89ab      	ldrh	r3, [r5, #12]
 80069a0:	071b      	lsls	r3, r3, #28
 80069a2:	d501      	bpl.n	80069a8 <_vfiprintf_r+0x3c>
 80069a4:	692b      	ldr	r3, [r5, #16]
 80069a6:	b9eb      	cbnz	r3, 80069e4 <_vfiprintf_r+0x78>
 80069a8:	4629      	mov	r1, r5
 80069aa:	4630      	mov	r0, r6
 80069ac:	f000 fb04 	bl	8006fb8 <__swsetup_r>
 80069b0:	b1c0      	cbz	r0, 80069e4 <_vfiprintf_r+0x78>
 80069b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069b4:	07dc      	lsls	r4, r3, #31
 80069b6:	d50e      	bpl.n	80069d6 <_vfiprintf_r+0x6a>
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295
 80069bc:	b01d      	add	sp, #116	; 0x74
 80069be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c2:	4b7b      	ldr	r3, [pc, #492]	; (8006bb0 <_vfiprintf_r+0x244>)
 80069c4:	429d      	cmp	r5, r3
 80069c6:	d101      	bne.n	80069cc <_vfiprintf_r+0x60>
 80069c8:	68b5      	ldr	r5, [r6, #8]
 80069ca:	e7df      	b.n	800698c <_vfiprintf_r+0x20>
 80069cc:	4b79      	ldr	r3, [pc, #484]	; (8006bb4 <_vfiprintf_r+0x248>)
 80069ce:	429d      	cmp	r5, r3
 80069d0:	bf08      	it	eq
 80069d2:	68f5      	ldreq	r5, [r6, #12]
 80069d4:	e7da      	b.n	800698c <_vfiprintf_r+0x20>
 80069d6:	89ab      	ldrh	r3, [r5, #12]
 80069d8:	0598      	lsls	r0, r3, #22
 80069da:	d4ed      	bmi.n	80069b8 <_vfiprintf_r+0x4c>
 80069dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069de:	f000 fd1a 	bl	8007416 <__retarget_lock_release_recursive>
 80069e2:	e7e9      	b.n	80069b8 <_vfiprintf_r+0x4c>
 80069e4:	2300      	movs	r3, #0
 80069e6:	9309      	str	r3, [sp, #36]	; 0x24
 80069e8:	2320      	movs	r3, #32
 80069ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80069f2:	2330      	movs	r3, #48	; 0x30
 80069f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bb8 <_vfiprintf_r+0x24c>
 80069f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069fc:	f04f 0901 	mov.w	r9, #1
 8006a00:	4623      	mov	r3, r4
 8006a02:	469a      	mov	sl, r3
 8006a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a08:	b10a      	cbz	r2, 8006a0e <_vfiprintf_r+0xa2>
 8006a0a:	2a25      	cmp	r2, #37	; 0x25
 8006a0c:	d1f9      	bne.n	8006a02 <_vfiprintf_r+0x96>
 8006a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a12:	d00b      	beq.n	8006a2c <_vfiprintf_r+0xc0>
 8006a14:	465b      	mov	r3, fp
 8006a16:	4622      	mov	r2, r4
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f7ff ff93 	bl	8006946 <__sfputs_r>
 8006a20:	3001      	adds	r0, #1
 8006a22:	f000 80aa 	beq.w	8006b7a <_vfiprintf_r+0x20e>
 8006a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a28:	445a      	add	r2, fp
 8006a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80a2 	beq.w	8006b7a <_vfiprintf_r+0x20e>
 8006a36:	2300      	movs	r3, #0
 8006a38:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a40:	f10a 0a01 	add.w	sl, sl, #1
 8006a44:	9304      	str	r3, [sp, #16]
 8006a46:	9307      	str	r3, [sp, #28]
 8006a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a4e:	4654      	mov	r4, sl
 8006a50:	2205      	movs	r2, #5
 8006a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a56:	4858      	ldr	r0, [pc, #352]	; (8006bb8 <_vfiprintf_r+0x24c>)
 8006a58:	f7f9 fbba 	bl	80001d0 <memchr>
 8006a5c:	9a04      	ldr	r2, [sp, #16]
 8006a5e:	b9d8      	cbnz	r0, 8006a98 <_vfiprintf_r+0x12c>
 8006a60:	06d1      	lsls	r1, r2, #27
 8006a62:	bf44      	itt	mi
 8006a64:	2320      	movmi	r3, #32
 8006a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a6a:	0713      	lsls	r3, r2, #28
 8006a6c:	bf44      	itt	mi
 8006a6e:	232b      	movmi	r3, #43	; 0x2b
 8006a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a74:	f89a 3000 	ldrb.w	r3, [sl]
 8006a78:	2b2a      	cmp	r3, #42	; 0x2a
 8006a7a:	d015      	beq.n	8006aa8 <_vfiprintf_r+0x13c>
 8006a7c:	9a07      	ldr	r2, [sp, #28]
 8006a7e:	4654      	mov	r4, sl
 8006a80:	2000      	movs	r0, #0
 8006a82:	f04f 0c0a 	mov.w	ip, #10
 8006a86:	4621      	mov	r1, r4
 8006a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a8c:	3b30      	subs	r3, #48	; 0x30
 8006a8e:	2b09      	cmp	r3, #9
 8006a90:	d94e      	bls.n	8006b30 <_vfiprintf_r+0x1c4>
 8006a92:	b1b0      	cbz	r0, 8006ac2 <_vfiprintf_r+0x156>
 8006a94:	9207      	str	r2, [sp, #28]
 8006a96:	e014      	b.n	8006ac2 <_vfiprintf_r+0x156>
 8006a98:	eba0 0308 	sub.w	r3, r0, r8
 8006a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	9304      	str	r3, [sp, #16]
 8006aa4:	46a2      	mov	sl, r4
 8006aa6:	e7d2      	b.n	8006a4e <_vfiprintf_r+0xe2>
 8006aa8:	9b03      	ldr	r3, [sp, #12]
 8006aaa:	1d19      	adds	r1, r3, #4
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	9103      	str	r1, [sp, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bfbb      	ittet	lt
 8006ab4:	425b      	neglt	r3, r3
 8006ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8006aba:	9307      	strge	r3, [sp, #28]
 8006abc:	9307      	strlt	r3, [sp, #28]
 8006abe:	bfb8      	it	lt
 8006ac0:	9204      	strlt	r2, [sp, #16]
 8006ac2:	7823      	ldrb	r3, [r4, #0]
 8006ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ac6:	d10c      	bne.n	8006ae2 <_vfiprintf_r+0x176>
 8006ac8:	7863      	ldrb	r3, [r4, #1]
 8006aca:	2b2a      	cmp	r3, #42	; 0x2a
 8006acc:	d135      	bne.n	8006b3a <_vfiprintf_r+0x1ce>
 8006ace:	9b03      	ldr	r3, [sp, #12]
 8006ad0:	1d1a      	adds	r2, r3, #4
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	9203      	str	r2, [sp, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	bfb8      	it	lt
 8006ada:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ade:	3402      	adds	r4, #2
 8006ae0:	9305      	str	r3, [sp, #20]
 8006ae2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006bc8 <_vfiprintf_r+0x25c>
 8006ae6:	7821      	ldrb	r1, [r4, #0]
 8006ae8:	2203      	movs	r2, #3
 8006aea:	4650      	mov	r0, sl
 8006aec:	f7f9 fb70 	bl	80001d0 <memchr>
 8006af0:	b140      	cbz	r0, 8006b04 <_vfiprintf_r+0x198>
 8006af2:	2340      	movs	r3, #64	; 0x40
 8006af4:	eba0 000a 	sub.w	r0, r0, sl
 8006af8:	fa03 f000 	lsl.w	r0, r3, r0
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	4303      	orrs	r3, r0
 8006b00:	3401      	adds	r4, #1
 8006b02:	9304      	str	r3, [sp, #16]
 8006b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b08:	482c      	ldr	r0, [pc, #176]	; (8006bbc <_vfiprintf_r+0x250>)
 8006b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b0e:	2206      	movs	r2, #6
 8006b10:	f7f9 fb5e 	bl	80001d0 <memchr>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d03f      	beq.n	8006b98 <_vfiprintf_r+0x22c>
 8006b18:	4b29      	ldr	r3, [pc, #164]	; (8006bc0 <_vfiprintf_r+0x254>)
 8006b1a:	bb1b      	cbnz	r3, 8006b64 <_vfiprintf_r+0x1f8>
 8006b1c:	9b03      	ldr	r3, [sp, #12]
 8006b1e:	3307      	adds	r3, #7
 8006b20:	f023 0307 	bic.w	r3, r3, #7
 8006b24:	3308      	adds	r3, #8
 8006b26:	9303      	str	r3, [sp, #12]
 8006b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2a:	443b      	add	r3, r7
 8006b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2e:	e767      	b.n	8006a00 <_vfiprintf_r+0x94>
 8006b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b34:	460c      	mov	r4, r1
 8006b36:	2001      	movs	r0, #1
 8006b38:	e7a5      	b.n	8006a86 <_vfiprintf_r+0x11a>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	3401      	adds	r4, #1
 8006b3e:	9305      	str	r3, [sp, #20]
 8006b40:	4619      	mov	r1, r3
 8006b42:	f04f 0c0a 	mov.w	ip, #10
 8006b46:	4620      	mov	r0, r4
 8006b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b4c:	3a30      	subs	r2, #48	; 0x30
 8006b4e:	2a09      	cmp	r2, #9
 8006b50:	d903      	bls.n	8006b5a <_vfiprintf_r+0x1ee>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0c5      	beq.n	8006ae2 <_vfiprintf_r+0x176>
 8006b56:	9105      	str	r1, [sp, #20]
 8006b58:	e7c3      	b.n	8006ae2 <_vfiprintf_r+0x176>
 8006b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b5e:	4604      	mov	r4, r0
 8006b60:	2301      	movs	r3, #1
 8006b62:	e7f0      	b.n	8006b46 <_vfiprintf_r+0x1da>
 8006b64:	ab03      	add	r3, sp, #12
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	462a      	mov	r2, r5
 8006b6a:	4b16      	ldr	r3, [pc, #88]	; (8006bc4 <_vfiprintf_r+0x258>)
 8006b6c:	a904      	add	r1, sp, #16
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f3af 8000 	nop.w
 8006b74:	4607      	mov	r7, r0
 8006b76:	1c78      	adds	r0, r7, #1
 8006b78:	d1d6      	bne.n	8006b28 <_vfiprintf_r+0x1bc>
 8006b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b7c:	07d9      	lsls	r1, r3, #31
 8006b7e:	d405      	bmi.n	8006b8c <_vfiprintf_r+0x220>
 8006b80:	89ab      	ldrh	r3, [r5, #12]
 8006b82:	059a      	lsls	r2, r3, #22
 8006b84:	d402      	bmi.n	8006b8c <_vfiprintf_r+0x220>
 8006b86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b88:	f000 fc45 	bl	8007416 <__retarget_lock_release_recursive>
 8006b8c:	89ab      	ldrh	r3, [r5, #12]
 8006b8e:	065b      	lsls	r3, r3, #25
 8006b90:	f53f af12 	bmi.w	80069b8 <_vfiprintf_r+0x4c>
 8006b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b96:	e711      	b.n	80069bc <_vfiprintf_r+0x50>
 8006b98:	ab03      	add	r3, sp, #12
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <_vfiprintf_r+0x258>)
 8006ba0:	a904      	add	r1, sp, #16
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f000 f880 	bl	8006ca8 <_printf_i>
 8006ba8:	e7e4      	b.n	8006b74 <_vfiprintf_r+0x208>
 8006baa:	bf00      	nop
 8006bac:	08007fb4 	.word	0x08007fb4
 8006bb0:	08007fd4 	.word	0x08007fd4
 8006bb4:	08007f94 	.word	0x08007f94
 8006bb8:	08007f5e 	.word	0x08007f5e
 8006bbc:	08007f68 	.word	0x08007f68
 8006bc0:	00000000 	.word	0x00000000
 8006bc4:	08006947 	.word	0x08006947
 8006bc8:	08007f64 	.word	0x08007f64

08006bcc <_printf_common>:
 8006bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	4616      	mov	r6, r2
 8006bd2:	4699      	mov	r9, r3
 8006bd4:	688a      	ldr	r2, [r1, #8]
 8006bd6:	690b      	ldr	r3, [r1, #16]
 8006bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	bfb8      	it	lt
 8006be0:	4613      	movlt	r3, r2
 8006be2:	6033      	str	r3, [r6, #0]
 8006be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006be8:	4607      	mov	r7, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	b10a      	cbz	r2, 8006bf2 <_printf_common+0x26>
 8006bee:	3301      	adds	r3, #1
 8006bf0:	6033      	str	r3, [r6, #0]
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	0699      	lsls	r1, r3, #26
 8006bf6:	bf42      	ittt	mi
 8006bf8:	6833      	ldrmi	r3, [r6, #0]
 8006bfa:	3302      	addmi	r3, #2
 8006bfc:	6033      	strmi	r3, [r6, #0]
 8006bfe:	6825      	ldr	r5, [r4, #0]
 8006c00:	f015 0506 	ands.w	r5, r5, #6
 8006c04:	d106      	bne.n	8006c14 <_printf_common+0x48>
 8006c06:	f104 0a19 	add.w	sl, r4, #25
 8006c0a:	68e3      	ldr	r3, [r4, #12]
 8006c0c:	6832      	ldr	r2, [r6, #0]
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	dc26      	bgt.n	8006c62 <_printf_common+0x96>
 8006c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c18:	1e13      	subs	r3, r2, #0
 8006c1a:	6822      	ldr	r2, [r4, #0]
 8006c1c:	bf18      	it	ne
 8006c1e:	2301      	movne	r3, #1
 8006c20:	0692      	lsls	r2, r2, #26
 8006c22:	d42b      	bmi.n	8006c7c <_printf_common+0xb0>
 8006c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c28:	4649      	mov	r1, r9
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	47c0      	blx	r8
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d01e      	beq.n	8006c70 <_printf_common+0xa4>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	68e5      	ldr	r5, [r4, #12]
 8006c36:	6832      	ldr	r2, [r6, #0]
 8006c38:	f003 0306 	and.w	r3, r3, #6
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	bf08      	it	eq
 8006c40:	1aad      	subeq	r5, r5, r2
 8006c42:	68a3      	ldr	r3, [r4, #8]
 8006c44:	6922      	ldr	r2, [r4, #16]
 8006c46:	bf0c      	ite	eq
 8006c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c4c:	2500      	movne	r5, #0
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	bfc4      	itt	gt
 8006c52:	1a9b      	subgt	r3, r3, r2
 8006c54:	18ed      	addgt	r5, r5, r3
 8006c56:	2600      	movs	r6, #0
 8006c58:	341a      	adds	r4, #26
 8006c5a:	42b5      	cmp	r5, r6
 8006c5c:	d11a      	bne.n	8006c94 <_printf_common+0xc8>
 8006c5e:	2000      	movs	r0, #0
 8006c60:	e008      	b.n	8006c74 <_printf_common+0xa8>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4652      	mov	r2, sl
 8006c66:	4649      	mov	r1, r9
 8006c68:	4638      	mov	r0, r7
 8006c6a:	47c0      	blx	r8
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d103      	bne.n	8006c78 <_printf_common+0xac>
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c78:	3501      	adds	r5, #1
 8006c7a:	e7c6      	b.n	8006c0a <_printf_common+0x3e>
 8006c7c:	18e1      	adds	r1, r4, r3
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	2030      	movs	r0, #48	; 0x30
 8006c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c86:	4422      	add	r2, r4
 8006c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c90:	3302      	adds	r3, #2
 8006c92:	e7c7      	b.n	8006c24 <_printf_common+0x58>
 8006c94:	2301      	movs	r3, #1
 8006c96:	4622      	mov	r2, r4
 8006c98:	4649      	mov	r1, r9
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	47c0      	blx	r8
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	d0e6      	beq.n	8006c70 <_printf_common+0xa4>
 8006ca2:	3601      	adds	r6, #1
 8006ca4:	e7d9      	b.n	8006c5a <_printf_common+0x8e>
	...

08006ca8 <_printf_i>:
 8006ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	460c      	mov	r4, r1
 8006cae:	4691      	mov	r9, r2
 8006cb0:	7e27      	ldrb	r7, [r4, #24]
 8006cb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cb4:	2f78      	cmp	r7, #120	; 0x78
 8006cb6:	4680      	mov	r8, r0
 8006cb8:	469a      	mov	sl, r3
 8006cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cbe:	d807      	bhi.n	8006cd0 <_printf_i+0x28>
 8006cc0:	2f62      	cmp	r7, #98	; 0x62
 8006cc2:	d80a      	bhi.n	8006cda <_printf_i+0x32>
 8006cc4:	2f00      	cmp	r7, #0
 8006cc6:	f000 80d8 	beq.w	8006e7a <_printf_i+0x1d2>
 8006cca:	2f58      	cmp	r7, #88	; 0x58
 8006ccc:	f000 80a3 	beq.w	8006e16 <_printf_i+0x16e>
 8006cd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cd8:	e03a      	b.n	8006d50 <_printf_i+0xa8>
 8006cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cde:	2b15      	cmp	r3, #21
 8006ce0:	d8f6      	bhi.n	8006cd0 <_printf_i+0x28>
 8006ce2:	a001      	add	r0, pc, #4	; (adr r0, 8006ce8 <_printf_i+0x40>)
 8006ce4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ce8:	08006d41 	.word	0x08006d41
 8006cec:	08006d55 	.word	0x08006d55
 8006cf0:	08006cd1 	.word	0x08006cd1
 8006cf4:	08006cd1 	.word	0x08006cd1
 8006cf8:	08006cd1 	.word	0x08006cd1
 8006cfc:	08006cd1 	.word	0x08006cd1
 8006d00:	08006d55 	.word	0x08006d55
 8006d04:	08006cd1 	.word	0x08006cd1
 8006d08:	08006cd1 	.word	0x08006cd1
 8006d0c:	08006cd1 	.word	0x08006cd1
 8006d10:	08006cd1 	.word	0x08006cd1
 8006d14:	08006e61 	.word	0x08006e61
 8006d18:	08006d85 	.word	0x08006d85
 8006d1c:	08006e43 	.word	0x08006e43
 8006d20:	08006cd1 	.word	0x08006cd1
 8006d24:	08006cd1 	.word	0x08006cd1
 8006d28:	08006e83 	.word	0x08006e83
 8006d2c:	08006cd1 	.word	0x08006cd1
 8006d30:	08006d85 	.word	0x08006d85
 8006d34:	08006cd1 	.word	0x08006cd1
 8006d38:	08006cd1 	.word	0x08006cd1
 8006d3c:	08006e4b 	.word	0x08006e4b
 8006d40:	680b      	ldr	r3, [r1, #0]
 8006d42:	1d1a      	adds	r2, r3, #4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	600a      	str	r2, [r1, #0]
 8006d48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d50:	2301      	movs	r3, #1
 8006d52:	e0a3      	b.n	8006e9c <_printf_i+0x1f4>
 8006d54:	6825      	ldr	r5, [r4, #0]
 8006d56:	6808      	ldr	r0, [r1, #0]
 8006d58:	062e      	lsls	r6, r5, #24
 8006d5a:	f100 0304 	add.w	r3, r0, #4
 8006d5e:	d50a      	bpl.n	8006d76 <_printf_i+0xce>
 8006d60:	6805      	ldr	r5, [r0, #0]
 8006d62:	600b      	str	r3, [r1, #0]
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	da03      	bge.n	8006d70 <_printf_i+0xc8>
 8006d68:	232d      	movs	r3, #45	; 0x2d
 8006d6a:	426d      	negs	r5, r5
 8006d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d70:	485e      	ldr	r0, [pc, #376]	; (8006eec <_printf_i+0x244>)
 8006d72:	230a      	movs	r3, #10
 8006d74:	e019      	b.n	8006daa <_printf_i+0x102>
 8006d76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d7a:	6805      	ldr	r5, [r0, #0]
 8006d7c:	600b      	str	r3, [r1, #0]
 8006d7e:	bf18      	it	ne
 8006d80:	b22d      	sxthne	r5, r5
 8006d82:	e7ef      	b.n	8006d64 <_printf_i+0xbc>
 8006d84:	680b      	ldr	r3, [r1, #0]
 8006d86:	6825      	ldr	r5, [r4, #0]
 8006d88:	1d18      	adds	r0, r3, #4
 8006d8a:	6008      	str	r0, [r1, #0]
 8006d8c:	0628      	lsls	r0, r5, #24
 8006d8e:	d501      	bpl.n	8006d94 <_printf_i+0xec>
 8006d90:	681d      	ldr	r5, [r3, #0]
 8006d92:	e002      	b.n	8006d9a <_printf_i+0xf2>
 8006d94:	0669      	lsls	r1, r5, #25
 8006d96:	d5fb      	bpl.n	8006d90 <_printf_i+0xe8>
 8006d98:	881d      	ldrh	r5, [r3, #0]
 8006d9a:	4854      	ldr	r0, [pc, #336]	; (8006eec <_printf_i+0x244>)
 8006d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d9e:	bf0c      	ite	eq
 8006da0:	2308      	moveq	r3, #8
 8006da2:	230a      	movne	r3, #10
 8006da4:	2100      	movs	r1, #0
 8006da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006daa:	6866      	ldr	r6, [r4, #4]
 8006dac:	60a6      	str	r6, [r4, #8]
 8006dae:	2e00      	cmp	r6, #0
 8006db0:	bfa2      	ittt	ge
 8006db2:	6821      	ldrge	r1, [r4, #0]
 8006db4:	f021 0104 	bicge.w	r1, r1, #4
 8006db8:	6021      	strge	r1, [r4, #0]
 8006dba:	b90d      	cbnz	r5, 8006dc0 <_printf_i+0x118>
 8006dbc:	2e00      	cmp	r6, #0
 8006dbe:	d04d      	beq.n	8006e5c <_printf_i+0x1b4>
 8006dc0:	4616      	mov	r6, r2
 8006dc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dc6:	fb03 5711 	mls	r7, r3, r1, r5
 8006dca:	5dc7      	ldrb	r7, [r0, r7]
 8006dcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dd0:	462f      	mov	r7, r5
 8006dd2:	42bb      	cmp	r3, r7
 8006dd4:	460d      	mov	r5, r1
 8006dd6:	d9f4      	bls.n	8006dc2 <_printf_i+0x11a>
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d10b      	bne.n	8006df4 <_printf_i+0x14c>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	07df      	lsls	r7, r3, #31
 8006de0:	d508      	bpl.n	8006df4 <_printf_i+0x14c>
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	6861      	ldr	r1, [r4, #4]
 8006de6:	4299      	cmp	r1, r3
 8006de8:	bfde      	ittt	le
 8006dea:	2330      	movle	r3, #48	; 0x30
 8006dec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006df0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006df4:	1b92      	subs	r2, r2, r6
 8006df6:	6122      	str	r2, [r4, #16]
 8006df8:	f8cd a000 	str.w	sl, [sp]
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	aa03      	add	r2, sp, #12
 8006e00:	4621      	mov	r1, r4
 8006e02:	4640      	mov	r0, r8
 8006e04:	f7ff fee2 	bl	8006bcc <_printf_common>
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d14c      	bne.n	8006ea6 <_printf_i+0x1fe>
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	b004      	add	sp, #16
 8006e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e16:	4835      	ldr	r0, [pc, #212]	; (8006eec <_printf_i+0x244>)
 8006e18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	680e      	ldr	r6, [r1, #0]
 8006e20:	061f      	lsls	r7, r3, #24
 8006e22:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e26:	600e      	str	r6, [r1, #0]
 8006e28:	d514      	bpl.n	8006e54 <_printf_i+0x1ac>
 8006e2a:	07d9      	lsls	r1, r3, #31
 8006e2c:	bf44      	itt	mi
 8006e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e32:	6023      	strmi	r3, [r4, #0]
 8006e34:	b91d      	cbnz	r5, 8006e3e <_printf_i+0x196>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	f023 0320 	bic.w	r3, r3, #32
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	2310      	movs	r3, #16
 8006e40:	e7b0      	b.n	8006da4 <_printf_i+0xfc>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	f043 0320 	orr.w	r3, r3, #32
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	2378      	movs	r3, #120	; 0x78
 8006e4c:	4828      	ldr	r0, [pc, #160]	; (8006ef0 <_printf_i+0x248>)
 8006e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e52:	e7e3      	b.n	8006e1c <_printf_i+0x174>
 8006e54:	065e      	lsls	r6, r3, #25
 8006e56:	bf48      	it	mi
 8006e58:	b2ad      	uxthmi	r5, r5
 8006e5a:	e7e6      	b.n	8006e2a <_printf_i+0x182>
 8006e5c:	4616      	mov	r6, r2
 8006e5e:	e7bb      	b.n	8006dd8 <_printf_i+0x130>
 8006e60:	680b      	ldr	r3, [r1, #0]
 8006e62:	6826      	ldr	r6, [r4, #0]
 8006e64:	6960      	ldr	r0, [r4, #20]
 8006e66:	1d1d      	adds	r5, r3, #4
 8006e68:	600d      	str	r5, [r1, #0]
 8006e6a:	0635      	lsls	r5, r6, #24
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	d501      	bpl.n	8006e74 <_printf_i+0x1cc>
 8006e70:	6018      	str	r0, [r3, #0]
 8006e72:	e002      	b.n	8006e7a <_printf_i+0x1d2>
 8006e74:	0671      	lsls	r1, r6, #25
 8006e76:	d5fb      	bpl.n	8006e70 <_printf_i+0x1c8>
 8006e78:	8018      	strh	r0, [r3, #0]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	4616      	mov	r6, r2
 8006e80:	e7ba      	b.n	8006df8 <_printf_i+0x150>
 8006e82:	680b      	ldr	r3, [r1, #0]
 8006e84:	1d1a      	adds	r2, r3, #4
 8006e86:	600a      	str	r2, [r1, #0]
 8006e88:	681e      	ldr	r6, [r3, #0]
 8006e8a:	6862      	ldr	r2, [r4, #4]
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f7f9 f99e 	bl	80001d0 <memchr>
 8006e94:	b108      	cbz	r0, 8006e9a <_printf_i+0x1f2>
 8006e96:	1b80      	subs	r0, r0, r6
 8006e98:	6060      	str	r0, [r4, #4]
 8006e9a:	6863      	ldr	r3, [r4, #4]
 8006e9c:	6123      	str	r3, [r4, #16]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea4:	e7a8      	b.n	8006df8 <_printf_i+0x150>
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	4649      	mov	r1, r9
 8006eac:	4640      	mov	r0, r8
 8006eae:	47d0      	blx	sl
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d0ab      	beq.n	8006e0c <_printf_i+0x164>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	079b      	lsls	r3, r3, #30
 8006eb8:	d413      	bmi.n	8006ee2 <_printf_i+0x23a>
 8006eba:	68e0      	ldr	r0, [r4, #12]
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	4298      	cmp	r0, r3
 8006ec0:	bfb8      	it	lt
 8006ec2:	4618      	movlt	r0, r3
 8006ec4:	e7a4      	b.n	8006e10 <_printf_i+0x168>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4632      	mov	r2, r6
 8006eca:	4649      	mov	r1, r9
 8006ecc:	4640      	mov	r0, r8
 8006ece:	47d0      	blx	sl
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	d09b      	beq.n	8006e0c <_printf_i+0x164>
 8006ed4:	3501      	adds	r5, #1
 8006ed6:	68e3      	ldr	r3, [r4, #12]
 8006ed8:	9903      	ldr	r1, [sp, #12]
 8006eda:	1a5b      	subs	r3, r3, r1
 8006edc:	42ab      	cmp	r3, r5
 8006ede:	dcf2      	bgt.n	8006ec6 <_printf_i+0x21e>
 8006ee0:	e7eb      	b.n	8006eba <_printf_i+0x212>
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	f104 0619 	add.w	r6, r4, #25
 8006ee8:	e7f5      	b.n	8006ed6 <_printf_i+0x22e>
 8006eea:	bf00      	nop
 8006eec:	08007f6f 	.word	0x08007f6f
 8006ef0:	08007f80 	.word	0x08007f80

08006ef4 <_sbrk_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d06      	ldr	r5, [pc, #24]	; (8006f10 <_sbrk_r+0x1c>)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	f7fa ff98 	bl	8001e34 <_sbrk>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d102      	bne.n	8006f0e <_sbrk_r+0x1a>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <_sbrk_r+0x1a>
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	2000bbe4 	.word	0x2000bbe4

08006f14 <__swbuf_r>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	460e      	mov	r6, r1
 8006f18:	4614      	mov	r4, r2
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	b118      	cbz	r0, 8006f26 <__swbuf_r+0x12>
 8006f1e:	6983      	ldr	r3, [r0, #24]
 8006f20:	b90b      	cbnz	r3, 8006f26 <__swbuf_r+0x12>
 8006f22:	f000 f9d9 	bl	80072d8 <__sinit>
 8006f26:	4b21      	ldr	r3, [pc, #132]	; (8006fac <__swbuf_r+0x98>)
 8006f28:	429c      	cmp	r4, r3
 8006f2a:	d12b      	bne.n	8006f84 <__swbuf_r+0x70>
 8006f2c:	686c      	ldr	r4, [r5, #4]
 8006f2e:	69a3      	ldr	r3, [r4, #24]
 8006f30:	60a3      	str	r3, [r4, #8]
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	071a      	lsls	r2, r3, #28
 8006f36:	d52f      	bpl.n	8006f98 <__swbuf_r+0x84>
 8006f38:	6923      	ldr	r3, [r4, #16]
 8006f3a:	b36b      	cbz	r3, 8006f98 <__swbuf_r+0x84>
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	6820      	ldr	r0, [r4, #0]
 8006f40:	1ac0      	subs	r0, r0, r3
 8006f42:	6963      	ldr	r3, [r4, #20]
 8006f44:	b2f6      	uxtb	r6, r6
 8006f46:	4283      	cmp	r3, r0
 8006f48:	4637      	mov	r7, r6
 8006f4a:	dc04      	bgt.n	8006f56 <__swbuf_r+0x42>
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f000 f92e 	bl	80071b0 <_fflush_r>
 8006f54:	bb30      	cbnz	r0, 8006fa4 <__swbuf_r+0x90>
 8006f56:	68a3      	ldr	r3, [r4, #8]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	60a3      	str	r3, [r4, #8]
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	6022      	str	r2, [r4, #0]
 8006f62:	701e      	strb	r6, [r3, #0]
 8006f64:	6963      	ldr	r3, [r4, #20]
 8006f66:	3001      	adds	r0, #1
 8006f68:	4283      	cmp	r3, r0
 8006f6a:	d004      	beq.n	8006f76 <__swbuf_r+0x62>
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	07db      	lsls	r3, r3, #31
 8006f70:	d506      	bpl.n	8006f80 <__swbuf_r+0x6c>
 8006f72:	2e0a      	cmp	r6, #10
 8006f74:	d104      	bne.n	8006f80 <__swbuf_r+0x6c>
 8006f76:	4621      	mov	r1, r4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f000 f919 	bl	80071b0 <_fflush_r>
 8006f7e:	b988      	cbnz	r0, 8006fa4 <__swbuf_r+0x90>
 8006f80:	4638      	mov	r0, r7
 8006f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f84:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <__swbuf_r+0x9c>)
 8006f86:	429c      	cmp	r4, r3
 8006f88:	d101      	bne.n	8006f8e <__swbuf_r+0x7a>
 8006f8a:	68ac      	ldr	r4, [r5, #8]
 8006f8c:	e7cf      	b.n	8006f2e <__swbuf_r+0x1a>
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <__swbuf_r+0xa0>)
 8006f90:	429c      	cmp	r4, r3
 8006f92:	bf08      	it	eq
 8006f94:	68ec      	ldreq	r4, [r5, #12]
 8006f96:	e7ca      	b.n	8006f2e <__swbuf_r+0x1a>
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 f80c 	bl	8006fb8 <__swsetup_r>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d0cb      	beq.n	8006f3c <__swbuf_r+0x28>
 8006fa4:	f04f 37ff 	mov.w	r7, #4294967295
 8006fa8:	e7ea      	b.n	8006f80 <__swbuf_r+0x6c>
 8006faa:	bf00      	nop
 8006fac:	08007fb4 	.word	0x08007fb4
 8006fb0:	08007fd4 	.word	0x08007fd4
 8006fb4:	08007f94 	.word	0x08007f94

08006fb8 <__swsetup_r>:
 8006fb8:	4b32      	ldr	r3, [pc, #200]	; (8007084 <__swsetup_r+0xcc>)
 8006fba:	b570      	push	{r4, r5, r6, lr}
 8006fbc:	681d      	ldr	r5, [r3, #0]
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	b125      	cbz	r5, 8006fce <__swsetup_r+0x16>
 8006fc4:	69ab      	ldr	r3, [r5, #24]
 8006fc6:	b913      	cbnz	r3, 8006fce <__swsetup_r+0x16>
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f000 f985 	bl	80072d8 <__sinit>
 8006fce:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <__swsetup_r+0xd0>)
 8006fd0:	429c      	cmp	r4, r3
 8006fd2:	d10f      	bne.n	8006ff4 <__swsetup_r+0x3c>
 8006fd4:	686c      	ldr	r4, [r5, #4]
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fdc:	0719      	lsls	r1, r3, #28
 8006fde:	d42c      	bmi.n	800703a <__swsetup_r+0x82>
 8006fe0:	06dd      	lsls	r5, r3, #27
 8006fe2:	d411      	bmi.n	8007008 <__swsetup_r+0x50>
 8006fe4:	2309      	movs	r3, #9
 8006fe6:	6033      	str	r3, [r6, #0]
 8006fe8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fec:	81a3      	strh	r3, [r4, #12]
 8006fee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff2:	e03e      	b.n	8007072 <__swsetup_r+0xba>
 8006ff4:	4b25      	ldr	r3, [pc, #148]	; (800708c <__swsetup_r+0xd4>)
 8006ff6:	429c      	cmp	r4, r3
 8006ff8:	d101      	bne.n	8006ffe <__swsetup_r+0x46>
 8006ffa:	68ac      	ldr	r4, [r5, #8]
 8006ffc:	e7eb      	b.n	8006fd6 <__swsetup_r+0x1e>
 8006ffe:	4b24      	ldr	r3, [pc, #144]	; (8007090 <__swsetup_r+0xd8>)
 8007000:	429c      	cmp	r4, r3
 8007002:	bf08      	it	eq
 8007004:	68ec      	ldreq	r4, [r5, #12]
 8007006:	e7e6      	b.n	8006fd6 <__swsetup_r+0x1e>
 8007008:	0758      	lsls	r0, r3, #29
 800700a:	d512      	bpl.n	8007032 <__swsetup_r+0x7a>
 800700c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800700e:	b141      	cbz	r1, 8007022 <__swsetup_r+0x6a>
 8007010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007014:	4299      	cmp	r1, r3
 8007016:	d002      	beq.n	800701e <__swsetup_r+0x66>
 8007018:	4630      	mov	r0, r6
 800701a:	f7ff fbd3 	bl	80067c4 <_free_r>
 800701e:	2300      	movs	r3, #0
 8007020:	6363      	str	r3, [r4, #52]	; 0x34
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007028:	81a3      	strh	r3, [r4, #12]
 800702a:	2300      	movs	r3, #0
 800702c:	6063      	str	r3, [r4, #4]
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	f043 0308 	orr.w	r3, r3, #8
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	6923      	ldr	r3, [r4, #16]
 800703c:	b94b      	cbnz	r3, 8007052 <__swsetup_r+0x9a>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007048:	d003      	beq.n	8007052 <__swsetup_r+0x9a>
 800704a:	4621      	mov	r1, r4
 800704c:	4630      	mov	r0, r6
 800704e:	f000 fa07 	bl	8007460 <__smakebuf_r>
 8007052:	89a0      	ldrh	r0, [r4, #12]
 8007054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007058:	f010 0301 	ands.w	r3, r0, #1
 800705c:	d00a      	beq.n	8007074 <__swsetup_r+0xbc>
 800705e:	2300      	movs	r3, #0
 8007060:	60a3      	str	r3, [r4, #8]
 8007062:	6963      	ldr	r3, [r4, #20]
 8007064:	425b      	negs	r3, r3
 8007066:	61a3      	str	r3, [r4, #24]
 8007068:	6923      	ldr	r3, [r4, #16]
 800706a:	b943      	cbnz	r3, 800707e <__swsetup_r+0xc6>
 800706c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007070:	d1ba      	bne.n	8006fe8 <__swsetup_r+0x30>
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	0781      	lsls	r1, r0, #30
 8007076:	bf58      	it	pl
 8007078:	6963      	ldrpl	r3, [r4, #20]
 800707a:	60a3      	str	r3, [r4, #8]
 800707c:	e7f4      	b.n	8007068 <__swsetup_r+0xb0>
 800707e:	2000      	movs	r0, #0
 8007080:	e7f7      	b.n	8007072 <__swsetup_r+0xba>
 8007082:	bf00      	nop
 8007084:	200019b4 	.word	0x200019b4
 8007088:	08007fb4 	.word	0x08007fb4
 800708c:	08007fd4 	.word	0x08007fd4
 8007090:	08007f94 	.word	0x08007f94

08007094 <abort>:
 8007094:	b508      	push	{r3, lr}
 8007096:	2006      	movs	r0, #6
 8007098:	f000 fa56 	bl	8007548 <raise>
 800709c:	2001      	movs	r0, #1
 800709e:	f7fa fe51 	bl	8001d44 <_exit>
	...

080070a4 <__sflush_r>:
 80070a4:	898a      	ldrh	r2, [r1, #12]
 80070a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070aa:	4605      	mov	r5, r0
 80070ac:	0710      	lsls	r0, r2, #28
 80070ae:	460c      	mov	r4, r1
 80070b0:	d458      	bmi.n	8007164 <__sflush_r+0xc0>
 80070b2:	684b      	ldr	r3, [r1, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dc05      	bgt.n	80070c4 <__sflush_r+0x20>
 80070b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dc02      	bgt.n	80070c4 <__sflush_r+0x20>
 80070be:	2000      	movs	r0, #0
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070c6:	2e00      	cmp	r6, #0
 80070c8:	d0f9      	beq.n	80070be <__sflush_r+0x1a>
 80070ca:	2300      	movs	r3, #0
 80070cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070d0:	682f      	ldr	r7, [r5, #0]
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	d032      	beq.n	800713c <__sflush_r+0x98>
 80070d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	075a      	lsls	r2, r3, #29
 80070dc:	d505      	bpl.n	80070ea <__sflush_r+0x46>
 80070de:	6863      	ldr	r3, [r4, #4]
 80070e0:	1ac0      	subs	r0, r0, r3
 80070e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070e4:	b10b      	cbz	r3, 80070ea <__sflush_r+0x46>
 80070e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070e8:	1ac0      	subs	r0, r0, r3
 80070ea:	2300      	movs	r3, #0
 80070ec:	4602      	mov	r2, r0
 80070ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070f0:	6a21      	ldr	r1, [r4, #32]
 80070f2:	4628      	mov	r0, r5
 80070f4:	47b0      	blx	r6
 80070f6:	1c43      	adds	r3, r0, #1
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	d106      	bne.n	800710a <__sflush_r+0x66>
 80070fc:	6829      	ldr	r1, [r5, #0]
 80070fe:	291d      	cmp	r1, #29
 8007100:	d82c      	bhi.n	800715c <__sflush_r+0xb8>
 8007102:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <__sflush_r+0x108>)
 8007104:	40ca      	lsrs	r2, r1
 8007106:	07d6      	lsls	r6, r2, #31
 8007108:	d528      	bpl.n	800715c <__sflush_r+0xb8>
 800710a:	2200      	movs	r2, #0
 800710c:	6062      	str	r2, [r4, #4]
 800710e:	04d9      	lsls	r1, r3, #19
 8007110:	6922      	ldr	r2, [r4, #16]
 8007112:	6022      	str	r2, [r4, #0]
 8007114:	d504      	bpl.n	8007120 <__sflush_r+0x7c>
 8007116:	1c42      	adds	r2, r0, #1
 8007118:	d101      	bne.n	800711e <__sflush_r+0x7a>
 800711a:	682b      	ldr	r3, [r5, #0]
 800711c:	b903      	cbnz	r3, 8007120 <__sflush_r+0x7c>
 800711e:	6560      	str	r0, [r4, #84]	; 0x54
 8007120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007122:	602f      	str	r7, [r5, #0]
 8007124:	2900      	cmp	r1, #0
 8007126:	d0ca      	beq.n	80070be <__sflush_r+0x1a>
 8007128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800712c:	4299      	cmp	r1, r3
 800712e:	d002      	beq.n	8007136 <__sflush_r+0x92>
 8007130:	4628      	mov	r0, r5
 8007132:	f7ff fb47 	bl	80067c4 <_free_r>
 8007136:	2000      	movs	r0, #0
 8007138:	6360      	str	r0, [r4, #52]	; 0x34
 800713a:	e7c1      	b.n	80070c0 <__sflush_r+0x1c>
 800713c:	6a21      	ldr	r1, [r4, #32]
 800713e:	2301      	movs	r3, #1
 8007140:	4628      	mov	r0, r5
 8007142:	47b0      	blx	r6
 8007144:	1c41      	adds	r1, r0, #1
 8007146:	d1c7      	bne.n	80070d8 <__sflush_r+0x34>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0c4      	beq.n	80070d8 <__sflush_r+0x34>
 800714e:	2b1d      	cmp	r3, #29
 8007150:	d001      	beq.n	8007156 <__sflush_r+0xb2>
 8007152:	2b16      	cmp	r3, #22
 8007154:	d101      	bne.n	800715a <__sflush_r+0xb6>
 8007156:	602f      	str	r7, [r5, #0]
 8007158:	e7b1      	b.n	80070be <__sflush_r+0x1a>
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007160:	81a3      	strh	r3, [r4, #12]
 8007162:	e7ad      	b.n	80070c0 <__sflush_r+0x1c>
 8007164:	690f      	ldr	r7, [r1, #16]
 8007166:	2f00      	cmp	r7, #0
 8007168:	d0a9      	beq.n	80070be <__sflush_r+0x1a>
 800716a:	0793      	lsls	r3, r2, #30
 800716c:	680e      	ldr	r6, [r1, #0]
 800716e:	bf08      	it	eq
 8007170:	694b      	ldreq	r3, [r1, #20]
 8007172:	600f      	str	r7, [r1, #0]
 8007174:	bf18      	it	ne
 8007176:	2300      	movne	r3, #0
 8007178:	eba6 0807 	sub.w	r8, r6, r7
 800717c:	608b      	str	r3, [r1, #8]
 800717e:	f1b8 0f00 	cmp.w	r8, #0
 8007182:	dd9c      	ble.n	80070be <__sflush_r+0x1a>
 8007184:	6a21      	ldr	r1, [r4, #32]
 8007186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007188:	4643      	mov	r3, r8
 800718a:	463a      	mov	r2, r7
 800718c:	4628      	mov	r0, r5
 800718e:	47b0      	blx	r6
 8007190:	2800      	cmp	r0, #0
 8007192:	dc06      	bgt.n	80071a2 <__sflush_r+0xfe>
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	f04f 30ff 	mov.w	r0, #4294967295
 80071a0:	e78e      	b.n	80070c0 <__sflush_r+0x1c>
 80071a2:	4407      	add	r7, r0
 80071a4:	eba8 0800 	sub.w	r8, r8, r0
 80071a8:	e7e9      	b.n	800717e <__sflush_r+0xda>
 80071aa:	bf00      	nop
 80071ac:	20400001 	.word	0x20400001

080071b0 <_fflush_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	690b      	ldr	r3, [r1, #16]
 80071b4:	4605      	mov	r5, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	b913      	cbnz	r3, 80071c0 <_fflush_r+0x10>
 80071ba:	2500      	movs	r5, #0
 80071bc:	4628      	mov	r0, r5
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	b118      	cbz	r0, 80071ca <_fflush_r+0x1a>
 80071c2:	6983      	ldr	r3, [r0, #24]
 80071c4:	b90b      	cbnz	r3, 80071ca <_fflush_r+0x1a>
 80071c6:	f000 f887 	bl	80072d8 <__sinit>
 80071ca:	4b14      	ldr	r3, [pc, #80]	; (800721c <_fflush_r+0x6c>)
 80071cc:	429c      	cmp	r4, r3
 80071ce:	d11b      	bne.n	8007208 <_fflush_r+0x58>
 80071d0:	686c      	ldr	r4, [r5, #4]
 80071d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0ef      	beq.n	80071ba <_fflush_r+0xa>
 80071da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071dc:	07d0      	lsls	r0, r2, #31
 80071de:	d404      	bmi.n	80071ea <_fflush_r+0x3a>
 80071e0:	0599      	lsls	r1, r3, #22
 80071e2:	d402      	bmi.n	80071ea <_fflush_r+0x3a>
 80071e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071e6:	f000 f915 	bl	8007414 <__retarget_lock_acquire_recursive>
 80071ea:	4628      	mov	r0, r5
 80071ec:	4621      	mov	r1, r4
 80071ee:	f7ff ff59 	bl	80070a4 <__sflush_r>
 80071f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071f4:	07da      	lsls	r2, r3, #31
 80071f6:	4605      	mov	r5, r0
 80071f8:	d4e0      	bmi.n	80071bc <_fflush_r+0xc>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	059b      	lsls	r3, r3, #22
 80071fe:	d4dd      	bmi.n	80071bc <_fflush_r+0xc>
 8007200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007202:	f000 f908 	bl	8007416 <__retarget_lock_release_recursive>
 8007206:	e7d9      	b.n	80071bc <_fflush_r+0xc>
 8007208:	4b05      	ldr	r3, [pc, #20]	; (8007220 <_fflush_r+0x70>)
 800720a:	429c      	cmp	r4, r3
 800720c:	d101      	bne.n	8007212 <_fflush_r+0x62>
 800720e:	68ac      	ldr	r4, [r5, #8]
 8007210:	e7df      	b.n	80071d2 <_fflush_r+0x22>
 8007212:	4b04      	ldr	r3, [pc, #16]	; (8007224 <_fflush_r+0x74>)
 8007214:	429c      	cmp	r4, r3
 8007216:	bf08      	it	eq
 8007218:	68ec      	ldreq	r4, [r5, #12]
 800721a:	e7da      	b.n	80071d2 <_fflush_r+0x22>
 800721c:	08007fb4 	.word	0x08007fb4
 8007220:	08007fd4 	.word	0x08007fd4
 8007224:	08007f94 	.word	0x08007f94

08007228 <std>:
 8007228:	2300      	movs	r3, #0
 800722a:	b510      	push	{r4, lr}
 800722c:	4604      	mov	r4, r0
 800722e:	e9c0 3300 	strd	r3, r3, [r0]
 8007232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007236:	6083      	str	r3, [r0, #8]
 8007238:	8181      	strh	r1, [r0, #12]
 800723a:	6643      	str	r3, [r0, #100]	; 0x64
 800723c:	81c2      	strh	r2, [r0, #14]
 800723e:	6183      	str	r3, [r0, #24]
 8007240:	4619      	mov	r1, r3
 8007242:	2208      	movs	r2, #8
 8007244:	305c      	adds	r0, #92	; 0x5c
 8007246:	f7ff f9e3 	bl	8006610 <memset>
 800724a:	4b05      	ldr	r3, [pc, #20]	; (8007260 <std+0x38>)
 800724c:	6263      	str	r3, [r4, #36]	; 0x24
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <std+0x3c>)
 8007250:	62a3      	str	r3, [r4, #40]	; 0x28
 8007252:	4b05      	ldr	r3, [pc, #20]	; (8007268 <std+0x40>)
 8007254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007256:	4b05      	ldr	r3, [pc, #20]	; (800726c <std+0x44>)
 8007258:	6224      	str	r4, [r4, #32]
 800725a:	6323      	str	r3, [r4, #48]	; 0x30
 800725c:	bd10      	pop	{r4, pc}
 800725e:	bf00      	nop
 8007260:	08007581 	.word	0x08007581
 8007264:	080075a3 	.word	0x080075a3
 8007268:	080075db 	.word	0x080075db
 800726c:	080075ff 	.word	0x080075ff

08007270 <_cleanup_r>:
 8007270:	4901      	ldr	r1, [pc, #4]	; (8007278 <_cleanup_r+0x8>)
 8007272:	f000 b8af 	b.w	80073d4 <_fwalk_reent>
 8007276:	bf00      	nop
 8007278:	080071b1 	.word	0x080071b1

0800727c <__sfmoreglue>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	1e4a      	subs	r2, r1, #1
 8007280:	2568      	movs	r5, #104	; 0x68
 8007282:	4355      	muls	r5, r2
 8007284:	460e      	mov	r6, r1
 8007286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800728a:	f7ff faeb 	bl	8006864 <_malloc_r>
 800728e:	4604      	mov	r4, r0
 8007290:	b140      	cbz	r0, 80072a4 <__sfmoreglue+0x28>
 8007292:	2100      	movs	r1, #0
 8007294:	e9c0 1600 	strd	r1, r6, [r0]
 8007298:	300c      	adds	r0, #12
 800729a:	60a0      	str	r0, [r4, #8]
 800729c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072a0:	f7ff f9b6 	bl	8006610 <memset>
 80072a4:	4620      	mov	r0, r4
 80072a6:	bd70      	pop	{r4, r5, r6, pc}

080072a8 <__sfp_lock_acquire>:
 80072a8:	4801      	ldr	r0, [pc, #4]	; (80072b0 <__sfp_lock_acquire+0x8>)
 80072aa:	f000 b8b3 	b.w	8007414 <__retarget_lock_acquire_recursive>
 80072ae:	bf00      	nop
 80072b0:	2000bbf0 	.word	0x2000bbf0

080072b4 <__sfp_lock_release>:
 80072b4:	4801      	ldr	r0, [pc, #4]	; (80072bc <__sfp_lock_release+0x8>)
 80072b6:	f000 b8ae 	b.w	8007416 <__retarget_lock_release_recursive>
 80072ba:	bf00      	nop
 80072bc:	2000bbf0 	.word	0x2000bbf0

080072c0 <__sinit_lock_acquire>:
 80072c0:	4801      	ldr	r0, [pc, #4]	; (80072c8 <__sinit_lock_acquire+0x8>)
 80072c2:	f000 b8a7 	b.w	8007414 <__retarget_lock_acquire_recursive>
 80072c6:	bf00      	nop
 80072c8:	2000bbeb 	.word	0x2000bbeb

080072cc <__sinit_lock_release>:
 80072cc:	4801      	ldr	r0, [pc, #4]	; (80072d4 <__sinit_lock_release+0x8>)
 80072ce:	f000 b8a2 	b.w	8007416 <__retarget_lock_release_recursive>
 80072d2:	bf00      	nop
 80072d4:	2000bbeb 	.word	0x2000bbeb

080072d8 <__sinit>:
 80072d8:	b510      	push	{r4, lr}
 80072da:	4604      	mov	r4, r0
 80072dc:	f7ff fff0 	bl	80072c0 <__sinit_lock_acquire>
 80072e0:	69a3      	ldr	r3, [r4, #24]
 80072e2:	b11b      	cbz	r3, 80072ec <__sinit+0x14>
 80072e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e8:	f7ff bff0 	b.w	80072cc <__sinit_lock_release>
 80072ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072f0:	6523      	str	r3, [r4, #80]	; 0x50
 80072f2:	4b13      	ldr	r3, [pc, #76]	; (8007340 <__sinit+0x68>)
 80072f4:	4a13      	ldr	r2, [pc, #76]	; (8007344 <__sinit+0x6c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80072fa:	42a3      	cmp	r3, r4
 80072fc:	bf04      	itt	eq
 80072fe:	2301      	moveq	r3, #1
 8007300:	61a3      	streq	r3, [r4, #24]
 8007302:	4620      	mov	r0, r4
 8007304:	f000 f820 	bl	8007348 <__sfp>
 8007308:	6060      	str	r0, [r4, #4]
 800730a:	4620      	mov	r0, r4
 800730c:	f000 f81c 	bl	8007348 <__sfp>
 8007310:	60a0      	str	r0, [r4, #8]
 8007312:	4620      	mov	r0, r4
 8007314:	f000 f818 	bl	8007348 <__sfp>
 8007318:	2200      	movs	r2, #0
 800731a:	60e0      	str	r0, [r4, #12]
 800731c:	2104      	movs	r1, #4
 800731e:	6860      	ldr	r0, [r4, #4]
 8007320:	f7ff ff82 	bl	8007228 <std>
 8007324:	68a0      	ldr	r0, [r4, #8]
 8007326:	2201      	movs	r2, #1
 8007328:	2109      	movs	r1, #9
 800732a:	f7ff ff7d 	bl	8007228 <std>
 800732e:	68e0      	ldr	r0, [r4, #12]
 8007330:	2202      	movs	r2, #2
 8007332:	2112      	movs	r1, #18
 8007334:	f7ff ff78 	bl	8007228 <std>
 8007338:	2301      	movs	r3, #1
 800733a:	61a3      	str	r3, [r4, #24]
 800733c:	e7d2      	b.n	80072e4 <__sinit+0xc>
 800733e:	bf00      	nop
 8007340:	08007ea8 	.word	0x08007ea8
 8007344:	08007271 	.word	0x08007271

08007348 <__sfp>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	4607      	mov	r7, r0
 800734c:	f7ff ffac 	bl	80072a8 <__sfp_lock_acquire>
 8007350:	4b1e      	ldr	r3, [pc, #120]	; (80073cc <__sfp+0x84>)
 8007352:	681e      	ldr	r6, [r3, #0]
 8007354:	69b3      	ldr	r3, [r6, #24]
 8007356:	b913      	cbnz	r3, 800735e <__sfp+0x16>
 8007358:	4630      	mov	r0, r6
 800735a:	f7ff ffbd 	bl	80072d8 <__sinit>
 800735e:	3648      	adds	r6, #72	; 0x48
 8007360:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007364:	3b01      	subs	r3, #1
 8007366:	d503      	bpl.n	8007370 <__sfp+0x28>
 8007368:	6833      	ldr	r3, [r6, #0]
 800736a:	b30b      	cbz	r3, 80073b0 <__sfp+0x68>
 800736c:	6836      	ldr	r6, [r6, #0]
 800736e:	e7f7      	b.n	8007360 <__sfp+0x18>
 8007370:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007374:	b9d5      	cbnz	r5, 80073ac <__sfp+0x64>
 8007376:	4b16      	ldr	r3, [pc, #88]	; (80073d0 <__sfp+0x88>)
 8007378:	60e3      	str	r3, [r4, #12]
 800737a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800737e:	6665      	str	r5, [r4, #100]	; 0x64
 8007380:	f000 f847 	bl	8007412 <__retarget_lock_init_recursive>
 8007384:	f7ff ff96 	bl	80072b4 <__sfp_lock_release>
 8007388:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800738c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007390:	6025      	str	r5, [r4, #0]
 8007392:	61a5      	str	r5, [r4, #24]
 8007394:	2208      	movs	r2, #8
 8007396:	4629      	mov	r1, r5
 8007398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800739c:	f7ff f938 	bl	8006610 <memset>
 80073a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073a8:	4620      	mov	r0, r4
 80073aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ac:	3468      	adds	r4, #104	; 0x68
 80073ae:	e7d9      	b.n	8007364 <__sfp+0x1c>
 80073b0:	2104      	movs	r1, #4
 80073b2:	4638      	mov	r0, r7
 80073b4:	f7ff ff62 	bl	800727c <__sfmoreglue>
 80073b8:	4604      	mov	r4, r0
 80073ba:	6030      	str	r0, [r6, #0]
 80073bc:	2800      	cmp	r0, #0
 80073be:	d1d5      	bne.n	800736c <__sfp+0x24>
 80073c0:	f7ff ff78 	bl	80072b4 <__sfp_lock_release>
 80073c4:	230c      	movs	r3, #12
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	e7ee      	b.n	80073a8 <__sfp+0x60>
 80073ca:	bf00      	nop
 80073cc:	08007ea8 	.word	0x08007ea8
 80073d0:	ffff0001 	.word	0xffff0001

080073d4 <_fwalk_reent>:
 80073d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d8:	4606      	mov	r6, r0
 80073da:	4688      	mov	r8, r1
 80073dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073e0:	2700      	movs	r7, #0
 80073e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073e6:	f1b9 0901 	subs.w	r9, r9, #1
 80073ea:	d505      	bpl.n	80073f8 <_fwalk_reent+0x24>
 80073ec:	6824      	ldr	r4, [r4, #0]
 80073ee:	2c00      	cmp	r4, #0
 80073f0:	d1f7      	bne.n	80073e2 <_fwalk_reent+0xe>
 80073f2:	4638      	mov	r0, r7
 80073f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f8:	89ab      	ldrh	r3, [r5, #12]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d907      	bls.n	800740e <_fwalk_reent+0x3a>
 80073fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007402:	3301      	adds	r3, #1
 8007404:	d003      	beq.n	800740e <_fwalk_reent+0x3a>
 8007406:	4629      	mov	r1, r5
 8007408:	4630      	mov	r0, r6
 800740a:	47c0      	blx	r8
 800740c:	4307      	orrs	r7, r0
 800740e:	3568      	adds	r5, #104	; 0x68
 8007410:	e7e9      	b.n	80073e6 <_fwalk_reent+0x12>

08007412 <__retarget_lock_init_recursive>:
 8007412:	4770      	bx	lr

08007414 <__retarget_lock_acquire_recursive>:
 8007414:	4770      	bx	lr

08007416 <__retarget_lock_release_recursive>:
 8007416:	4770      	bx	lr

08007418 <__swhatbuf_r>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	460e      	mov	r6, r1
 800741c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007420:	2900      	cmp	r1, #0
 8007422:	b096      	sub	sp, #88	; 0x58
 8007424:	4614      	mov	r4, r2
 8007426:	461d      	mov	r5, r3
 8007428:	da07      	bge.n	800743a <__swhatbuf_r+0x22>
 800742a:	2300      	movs	r3, #0
 800742c:	602b      	str	r3, [r5, #0]
 800742e:	89b3      	ldrh	r3, [r6, #12]
 8007430:	061a      	lsls	r2, r3, #24
 8007432:	d410      	bmi.n	8007456 <__swhatbuf_r+0x3e>
 8007434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007438:	e00e      	b.n	8007458 <__swhatbuf_r+0x40>
 800743a:	466a      	mov	r2, sp
 800743c:	f000 f906 	bl	800764c <_fstat_r>
 8007440:	2800      	cmp	r0, #0
 8007442:	dbf2      	blt.n	800742a <__swhatbuf_r+0x12>
 8007444:	9a01      	ldr	r2, [sp, #4]
 8007446:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800744a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800744e:	425a      	negs	r2, r3
 8007450:	415a      	adcs	r2, r3
 8007452:	602a      	str	r2, [r5, #0]
 8007454:	e7ee      	b.n	8007434 <__swhatbuf_r+0x1c>
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	2000      	movs	r0, #0
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	b016      	add	sp, #88	; 0x58
 800745e:	bd70      	pop	{r4, r5, r6, pc}

08007460 <__smakebuf_r>:
 8007460:	898b      	ldrh	r3, [r1, #12]
 8007462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007464:	079d      	lsls	r5, r3, #30
 8007466:	4606      	mov	r6, r0
 8007468:	460c      	mov	r4, r1
 800746a:	d507      	bpl.n	800747c <__smakebuf_r+0x1c>
 800746c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	6123      	str	r3, [r4, #16]
 8007474:	2301      	movs	r3, #1
 8007476:	6163      	str	r3, [r4, #20]
 8007478:	b002      	add	sp, #8
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	ab01      	add	r3, sp, #4
 800747e:	466a      	mov	r2, sp
 8007480:	f7ff ffca 	bl	8007418 <__swhatbuf_r>
 8007484:	9900      	ldr	r1, [sp, #0]
 8007486:	4605      	mov	r5, r0
 8007488:	4630      	mov	r0, r6
 800748a:	f7ff f9eb 	bl	8006864 <_malloc_r>
 800748e:	b948      	cbnz	r0, 80074a4 <__smakebuf_r+0x44>
 8007490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007494:	059a      	lsls	r2, r3, #22
 8007496:	d4ef      	bmi.n	8007478 <__smakebuf_r+0x18>
 8007498:	f023 0303 	bic.w	r3, r3, #3
 800749c:	f043 0302 	orr.w	r3, r3, #2
 80074a0:	81a3      	strh	r3, [r4, #12]
 80074a2:	e7e3      	b.n	800746c <__smakebuf_r+0xc>
 80074a4:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <__smakebuf_r+0x7c>)
 80074a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	6020      	str	r0, [r4, #0]
 80074ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	9b00      	ldr	r3, [sp, #0]
 80074b4:	6163      	str	r3, [r4, #20]
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	6120      	str	r0, [r4, #16]
 80074ba:	b15b      	cbz	r3, 80074d4 <__smakebuf_r+0x74>
 80074bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074c0:	4630      	mov	r0, r6
 80074c2:	f000 f8d5 	bl	8007670 <_isatty_r>
 80074c6:	b128      	cbz	r0, 80074d4 <__smakebuf_r+0x74>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f023 0303 	bic.w	r3, r3, #3
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	89a0      	ldrh	r0, [r4, #12]
 80074d6:	4305      	orrs	r5, r0
 80074d8:	81a5      	strh	r5, [r4, #12]
 80074da:	e7cd      	b.n	8007478 <__smakebuf_r+0x18>
 80074dc:	08007271 	.word	0x08007271

080074e0 <__malloc_lock>:
 80074e0:	4801      	ldr	r0, [pc, #4]	; (80074e8 <__malloc_lock+0x8>)
 80074e2:	f7ff bf97 	b.w	8007414 <__retarget_lock_acquire_recursive>
 80074e6:	bf00      	nop
 80074e8:	2000bbec 	.word	0x2000bbec

080074ec <__malloc_unlock>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__malloc_unlock+0x8>)
 80074ee:	f7ff bf92 	b.w	8007416 <__retarget_lock_release_recursive>
 80074f2:	bf00      	nop
 80074f4:	2000bbec 	.word	0x2000bbec

080074f8 <_raise_r>:
 80074f8:	291f      	cmp	r1, #31
 80074fa:	b538      	push	{r3, r4, r5, lr}
 80074fc:	4604      	mov	r4, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	d904      	bls.n	800750c <_raise_r+0x14>
 8007502:	2316      	movs	r3, #22
 8007504:	6003      	str	r3, [r0, #0]
 8007506:	f04f 30ff 	mov.w	r0, #4294967295
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800750e:	b112      	cbz	r2, 8007516 <_raise_r+0x1e>
 8007510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007514:	b94b      	cbnz	r3, 800752a <_raise_r+0x32>
 8007516:	4620      	mov	r0, r4
 8007518:	f000 f830 	bl	800757c <_getpid_r>
 800751c:	462a      	mov	r2, r5
 800751e:	4601      	mov	r1, r0
 8007520:	4620      	mov	r0, r4
 8007522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007526:	f000 b817 	b.w	8007558 <_kill_r>
 800752a:	2b01      	cmp	r3, #1
 800752c:	d00a      	beq.n	8007544 <_raise_r+0x4c>
 800752e:	1c59      	adds	r1, r3, #1
 8007530:	d103      	bne.n	800753a <_raise_r+0x42>
 8007532:	2316      	movs	r3, #22
 8007534:	6003      	str	r3, [r0, #0]
 8007536:	2001      	movs	r0, #1
 8007538:	e7e7      	b.n	800750a <_raise_r+0x12>
 800753a:	2400      	movs	r4, #0
 800753c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007540:	4628      	mov	r0, r5
 8007542:	4798      	blx	r3
 8007544:	2000      	movs	r0, #0
 8007546:	e7e0      	b.n	800750a <_raise_r+0x12>

08007548 <raise>:
 8007548:	4b02      	ldr	r3, [pc, #8]	; (8007554 <raise+0xc>)
 800754a:	4601      	mov	r1, r0
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	f7ff bfd3 	b.w	80074f8 <_raise_r>
 8007552:	bf00      	nop
 8007554:	200019b4 	.word	0x200019b4

08007558 <_kill_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	; (8007578 <_kill_r+0x20>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	602b      	str	r3, [r5, #0]
 8007566:	f7fa fbdd 	bl	8001d24 <_kill>
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	d102      	bne.n	8007574 <_kill_r+0x1c>
 800756e:	682b      	ldr	r3, [r5, #0]
 8007570:	b103      	cbz	r3, 8007574 <_kill_r+0x1c>
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	bd38      	pop	{r3, r4, r5, pc}
 8007576:	bf00      	nop
 8007578:	2000bbe4 	.word	0x2000bbe4

0800757c <_getpid_r>:
 800757c:	f7fa bbca 	b.w	8001d14 <_getpid>

08007580 <__sread>:
 8007580:	b510      	push	{r4, lr}
 8007582:	460c      	mov	r4, r1
 8007584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007588:	f000 f894 	bl	80076b4 <_read_r>
 800758c:	2800      	cmp	r0, #0
 800758e:	bfab      	itete	ge
 8007590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007592:	89a3      	ldrhlt	r3, [r4, #12]
 8007594:	181b      	addge	r3, r3, r0
 8007596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800759a:	bfac      	ite	ge
 800759c:	6563      	strge	r3, [r4, #84]	; 0x54
 800759e:	81a3      	strhlt	r3, [r4, #12]
 80075a0:	bd10      	pop	{r4, pc}

080075a2 <__swrite>:
 80075a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a6:	461f      	mov	r7, r3
 80075a8:	898b      	ldrh	r3, [r1, #12]
 80075aa:	05db      	lsls	r3, r3, #23
 80075ac:	4605      	mov	r5, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	4616      	mov	r6, r2
 80075b2:	d505      	bpl.n	80075c0 <__swrite+0x1e>
 80075b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b8:	2302      	movs	r3, #2
 80075ba:	2200      	movs	r2, #0
 80075bc:	f000 f868 	bl	8007690 <_lseek_r>
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	4632      	mov	r2, r6
 80075ce:	463b      	mov	r3, r7
 80075d0:	4628      	mov	r0, r5
 80075d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075d6:	f000 b817 	b.w	8007608 <_write_r>

080075da <__sseek>:
 80075da:	b510      	push	{r4, lr}
 80075dc:	460c      	mov	r4, r1
 80075de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e2:	f000 f855 	bl	8007690 <_lseek_r>
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	bf15      	itete	ne
 80075ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80075ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075f6:	81a3      	strheq	r3, [r4, #12]
 80075f8:	bf18      	it	ne
 80075fa:	81a3      	strhne	r3, [r4, #12]
 80075fc:	bd10      	pop	{r4, pc}

080075fe <__sclose>:
 80075fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007602:	f000 b813 	b.w	800762c <_close_r>
	...

08007608 <_write_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4d07      	ldr	r5, [pc, #28]	; (8007628 <_write_r+0x20>)
 800760c:	4604      	mov	r4, r0
 800760e:	4608      	mov	r0, r1
 8007610:	4611      	mov	r1, r2
 8007612:	2200      	movs	r2, #0
 8007614:	602a      	str	r2, [r5, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	f7fa fbbb 	bl	8001d92 <_write>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_write_r+0x1e>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_write_r+0x1e>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	2000bbe4 	.word	0x2000bbe4

0800762c <_close_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d06      	ldr	r5, [pc, #24]	; (8007648 <_close_r+0x1c>)
 8007630:	2300      	movs	r3, #0
 8007632:	4604      	mov	r4, r0
 8007634:	4608      	mov	r0, r1
 8007636:	602b      	str	r3, [r5, #0]
 8007638:	f7fa fbc7 	bl	8001dca <_close>
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	d102      	bne.n	8007646 <_close_r+0x1a>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	b103      	cbz	r3, 8007646 <_close_r+0x1a>
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	2000bbe4 	.word	0x2000bbe4

0800764c <_fstat_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	4d07      	ldr	r5, [pc, #28]	; (800766c <_fstat_r+0x20>)
 8007650:	2300      	movs	r3, #0
 8007652:	4604      	mov	r4, r0
 8007654:	4608      	mov	r0, r1
 8007656:	4611      	mov	r1, r2
 8007658:	602b      	str	r3, [r5, #0]
 800765a:	f7fa fbc2 	bl	8001de2 <_fstat>
 800765e:	1c43      	adds	r3, r0, #1
 8007660:	d102      	bne.n	8007668 <_fstat_r+0x1c>
 8007662:	682b      	ldr	r3, [r5, #0]
 8007664:	b103      	cbz	r3, 8007668 <_fstat_r+0x1c>
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	bd38      	pop	{r3, r4, r5, pc}
 800766a:	bf00      	nop
 800766c:	2000bbe4 	.word	0x2000bbe4

08007670 <_isatty_r>:
 8007670:	b538      	push	{r3, r4, r5, lr}
 8007672:	4d06      	ldr	r5, [pc, #24]	; (800768c <_isatty_r+0x1c>)
 8007674:	2300      	movs	r3, #0
 8007676:	4604      	mov	r4, r0
 8007678:	4608      	mov	r0, r1
 800767a:	602b      	str	r3, [r5, #0]
 800767c:	f7fa fbc1 	bl	8001e02 <_isatty>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d102      	bne.n	800768a <_isatty_r+0x1a>
 8007684:	682b      	ldr	r3, [r5, #0]
 8007686:	b103      	cbz	r3, 800768a <_isatty_r+0x1a>
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	bd38      	pop	{r3, r4, r5, pc}
 800768c:	2000bbe4 	.word	0x2000bbe4

08007690 <_lseek_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4d07      	ldr	r5, [pc, #28]	; (80076b0 <_lseek_r+0x20>)
 8007694:	4604      	mov	r4, r0
 8007696:	4608      	mov	r0, r1
 8007698:	4611      	mov	r1, r2
 800769a:	2200      	movs	r2, #0
 800769c:	602a      	str	r2, [r5, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	f7fa fbba 	bl	8001e18 <_lseek>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_lseek_r+0x1e>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_lseek_r+0x1e>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	2000bbe4 	.word	0x2000bbe4

080076b4 <_read_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4d07      	ldr	r5, [pc, #28]	; (80076d4 <_read_r+0x20>)
 80076b8:	4604      	mov	r4, r0
 80076ba:	4608      	mov	r0, r1
 80076bc:	4611      	mov	r1, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	602a      	str	r2, [r5, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f7fa fb48 	bl	8001d58 <_read>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_read_r+0x1e>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_read_r+0x1e>
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	2000bbe4 	.word	0x2000bbe4

080076d8 <atan2>:
 80076d8:	f000 b836 	b.w	8007748 <__ieee754_atan2>

080076dc <sqrt>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	ed2d 8b02 	vpush	{d8}
 80076e2:	ec55 4b10 	vmov	r4, r5, d0
 80076e6:	f000 f8f9 	bl	80078dc <__ieee754_sqrt>
 80076ea:	4b15      	ldr	r3, [pc, #84]	; (8007740 <sqrt+0x64>)
 80076ec:	eeb0 8a40 	vmov.f32	s16, s0
 80076f0:	eef0 8a60 	vmov.f32	s17, s1
 80076f4:	f993 3000 	ldrsb.w	r3, [r3]
 80076f8:	3301      	adds	r3, #1
 80076fa:	d019      	beq.n	8007730 <sqrt+0x54>
 80076fc:	4622      	mov	r2, r4
 80076fe:	462b      	mov	r3, r5
 8007700:	4620      	mov	r0, r4
 8007702:	4629      	mov	r1, r5
 8007704:	f7f9 fa0a 	bl	8000b1c <__aeabi_dcmpun>
 8007708:	b990      	cbnz	r0, 8007730 <sqrt+0x54>
 800770a:	2200      	movs	r2, #0
 800770c:	2300      	movs	r3, #0
 800770e:	4620      	mov	r0, r4
 8007710:	4629      	mov	r1, r5
 8007712:	f7f9 f9db 	bl	8000acc <__aeabi_dcmplt>
 8007716:	b158      	cbz	r0, 8007730 <sqrt+0x54>
 8007718:	f7fe ff50 	bl	80065bc <__errno>
 800771c:	2321      	movs	r3, #33	; 0x21
 800771e:	6003      	str	r3, [r0, #0]
 8007720:	2200      	movs	r2, #0
 8007722:	2300      	movs	r3, #0
 8007724:	4610      	mov	r0, r2
 8007726:	4619      	mov	r1, r3
 8007728:	f7f9 f888 	bl	800083c <__aeabi_ddiv>
 800772c:	ec41 0b18 	vmov	d8, r0, r1
 8007730:	eeb0 0a48 	vmov.f32	s0, s16
 8007734:	eef0 0a68 	vmov.f32	s1, s17
 8007738:	ecbd 8b02 	vpop	{d8}
 800773c:	bd38      	pop	{r3, r4, r5, pc}
 800773e:	bf00      	nop
 8007740:	20001a18 	.word	0x20001a18
 8007744:	00000000 	.word	0x00000000

08007748 <__ieee754_atan2>:
 8007748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800774c:	ec57 6b11 	vmov	r6, r7, d1
 8007750:	4273      	negs	r3, r6
 8007752:	f8df e184 	ldr.w	lr, [pc, #388]	; 80078d8 <__ieee754_atan2+0x190>
 8007756:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800775a:	4333      	orrs	r3, r6
 800775c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007760:	4573      	cmp	r3, lr
 8007762:	ec51 0b10 	vmov	r0, r1, d0
 8007766:	ee11 8a10 	vmov	r8, s2
 800776a:	d80a      	bhi.n	8007782 <__ieee754_atan2+0x3a>
 800776c:	4244      	negs	r4, r0
 800776e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007772:	4304      	orrs	r4, r0
 8007774:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007778:	4574      	cmp	r4, lr
 800777a:	ee10 9a10 	vmov	r9, s0
 800777e:	468c      	mov	ip, r1
 8007780:	d907      	bls.n	8007792 <__ieee754_atan2+0x4a>
 8007782:	4632      	mov	r2, r6
 8007784:	463b      	mov	r3, r7
 8007786:	f7f8 fd79 	bl	800027c <__adddf3>
 800778a:	ec41 0b10 	vmov	d0, r0, r1
 800778e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007792:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007796:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800779a:	4334      	orrs	r4, r6
 800779c:	d103      	bne.n	80077a6 <__ieee754_atan2+0x5e>
 800779e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a2:	f000 b951 	b.w	8007a48 <atan>
 80077a6:	17bc      	asrs	r4, r7, #30
 80077a8:	f004 0402 	and.w	r4, r4, #2
 80077ac:	ea53 0909 	orrs.w	r9, r3, r9
 80077b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80077b4:	d107      	bne.n	80077c6 <__ieee754_atan2+0x7e>
 80077b6:	2c02      	cmp	r4, #2
 80077b8:	d060      	beq.n	800787c <__ieee754_atan2+0x134>
 80077ba:	2c03      	cmp	r4, #3
 80077bc:	d1e5      	bne.n	800778a <__ieee754_atan2+0x42>
 80077be:	a142      	add	r1, pc, #264	; (adr r1, 80078c8 <__ieee754_atan2+0x180>)
 80077c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c4:	e7e1      	b.n	800778a <__ieee754_atan2+0x42>
 80077c6:	ea52 0808 	orrs.w	r8, r2, r8
 80077ca:	d106      	bne.n	80077da <__ieee754_atan2+0x92>
 80077cc:	f1bc 0f00 	cmp.w	ip, #0
 80077d0:	da5f      	bge.n	8007892 <__ieee754_atan2+0x14a>
 80077d2:	a13f      	add	r1, pc, #252	; (adr r1, 80078d0 <__ieee754_atan2+0x188>)
 80077d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d8:	e7d7      	b.n	800778a <__ieee754_atan2+0x42>
 80077da:	4572      	cmp	r2, lr
 80077dc:	d10f      	bne.n	80077fe <__ieee754_atan2+0xb6>
 80077de:	4293      	cmp	r3, r2
 80077e0:	f104 34ff 	add.w	r4, r4, #4294967295
 80077e4:	d107      	bne.n	80077f6 <__ieee754_atan2+0xae>
 80077e6:	2c02      	cmp	r4, #2
 80077e8:	d84c      	bhi.n	8007884 <__ieee754_atan2+0x13c>
 80077ea:	4b35      	ldr	r3, [pc, #212]	; (80078c0 <__ieee754_atan2+0x178>)
 80077ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80077f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80077f4:	e7c9      	b.n	800778a <__ieee754_atan2+0x42>
 80077f6:	2c02      	cmp	r4, #2
 80077f8:	d848      	bhi.n	800788c <__ieee754_atan2+0x144>
 80077fa:	4b32      	ldr	r3, [pc, #200]	; (80078c4 <__ieee754_atan2+0x17c>)
 80077fc:	e7f6      	b.n	80077ec <__ieee754_atan2+0xa4>
 80077fe:	4573      	cmp	r3, lr
 8007800:	d0e4      	beq.n	80077cc <__ieee754_atan2+0x84>
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007808:	ea4f 5223 	mov.w	r2, r3, asr #20
 800780c:	da1e      	bge.n	800784c <__ieee754_atan2+0x104>
 800780e:	2f00      	cmp	r7, #0
 8007810:	da01      	bge.n	8007816 <__ieee754_atan2+0xce>
 8007812:	323c      	adds	r2, #60	; 0x3c
 8007814:	db1e      	blt.n	8007854 <__ieee754_atan2+0x10c>
 8007816:	4632      	mov	r2, r6
 8007818:	463b      	mov	r3, r7
 800781a:	f7f9 f80f 	bl	800083c <__aeabi_ddiv>
 800781e:	ec41 0b10 	vmov	d0, r0, r1
 8007822:	f000 fab1 	bl	8007d88 <fabs>
 8007826:	f000 f90f 	bl	8007a48 <atan>
 800782a:	ec51 0b10 	vmov	r0, r1, d0
 800782e:	2c01      	cmp	r4, #1
 8007830:	d013      	beq.n	800785a <__ieee754_atan2+0x112>
 8007832:	2c02      	cmp	r4, #2
 8007834:	d015      	beq.n	8007862 <__ieee754_atan2+0x11a>
 8007836:	2c00      	cmp	r4, #0
 8007838:	d0a7      	beq.n	800778a <__ieee754_atan2+0x42>
 800783a:	a319      	add	r3, pc, #100	; (adr r3, 80078a0 <__ieee754_atan2+0x158>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 fd1a 	bl	8000278 <__aeabi_dsub>
 8007844:	a318      	add	r3, pc, #96	; (adr r3, 80078a8 <__ieee754_atan2+0x160>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	e014      	b.n	8007876 <__ieee754_atan2+0x12e>
 800784c:	a118      	add	r1, pc, #96	; (adr r1, 80078b0 <__ieee754_atan2+0x168>)
 800784e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007852:	e7ec      	b.n	800782e <__ieee754_atan2+0xe6>
 8007854:	2000      	movs	r0, #0
 8007856:	2100      	movs	r1, #0
 8007858:	e7e9      	b.n	800782e <__ieee754_atan2+0xe6>
 800785a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800785e:	4619      	mov	r1, r3
 8007860:	e793      	b.n	800778a <__ieee754_atan2+0x42>
 8007862:	a30f      	add	r3, pc, #60	; (adr r3, 80078a0 <__ieee754_atan2+0x158>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 fd06 	bl	8000278 <__aeabi_dsub>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	a10d      	add	r1, pc, #52	; (adr r1, 80078a8 <__ieee754_atan2+0x160>)
 8007872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007876:	f7f8 fcff 	bl	8000278 <__aeabi_dsub>
 800787a:	e786      	b.n	800778a <__ieee754_atan2+0x42>
 800787c:	a10a      	add	r1, pc, #40	; (adr r1, 80078a8 <__ieee754_atan2+0x160>)
 800787e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007882:	e782      	b.n	800778a <__ieee754_atan2+0x42>
 8007884:	a10c      	add	r1, pc, #48	; (adr r1, 80078b8 <__ieee754_atan2+0x170>)
 8007886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800788a:	e77e      	b.n	800778a <__ieee754_atan2+0x42>
 800788c:	2000      	movs	r0, #0
 800788e:	2100      	movs	r1, #0
 8007890:	e77b      	b.n	800778a <__ieee754_atan2+0x42>
 8007892:	a107      	add	r1, pc, #28	; (adr r1, 80078b0 <__ieee754_atan2+0x168>)
 8007894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007898:	e777      	b.n	800778a <__ieee754_atan2+0x42>
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w
 80078a0:	33145c07 	.word	0x33145c07
 80078a4:	3ca1a626 	.word	0x3ca1a626
 80078a8:	54442d18 	.word	0x54442d18
 80078ac:	400921fb 	.word	0x400921fb
 80078b0:	54442d18 	.word	0x54442d18
 80078b4:	3ff921fb 	.word	0x3ff921fb
 80078b8:	54442d18 	.word	0x54442d18
 80078bc:	3fe921fb 	.word	0x3fe921fb
 80078c0:	08007ff8 	.word	0x08007ff8
 80078c4:	08008010 	.word	0x08008010
 80078c8:	54442d18 	.word	0x54442d18
 80078cc:	c00921fb 	.word	0xc00921fb
 80078d0:	54442d18 	.word	0x54442d18
 80078d4:	bff921fb 	.word	0xbff921fb
 80078d8:	7ff00000 	.word	0x7ff00000

080078dc <__ieee754_sqrt>:
 80078dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e0:	ec55 4b10 	vmov	r4, r5, d0
 80078e4:	4e56      	ldr	r6, [pc, #344]	; (8007a40 <__ieee754_sqrt+0x164>)
 80078e6:	43ae      	bics	r6, r5
 80078e8:	ee10 0a10 	vmov	r0, s0
 80078ec:	ee10 3a10 	vmov	r3, s0
 80078f0:	4629      	mov	r1, r5
 80078f2:	462a      	mov	r2, r5
 80078f4:	d110      	bne.n	8007918 <__ieee754_sqrt+0x3c>
 80078f6:	ee10 2a10 	vmov	r2, s0
 80078fa:	462b      	mov	r3, r5
 80078fc:	f7f8 fe74 	bl	80005e8 <__aeabi_dmul>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	f7f8 fcb8 	bl	800027c <__adddf3>
 800790c:	4604      	mov	r4, r0
 800790e:	460d      	mov	r5, r1
 8007910:	ec45 4b10 	vmov	d0, r4, r5
 8007914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007918:	2d00      	cmp	r5, #0
 800791a:	dc10      	bgt.n	800793e <__ieee754_sqrt+0x62>
 800791c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007920:	4330      	orrs	r0, r6
 8007922:	d0f5      	beq.n	8007910 <__ieee754_sqrt+0x34>
 8007924:	b15d      	cbz	r5, 800793e <__ieee754_sqrt+0x62>
 8007926:	ee10 2a10 	vmov	r2, s0
 800792a:	462b      	mov	r3, r5
 800792c:	ee10 0a10 	vmov	r0, s0
 8007930:	f7f8 fca2 	bl	8000278 <__aeabi_dsub>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	f7f8 ff80 	bl	800083c <__aeabi_ddiv>
 800793c:	e7e6      	b.n	800790c <__ieee754_sqrt+0x30>
 800793e:	1509      	asrs	r1, r1, #20
 8007940:	d076      	beq.n	8007a30 <__ieee754_sqrt+0x154>
 8007942:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007946:	07ce      	lsls	r6, r1, #31
 8007948:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800794c:	bf5e      	ittt	pl
 800794e:	0fda      	lsrpl	r2, r3, #31
 8007950:	005b      	lslpl	r3, r3, #1
 8007952:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007956:	0fda      	lsrs	r2, r3, #31
 8007958:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800795c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007960:	2000      	movs	r0, #0
 8007962:	106d      	asrs	r5, r5, #1
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	f04f 0e16 	mov.w	lr, #22
 800796a:	4684      	mov	ip, r0
 800796c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007970:	eb0c 0401 	add.w	r4, ip, r1
 8007974:	4294      	cmp	r4, r2
 8007976:	bfde      	ittt	le
 8007978:	1b12      	suble	r2, r2, r4
 800797a:	eb04 0c01 	addle.w	ip, r4, r1
 800797e:	1840      	addle	r0, r0, r1
 8007980:	0052      	lsls	r2, r2, #1
 8007982:	f1be 0e01 	subs.w	lr, lr, #1
 8007986:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800798a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800798e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007992:	d1ed      	bne.n	8007970 <__ieee754_sqrt+0x94>
 8007994:	4671      	mov	r1, lr
 8007996:	2720      	movs	r7, #32
 8007998:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800799c:	4562      	cmp	r2, ip
 800799e:	eb04 060e 	add.w	r6, r4, lr
 80079a2:	dc02      	bgt.n	80079aa <__ieee754_sqrt+0xce>
 80079a4:	d113      	bne.n	80079ce <__ieee754_sqrt+0xf2>
 80079a6:	429e      	cmp	r6, r3
 80079a8:	d811      	bhi.n	80079ce <__ieee754_sqrt+0xf2>
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	eb06 0e04 	add.w	lr, r6, r4
 80079b0:	da43      	bge.n	8007a3a <__ieee754_sqrt+0x15e>
 80079b2:	f1be 0f00 	cmp.w	lr, #0
 80079b6:	db40      	blt.n	8007a3a <__ieee754_sqrt+0x15e>
 80079b8:	f10c 0801 	add.w	r8, ip, #1
 80079bc:	eba2 020c 	sub.w	r2, r2, ip
 80079c0:	429e      	cmp	r6, r3
 80079c2:	bf88      	it	hi
 80079c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80079c8:	1b9b      	subs	r3, r3, r6
 80079ca:	4421      	add	r1, r4
 80079cc:	46c4      	mov	ip, r8
 80079ce:	0052      	lsls	r2, r2, #1
 80079d0:	3f01      	subs	r7, #1
 80079d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80079d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80079da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80079de:	d1dd      	bne.n	800799c <__ieee754_sqrt+0xc0>
 80079e0:	4313      	orrs	r3, r2
 80079e2:	d006      	beq.n	80079f2 <__ieee754_sqrt+0x116>
 80079e4:	1c4c      	adds	r4, r1, #1
 80079e6:	bf13      	iteet	ne
 80079e8:	3101      	addne	r1, #1
 80079ea:	3001      	addeq	r0, #1
 80079ec:	4639      	moveq	r1, r7
 80079ee:	f021 0101 	bicne.w	r1, r1, #1
 80079f2:	1043      	asrs	r3, r0, #1
 80079f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80079f8:	0849      	lsrs	r1, r1, #1
 80079fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80079fe:	07c2      	lsls	r2, r0, #31
 8007a00:	bf48      	it	mi
 8007a02:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007a06:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	463d      	mov	r5, r7
 8007a0e:	e77f      	b.n	8007910 <__ieee754_sqrt+0x34>
 8007a10:	0ada      	lsrs	r2, r3, #11
 8007a12:	3815      	subs	r0, #21
 8007a14:	055b      	lsls	r3, r3, #21
 8007a16:	2a00      	cmp	r2, #0
 8007a18:	d0fa      	beq.n	8007a10 <__ieee754_sqrt+0x134>
 8007a1a:	02d7      	lsls	r7, r2, #11
 8007a1c:	d50a      	bpl.n	8007a34 <__ieee754_sqrt+0x158>
 8007a1e:	f1c1 0420 	rsb	r4, r1, #32
 8007a22:	fa23 f404 	lsr.w	r4, r3, r4
 8007a26:	1e4d      	subs	r5, r1, #1
 8007a28:	408b      	lsls	r3, r1
 8007a2a:	4322      	orrs	r2, r4
 8007a2c:	1b41      	subs	r1, r0, r5
 8007a2e:	e788      	b.n	8007942 <__ieee754_sqrt+0x66>
 8007a30:	4608      	mov	r0, r1
 8007a32:	e7f0      	b.n	8007a16 <__ieee754_sqrt+0x13a>
 8007a34:	0052      	lsls	r2, r2, #1
 8007a36:	3101      	adds	r1, #1
 8007a38:	e7ef      	b.n	8007a1a <__ieee754_sqrt+0x13e>
 8007a3a:	46e0      	mov	r8, ip
 8007a3c:	e7be      	b.n	80079bc <__ieee754_sqrt+0xe0>
 8007a3e:	bf00      	nop
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	00000000 	.word	0x00000000

08007a48 <atan>:
 8007a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	ec55 4b10 	vmov	r4, r5, d0
 8007a50:	4bc3      	ldr	r3, [pc, #780]	; (8007d60 <atan+0x318>)
 8007a52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a56:	429e      	cmp	r6, r3
 8007a58:	46ab      	mov	fp, r5
 8007a5a:	dd18      	ble.n	8007a8e <atan+0x46>
 8007a5c:	4bc1      	ldr	r3, [pc, #772]	; (8007d64 <atan+0x31c>)
 8007a5e:	429e      	cmp	r6, r3
 8007a60:	dc01      	bgt.n	8007a66 <atan+0x1e>
 8007a62:	d109      	bne.n	8007a78 <atan+0x30>
 8007a64:	b144      	cbz	r4, 8007a78 <atan+0x30>
 8007a66:	4622      	mov	r2, r4
 8007a68:	462b      	mov	r3, r5
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	f7f8 fc05 	bl	800027c <__adddf3>
 8007a72:	4604      	mov	r4, r0
 8007a74:	460d      	mov	r5, r1
 8007a76:	e006      	b.n	8007a86 <atan+0x3e>
 8007a78:	f1bb 0f00 	cmp.w	fp, #0
 8007a7c:	f300 8131 	bgt.w	8007ce2 <atan+0x29a>
 8007a80:	a59b      	add	r5, pc, #620	; (adr r5, 8007cf0 <atan+0x2a8>)
 8007a82:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a86:	ec45 4b10 	vmov	d0, r4, r5
 8007a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8e:	4bb6      	ldr	r3, [pc, #728]	; (8007d68 <atan+0x320>)
 8007a90:	429e      	cmp	r6, r3
 8007a92:	dc14      	bgt.n	8007abe <atan+0x76>
 8007a94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007a98:	429e      	cmp	r6, r3
 8007a9a:	dc0d      	bgt.n	8007ab8 <atan+0x70>
 8007a9c:	a396      	add	r3, pc, #600	; (adr r3, 8007cf8 <atan+0x2b0>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	ee10 0a10 	vmov	r0, s0
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	f7f8 fbe8 	bl	800027c <__adddf3>
 8007aac:	4baf      	ldr	r3, [pc, #700]	; (8007d6c <atan+0x324>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f7f9 f82a 	bl	8000b08 <__aeabi_dcmpgt>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d1e6      	bne.n	8007a86 <atan+0x3e>
 8007ab8:	f04f 3aff 	mov.w	sl, #4294967295
 8007abc:	e02b      	b.n	8007b16 <atan+0xce>
 8007abe:	f000 f963 	bl	8007d88 <fabs>
 8007ac2:	4bab      	ldr	r3, [pc, #684]	; (8007d70 <atan+0x328>)
 8007ac4:	429e      	cmp	r6, r3
 8007ac6:	ec55 4b10 	vmov	r4, r5, d0
 8007aca:	f300 80bf 	bgt.w	8007c4c <atan+0x204>
 8007ace:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007ad2:	429e      	cmp	r6, r3
 8007ad4:	f300 80a0 	bgt.w	8007c18 <atan+0x1d0>
 8007ad8:	ee10 2a10 	vmov	r2, s0
 8007adc:	ee10 0a10 	vmov	r0, s0
 8007ae0:	462b      	mov	r3, r5
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	f7f8 fbca 	bl	800027c <__adddf3>
 8007ae8:	4ba0      	ldr	r3, [pc, #640]	; (8007d6c <atan+0x324>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	f7f8 fbc4 	bl	8000278 <__aeabi_dsub>
 8007af0:	2200      	movs	r2, #0
 8007af2:	4606      	mov	r6, r0
 8007af4:	460f      	mov	r7, r1
 8007af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007afa:	4620      	mov	r0, r4
 8007afc:	4629      	mov	r1, r5
 8007afe:	f7f8 fbbd 	bl	800027c <__adddf3>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4630      	mov	r0, r6
 8007b08:	4639      	mov	r1, r7
 8007b0a:	f7f8 fe97 	bl	800083c <__aeabi_ddiv>
 8007b0e:	f04f 0a00 	mov.w	sl, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	460d      	mov	r5, r1
 8007b16:	4622      	mov	r2, r4
 8007b18:	462b      	mov	r3, r5
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f8 fd63 	bl	80005e8 <__aeabi_dmul>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4680      	mov	r8, r0
 8007b28:	4689      	mov	r9, r1
 8007b2a:	f7f8 fd5d 	bl	80005e8 <__aeabi_dmul>
 8007b2e:	a374      	add	r3, pc, #464	; (adr r3, 8007d00 <atan+0x2b8>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	4606      	mov	r6, r0
 8007b36:	460f      	mov	r7, r1
 8007b38:	f7f8 fd56 	bl	80005e8 <__aeabi_dmul>
 8007b3c:	a372      	add	r3, pc, #456	; (adr r3, 8007d08 <atan+0x2c0>)
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f7f8 fb9b 	bl	800027c <__adddf3>
 8007b46:	4632      	mov	r2, r6
 8007b48:	463b      	mov	r3, r7
 8007b4a:	f7f8 fd4d 	bl	80005e8 <__aeabi_dmul>
 8007b4e:	a370      	add	r3, pc, #448	; (adr r3, 8007d10 <atan+0x2c8>)
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	f7f8 fb92 	bl	800027c <__adddf3>
 8007b58:	4632      	mov	r2, r6
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	f7f8 fd44 	bl	80005e8 <__aeabi_dmul>
 8007b60:	a36d      	add	r3, pc, #436	; (adr r3, 8007d18 <atan+0x2d0>)
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f7f8 fb89 	bl	800027c <__adddf3>
 8007b6a:	4632      	mov	r2, r6
 8007b6c:	463b      	mov	r3, r7
 8007b6e:	f7f8 fd3b 	bl	80005e8 <__aeabi_dmul>
 8007b72:	a36b      	add	r3, pc, #428	; (adr r3, 8007d20 <atan+0x2d8>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f7f8 fb80 	bl	800027c <__adddf3>
 8007b7c:	4632      	mov	r2, r6
 8007b7e:	463b      	mov	r3, r7
 8007b80:	f7f8 fd32 	bl	80005e8 <__aeabi_dmul>
 8007b84:	a368      	add	r3, pc, #416	; (adr r3, 8007d28 <atan+0x2e0>)
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	f7f8 fb77 	bl	800027c <__adddf3>
 8007b8e:	4642      	mov	r2, r8
 8007b90:	464b      	mov	r3, r9
 8007b92:	f7f8 fd29 	bl	80005e8 <__aeabi_dmul>
 8007b96:	a366      	add	r3, pc, #408	; (adr r3, 8007d30 <atan+0x2e8>)
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	4689      	mov	r9, r1
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	f7f8 fd20 	bl	80005e8 <__aeabi_dmul>
 8007ba8:	a363      	add	r3, pc, #396	; (adr r3, 8007d38 <atan+0x2f0>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f7f8 fb63 	bl	8000278 <__aeabi_dsub>
 8007bb2:	4632      	mov	r2, r6
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	f7f8 fd17 	bl	80005e8 <__aeabi_dmul>
 8007bba:	a361      	add	r3, pc, #388	; (adr r3, 8007d40 <atan+0x2f8>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f7f8 fb5a 	bl	8000278 <__aeabi_dsub>
 8007bc4:	4632      	mov	r2, r6
 8007bc6:	463b      	mov	r3, r7
 8007bc8:	f7f8 fd0e 	bl	80005e8 <__aeabi_dmul>
 8007bcc:	a35e      	add	r3, pc, #376	; (adr r3, 8007d48 <atan+0x300>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	f7f8 fb51 	bl	8000278 <__aeabi_dsub>
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	463b      	mov	r3, r7
 8007bda:	f7f8 fd05 	bl	80005e8 <__aeabi_dmul>
 8007bde:	a35c      	add	r3, pc, #368	; (adr r3, 8007d50 <atan+0x308>)
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f7f8 fb48 	bl	8000278 <__aeabi_dsub>
 8007be8:	4632      	mov	r2, r6
 8007bea:	463b      	mov	r3, r7
 8007bec:	f7f8 fcfc 	bl	80005e8 <__aeabi_dmul>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	f7f8 fb40 	bl	800027c <__adddf3>
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	462b      	mov	r3, r5
 8007c00:	f7f8 fcf2 	bl	80005e8 <__aeabi_dmul>
 8007c04:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	d14b      	bne.n	8007ca6 <atan+0x25e>
 8007c0e:	4620      	mov	r0, r4
 8007c10:	4629      	mov	r1, r5
 8007c12:	f7f8 fb31 	bl	8000278 <__aeabi_dsub>
 8007c16:	e72c      	b.n	8007a72 <atan+0x2a>
 8007c18:	ee10 0a10 	vmov	r0, s0
 8007c1c:	4b53      	ldr	r3, [pc, #332]	; (8007d6c <atan+0x324>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	4629      	mov	r1, r5
 8007c22:	f7f8 fb29 	bl	8000278 <__aeabi_dsub>
 8007c26:	4b51      	ldr	r3, [pc, #324]	; (8007d6c <atan+0x324>)
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460f      	mov	r7, r1
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	f7f8 fb23 	bl	800027c <__adddf3>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7f8 fdfd 	bl	800083c <__aeabi_ddiv>
 8007c42:	f04f 0a01 	mov.w	sl, #1
 8007c46:	4604      	mov	r4, r0
 8007c48:	460d      	mov	r5, r1
 8007c4a:	e764      	b.n	8007b16 <atan+0xce>
 8007c4c:	4b49      	ldr	r3, [pc, #292]	; (8007d74 <atan+0x32c>)
 8007c4e:	429e      	cmp	r6, r3
 8007c50:	da1d      	bge.n	8007c8e <atan+0x246>
 8007c52:	ee10 0a10 	vmov	r0, s0
 8007c56:	4b48      	ldr	r3, [pc, #288]	; (8007d78 <atan+0x330>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	f7f8 fb0c 	bl	8000278 <__aeabi_dsub>
 8007c60:	4b45      	ldr	r3, [pc, #276]	; (8007d78 <atan+0x330>)
 8007c62:	4606      	mov	r6, r0
 8007c64:	460f      	mov	r7, r1
 8007c66:	2200      	movs	r2, #0
 8007c68:	4620      	mov	r0, r4
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	f7f8 fcbc 	bl	80005e8 <__aeabi_dmul>
 8007c70:	4b3e      	ldr	r3, [pc, #248]	; (8007d6c <atan+0x324>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	f7f8 fb02 	bl	800027c <__adddf3>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 fddc 	bl	800083c <__aeabi_ddiv>
 8007c84:	f04f 0a02 	mov.w	sl, #2
 8007c88:	4604      	mov	r4, r0
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	e743      	b.n	8007b16 <atan+0xce>
 8007c8e:	462b      	mov	r3, r5
 8007c90:	ee10 2a10 	vmov	r2, s0
 8007c94:	4939      	ldr	r1, [pc, #228]	; (8007d7c <atan+0x334>)
 8007c96:	2000      	movs	r0, #0
 8007c98:	f7f8 fdd0 	bl	800083c <__aeabi_ddiv>
 8007c9c:	f04f 0a03 	mov.w	sl, #3
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	460d      	mov	r5, r1
 8007ca4:	e737      	b.n	8007b16 <atan+0xce>
 8007ca6:	4b36      	ldr	r3, [pc, #216]	; (8007d80 <atan+0x338>)
 8007ca8:	4e36      	ldr	r6, [pc, #216]	; (8007d84 <atan+0x33c>)
 8007caa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007cae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007cb2:	e9da 2300 	ldrd	r2, r3, [sl]
 8007cb6:	f7f8 fadf 	bl	8000278 <__aeabi_dsub>
 8007cba:	4622      	mov	r2, r4
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	f7f8 fadb 	bl	8000278 <__aeabi_dsub>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007cca:	f7f8 fad5 	bl	8000278 <__aeabi_dsub>
 8007cce:	f1bb 0f00 	cmp.w	fp, #0
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	f6bf aed6 	bge.w	8007a86 <atan+0x3e>
 8007cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cde:	461d      	mov	r5, r3
 8007ce0:	e6d1      	b.n	8007a86 <atan+0x3e>
 8007ce2:	a51d      	add	r5, pc, #116	; (adr r5, 8007d58 <atan+0x310>)
 8007ce4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ce8:	e6cd      	b.n	8007a86 <atan+0x3e>
 8007cea:	bf00      	nop
 8007cec:	f3af 8000 	nop.w
 8007cf0:	54442d18 	.word	0x54442d18
 8007cf4:	bff921fb 	.word	0xbff921fb
 8007cf8:	8800759c 	.word	0x8800759c
 8007cfc:	7e37e43c 	.word	0x7e37e43c
 8007d00:	e322da11 	.word	0xe322da11
 8007d04:	3f90ad3a 	.word	0x3f90ad3a
 8007d08:	24760deb 	.word	0x24760deb
 8007d0c:	3fa97b4b 	.word	0x3fa97b4b
 8007d10:	a0d03d51 	.word	0xa0d03d51
 8007d14:	3fb10d66 	.word	0x3fb10d66
 8007d18:	c54c206e 	.word	0xc54c206e
 8007d1c:	3fb745cd 	.word	0x3fb745cd
 8007d20:	920083ff 	.word	0x920083ff
 8007d24:	3fc24924 	.word	0x3fc24924
 8007d28:	5555550d 	.word	0x5555550d
 8007d2c:	3fd55555 	.word	0x3fd55555
 8007d30:	2c6a6c2f 	.word	0x2c6a6c2f
 8007d34:	bfa2b444 	.word	0xbfa2b444
 8007d38:	52defd9a 	.word	0x52defd9a
 8007d3c:	3fadde2d 	.word	0x3fadde2d
 8007d40:	af749a6d 	.word	0xaf749a6d
 8007d44:	3fb3b0f2 	.word	0x3fb3b0f2
 8007d48:	fe231671 	.word	0xfe231671
 8007d4c:	3fbc71c6 	.word	0x3fbc71c6
 8007d50:	9998ebc4 	.word	0x9998ebc4
 8007d54:	3fc99999 	.word	0x3fc99999
 8007d58:	54442d18 	.word	0x54442d18
 8007d5c:	3ff921fb 	.word	0x3ff921fb
 8007d60:	440fffff 	.word	0x440fffff
 8007d64:	7ff00000 	.word	0x7ff00000
 8007d68:	3fdbffff 	.word	0x3fdbffff
 8007d6c:	3ff00000 	.word	0x3ff00000
 8007d70:	3ff2ffff 	.word	0x3ff2ffff
 8007d74:	40038000 	.word	0x40038000
 8007d78:	3ff80000 	.word	0x3ff80000
 8007d7c:	bff00000 	.word	0xbff00000
 8007d80:	08008048 	.word	0x08008048
 8007d84:	08008028 	.word	0x08008028

08007d88 <fabs>:
 8007d88:	ec51 0b10 	vmov	r0, r1, d0
 8007d8c:	ee10 2a10 	vmov	r2, s0
 8007d90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d94:	ec43 2b10 	vmov	d0, r2, r3
 8007d98:	4770      	bx	lr
	...

08007d9c <_gettimeofday>:
 8007d9c:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <_gettimeofday+0xc>)
 8007d9e:	2258      	movs	r2, #88	; 0x58
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	4770      	bx	lr
 8007da8:	2000bbe4 	.word	0x2000bbe4

08007dac <_init>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr

08007db8 <_fini>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr
